#!/usr/bin/env perl

# Copyright (c) 2021, 2022 Stefan Blachmann
# All rights reserved.

# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


# TODO  add check when option -c : for vesa.ko compiled into kernel and make user aware of necessity to build kernel, offer to build kernel too
# TODO  update for FBSD 14
# TODO  better sizes for dialog boxes
# TODO  does it make sense to rework nvidia pciid generator script for eliminating pci ID doublets? maybe for identifying the 304 cards that are neither supported by nv nor by 340?
# TODO  for Intel, investigate which accelerators are appropriate 
#       for each FBSD version/GPU generation, and add this directive to 
#       xorg.conf
#       see here for getting the idea: https://forums.freebsd.org/threads/kde-severe-flickering-gui-with-intel-graphics.78398/post-492272
# TODO  if anybody wants to run the installer live, build some hack
#       for "installing" respective linking the particular nvidia 
#       proprietary driver package, as they otherwise conflict
# TODO  look at the xorg drivers whether they use vesa BIOS 
#       for reading EDID
#       as these work only if primary adapter
#           Uses VESA BIOS:
#               -nv
#       Uses I2C instead of VESA BIOS:
# 
#       Uses VESA BIOS if I2C doesn't yield monitor:
# #               -mga
# 

# NOTES: 
# the S3 driver depends on libxaa.so, and thus no longer works.
# https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=257417
# TODO add respective fail message

# Tested: Jan 19 2022 (using FBSD 13-RELEASE-p6) on 1600x1200 Dell FP XXX LCD
# on Asrock 939DualVSTA (3GB RAM)
# FreeBSD fails to detect this boards' ACPI S3 suspend/resume capability,
# so zzz not tested

# Card PCI-E            driver      Comment
# Nvidia GF 8400 GS:    nvidia-340  Works fine (DVI)
# Radeon HD 7350        radeonkms   Works fine (DVI)

# Card AGP              driver      Comment
# ATI Radeon 9200 SE:   radeonkms   Works fine (DVI)
# ATI Rage 128 Pro:     r128        Fails, some EE with unwind in Xorg.log
# Nvidia GF MX 200:     nv          Works fine [*]
# Nvidia GF MX 440:     nv          Works fine [*]
# Nvidia Vanta 16:      nv          Works fine [*]
# Nvidia Quadro NVS 280:nv          Works fine [*]
# Matrox Mill G550      mga         Works fine [*]

# Tested: Jan 22 2022 (using FBSD 13-RELEASE-p6) on 1600x1200 Dell FP XXX LCD
# on HP Z400 workstation
# FreeBSD fails to detect this computers' ACPI S3 suspend/resume capability,
# so zzz not tested

# Card PCI-E            driver      Comment
# Nvidia GF 9500 GT:    nvidia-340  Works fine (DVI)
# Radeon HD 7350        radeonkms   Works fine (DVI)

# Card PCI              driver      Comment
# SiS 86C6326           sis         Works fine [*]
# S3 Trio 64V+          s3          Works fine (using EXA) [*]
# ATI Mach 64           mach64      Works fine [**]

# Tested: Jan 24 2022 (using FBSD 13-RELEASE-p6) on 1600x1200 Dell FP XXX LCD
# on HP Z800 workstation
# On this machine, FreeBSD succeeds detecting this computers' ACPI S3 
# suspend/resume capability, so zzz is tested here

# Card PCI-E            driver      Comment
# Nvidia Quadro 2000:   nvidia-390  Works fine (DVI)
# Radeon HD 7350:       radeonkms   Works fine (DVI)

# Card PCI              driver      Comment
# ATI Mach 64           mach64      Works fine [**]
# SiS 6364              sis         Works fine [*] from X, but after resume 
#                                   text mode console no longer works, eg
#                                   frequency out of range - maybe needs video
#                                   BIOS reset after resume
# Nvidia Quadro NVS280  nv          Fail - no state save/restore - maybe needs
#                                   VGA BIOS reset hack
# S3 Trio 64V+          s3          Works fine (using EXA) [*]


# Notes regarding VGA BIOS reset / UEFI VGA BIOS init hack:
# see 
# /usr/src/sys/dev/fb/vesa.c : static int vesa_bios_post(void)
# /usr/src/sys/compat/x86bios/x86bios.c : void x86bios_call(struct x86regs *regs, uint16_t seg, uint16_t off)
# https://github.com/freebsd/freebsd-src/blob/main/sys/compat/x86bios/x86bios.c#L177
#
# this apparently has to be inserted into
# /usr/src/sys/kern/kern_cons.c : void cnresume()
# https://github.com/freebsd/freebsd-src/blob/main/sys/kern/kern_cons.c#L401
#
# which gets called from
# /usr/src/sys/amd64/acpica/acpi_wakeup.c
# int acpi_sleep_machdep(struct acpi_softc *sc, int state)
# https://github.com/freebsd/freebsd-src/blob/main/sys/amd64/acpica/acpi_wakeup.c#L257
# see also: 
# int acpi_wakeup_machdep(struct acpi_softc *sc, int state, int sleep_result,
#     int intr_enabled)




# These cards show in the Xorg.0.log for the higher resolutions
# a message "frequency out of range":
# [*]  resolution 720x400 
# [**] resolution 864x486
# the Xorg.0.log says for the LCD display that the higher resolutions 
# are out of the monitors' H/V frequency range.
# Not sure yet what's the cause. This needs to be investigated...


# TODO
# -r option : only rollback 1x instead of 2x ---done TODO test
# -u install on unsupported FBSD version
# add check that there is no more rollback after bootiefini
# -p purge snapshots
# -c, --configx: clean up all possible previous rc.conf and loader.conf settings for other cards before setting new ones.
# - apache install/remove TODO


# using boot environments as replacement for the snapshots that
# were used in the early development process:
# a) find out whether the system is booted in/running a BE of
#    the intermediate SkunkOS installation stages
# b) if BEs of later installation stages are found to be present, ...
# c) ..., offer deletion of the later BEs before continuing (re?-)installation


# TODO :
# thanks Jason for reminding me to maybe also allow floppies to user
##########################################################################
#   Configure the system so that CD and DVD drives are usable by
#   anyone in the operator group.
##########################################################################

# external_drive_config()
# {
#     # CD Burning, per pkg-message
#     #[system=10]
#     #add path 'cd*' mode 0666
#     #add path 'pass*' mode 0666
#     #add path 'xpt*' mode 0666
#     auto-update-devfs-rules operator cd da pass xpt
#     auto-update-devfs-conf cd0 cd1 fd0 fd1
#     
#     if ! fgrep -q '#/dev/cd' $FSTAB; then
# 	sed -i pre-desktop-installer 's|/dev/cd|#/dev/cd|g' $FSTAB
#     fi
#     # Required for some removable drive mounting mechanisms
#     auto-set-sysctl vfs.usermount 1 desktop-installer
# }





use strict;
use warnings;
use utf8;
use open ':encoding(utf8)';
binmode(STDOUT, ":utf8");
use feature 'unicode_strings';
use Getopt::Long;
use Data::Dumper;

if ($> != 0) {
    die "This program must be run as root!\n";
}

# flag for code to avoid kernel panic bug 
# https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=261749
# set to 0 to deactivate bug evasion code
# this is done at the beginning of main section, if no 
# radeonkms was found in kldstat
my $PR261749 = 1;
# bug evasion code sets this to 1 if user must reboot to avoid kernel crash
my $PR261749reboot = 0;

####################    options
# build/install without apache
my $enable_skipapachebuild = 1;
my $enable_xscreensaver = 0;

my $option_configbrowser = 'midori';

#*********** these options are intended for live systems
my $do_install = 1; # set to 0 on live system (with preinstalled stuff)
my $do_live = 1;    # set to 0 if you reboot instead of starting Xorg
                    # directly from this installer

### TODO  make a dialog option to build apache even if there are unresolved vulnerabilities
# my $apachevulnignore = ' -DDISABLE_VULNERABILITIES=yes';
my $apachevulnignore = ' -DDISABLE_VULNERABILITIES';

####################    options for kernel building
my $console_history_size = '5000';


####################    constants
my $myname = 'bootie';
my $myversion = '0.0.2';
my $executerlogfile = "/var/log/$myname.log";
my $tmpfile = "/tmp/$myname.tmp";
my $tmpfile2 = "/tmp/$myname.tmp2";
# the file for adduser where the user data is stored for passing
my $adduserfn = '/tmp/adduser.tmp';


####################    constants for
####################    xorg, DE/WM, application installations
####################    this is going to be removed when the web 
####################    based installer works, where this stuff belongs to

    my @kbdlangseq = (
    'us'        ,
    'usintl'    ,
    'es'        ,
    'pt'        ,
    'ru'        ,
    'jp'        ,
    'de'        ,
    'kr'        ,
    'uk'        ,
    'fr'        ,
    'it'        ,
    );
    
    my %kbdlangs = (
    'us'        => 'US',
    'usintl'    => 'US International',
    'es'        => 'Spanish',
    'pt'        => 'Portuguese',
    'ru'        => 'Russian',
    'jp'        => 'Japanese',
    'de'        => 'German',
    'kr'        => 'Korea',
    'uk'        => 'British',
    'fr'        => 'French',
    'it'        => 'Italian',
    );
    
    my %xkbmaps = (
    'us'        => '-model pc104 -layout us -option ""',
    'usintl'    => '-model pc104 -layout us -variant alt-intl -option ""',
    'es'        => '-model pc104 -layout es -option ""',
    'pt'        => '-model pc104 -layout pt -option ""',
    'ru'        => '-model pc104 -layout ru -option ""',
    'jp'        => '-model pc104 -layout jp -option ""',
    'de'        => '-model pc104 -layout de -option ""',
    'kr'        => '-model pc104 -layout kr -option ""',
    'uk'        => '-model pc104 -layout uk -option ""',
    'fr'        => '-model pc104 -layout fr -option ""',
    'it'        => '-model pc104 -layout it -option ""',
    );


my @dewmseq = (
    'FVWM',
    'KDE',
#     'Gnome',
    'Mate',
#     'XFCE',
);

my %dewmlist = (
    'FVWM'      => 'No-bloat, no-distraction power for power users',
    'KDE'       => 'Windows clone - heavyweight but has great apps',
#     'Gnome'     => 'The Gnome - for those who like it, it is the best',
    'Mate'      => 'Derived from old Gnome, faster than current Gnome',
#     'XFCE'      => 'Another Windows clone, leaner than KDE',
);

my %dewmlistenable = (
    'FVWM'      => 'on',
    'KDE'       => 'on',
#     'Gnome'     => 'off',
    'Mate'      => 'off',
#     'XFCE'      => 'off',
);


my @appseq = (
    'firefox_esr',
    'chromium'   ,
    'midori'     ,
    'pidgin'     ,
    'telegram'   ,
    'thunderbird',
    'libreoffice',
    'gimp'       ,
    'krita'      ,
    'inkscape'   ,
    'freeplane'  ,
    'k3b'        ,
    'vlc'        ,
    'ssr'        ,
    'kdenlive'   ,
    'openshot'   ,
    'shotcut'    ,
    'virtualbox' ,
    'gammy'      ,
);

my %applist = (
    'firefox_esr'        => 'Mozilla Firefox web browser',
    'chromium'           => 'Google Chromium web browser',
    'midori'             => 'Midori lightweight web browser',
    'pidgin'             => 'Pidgin multi-protocol messenger',
    'telegram'           => 'Telegram Desktop messaging app',
    'thunderbird'        => 'Mozilla Thunderbird mail and news',
    'libreoffice'        => 'Libreoffice suite',
    'gimp'               => 'The Gimp raster graphics editor',
    'krita'              => 'Sketching and painting program',
    'inkscape'           => 'Inkscape vector graphics editor',
    'freeplane'          => 'Mind mapping and knowledge management',
    'k3b'                => 'K3B CD/DVD writing suite',
    'vlc'                => 'VideoLan multimedia player/streamer',
    'ssr'                => 'Simple Screen recorder',
    'kdenlive'           => 'Kdenlive video editing suite',
    'openshot'           => 'OpenShot Video Editor',
    'shotcut'            => 'Shotcut video editor',
    'virtualbox'         => 'Virtualbox',
    'gammy'              => 'Adaptive screen brightness and temperature',
);



####################    list of people who contributed with suggestions, tips etc
# not complete
# Note: the URL references are not complete, just one per person
my $contributors = {
    'freebsd_noob' => 'https://forums.freebsd.org/threads/information-collection-thread-graphics-drivers-xorg-conf-etc.79011/post-495510',
    'hruodr' => 'https://forums.freebsd.org/threads/information-collection-thread-graphics-drivers-xorg-conf-etc.79011/post-495520',
    'SirDice' => 'https://forums.freebsd.org/threads/information-collection-thread-graphics-drivers-xorg-conf-etc.79011/post-495525',
    'Zirias' => 'https://forums.freebsd.org/threads/information-collection-thread-graphics-drivers-xorg-conf-etc.79011/post-495540',
    'shkhln' => 'https://forums.freebsd.org/threads/information-collection-thread-graphics-drivers-xorg-conf-etc.79011/post-495542',
    'Beastie7' => 'https://forums.freebsd.org/threads/information-collection-thread-graphics-drivers-xorg-conf-etc.79011/post-495546',
    'SlySven' => 'https://forums.freebsd.org/threads/information-collection-thread-graphics-drivers-xorg-conf-etc.79011/post-495628',
    'JAW' => 'https://forums.freebsd.org/threads/information-collection-thread-graphics-drivers-xorg-conf-etc.79011/post-495641',
    'mickey' => 'https://forums.freebsd.org/threads/information-collection-thread-graphics-drivers-xorg-conf-etc.79011/post-495653',
    'richardtoohey2' => 'https://forums.freebsd.org/threads/information-collection-thread-graphics-drivers-xorg-conf-etc.79011/post-495656',
    'Mjölnir' => 'https://forums.freebsd.org/threads/information-collection-thread-graphics-drivers-xorg-conf-etc.79011/post-495732',
    'tyson' => 'https://forums.freebsd.org/threads/information-collection-thread-graphics-drivers-xorg-conf-etc.79011/post-495810',
    'Trihexagonal' => 'https://forums.freebsd.org/threads/information-collection-thread-graphics-drivers-xorg-conf-etc.79011/post-495839',
    'fraxamo' => 'https://forums.freebsd.org/threads/information-collection-thread-graphics-drivers-xorg-conf-etc.79011/post-495893',
    'Minbari' => 'https://forums.freebsd.org/threads/vdpau-and-va-api-wrapper-drivers.79049/post-495944',
    'Raffeale' => 'https://forums.freebsd.org/threads/vdpau-and-va-api-wrapper-drivers.79049/post-496627',
    'ShelLuser' => 'https://forums.freebsd.org/threads/does-there-exist-an-equivalent-to-sysctl-for-handling-boot-loader-conf-changes.79083/post-496403',
    'reddy' => 'https://forums.freebsd.org/threads/does-there-exist-an-equivalent-to-sysctl-for-handling-boot-loader-conf-changes.79083/post-496410',
    'broozar' => 'https://forums.freebsd.org/threads/amdgpu-polaris-freebsd13-rc1-module-not-found.79264/post-498806',
    'Alexander88207' => 'https://forums.freebsd.org/threads/amdgpu-polaris-freebsd13-rc1-module-not-found.79264/post-498810',
    'jardows' => 'https://forums.freebsd.org/threads/amdgpu-polaris-freebsd13-rc1-module-not-found.79264/post-498794',
    'obsigna' => 'https://forums.freebsd.org/threads/update-to-virtualbox-ose-additions-6-1-18-killed-xorg.79451/post-501647',
    'Warner Losh' => 'https://lists.freebsd.org/archives/freebsd-hackers/2022-January/000732.html',
    'Jason Bacon' => 'http://acadix.biz/desktop-installer.php',
};

####################    constants

# filenames constants:
# not only to avoid typos, but also for example, to make changes 
# between /etc and /usr/local/etc easy
my $d_etc = '/etc';
my $d_etc_X11 = '/usr/local/etc/X11';
my $d_fontsdir = '/usr/local/share/fonts';

my $f_boot_loader_conf = '/boot/loader.conf';
my $f_rc_conf = "$d_etc/rc.conf";
my $f_devfs_rules = "$d_etc/devfs.rules";
my $f_devfs_conf = "$d_etc/devfs.conf";
my $f_sysctl_conf = "$d_etc/sysctl.conf";
my $f_fstab = "$d_etc/fstab";
my $f_dmesgboot = "/var/run/dmesg.boot";

# TODO tune this for optimized build performance
# speed up compiling:
# set this to a reasonable value, not too high but 
# not too low either, to avoid thrashing when compiling
# see FreeBSD handbook 24.5.4.2.
# https://www.freebsd.org/doc/handbook/makeworld.html
# TODO experiment a bit to find out optimum
# right now first try: half a GB per thread
# or better build a less simple funtion :)
my $mymemorypercompilethread = 500000000;
my $myresidualmem = 1000000000;

my $bootie_backtitleheader = "SkunkOS: Bootstrapper v$myversion";

# configure this as you like
my $timeout = 3600;  # make sure long builds dont get stopped
# # note: cgipath must be without leading / due to suexec rules!
my $webroot = '/';
my $cgipath = 'cgi-bin';
my $cginame = 'helloworld';

# suexec compile options - must match settings
# see http://httpd.apache.org/docs/current/suexec.html
my $suexec_docroot = '/';
my $suexec_userdir = '/';
my $suexec_uidmin = '0';
my $suexec_gidmin = '0';
my $suexec_logfile = '/var/log/httpd-suexec.log';
# my $suexec_logfile = '/var/log/httpd/httpd-suexec.log';

# path stuff
my $apap = "/usr/ports/www/apache24";
my $srcp = "$apap/work";
my $httpdconfp = "/usr/local/etc/apache24/httpd.conf";
my $httpdconforigp = "$httpdconfp.orig";

my $skunkos_kernconf = 
qq%#
# SKUNKOS
# Generic kernel configuration file for FreeBSD/amd64
# SkunkOS edition
include GENERIC
ident SKUNKOS

# Remove botched VESA garbage
nooptions       VESA
# nodevice		vt
# nodevice		vt_vga
# nodevice		vt_efifb

# we need no splash screen, but screen saver
device		splash			# Splash screen and screen saver support

# syscons is the default console driver, resembling an SCO console
device		sc
nooptions 	SC_PIXEL_MODE		# add support for the raster text mode
options 	SC_HISTORY_SIZE=$console_history_size
options 	SC_NORM_ATTR=(FG_BLACK|BG_GREEN)
options 	SC_NORM_REV_ATTR=(FG_BLACK|BG_CYAN)
options 	SC_KERNEL_CONS_ATTR=(FG_BLACK|BG_RED)
options 	SC_KERNEL_CONS_REV_ATTR=(FG_BLACK|BG_BROWN)

# Regarding PR 261311
# ( https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=261311 )
# According to `man 4 vt`, section 'BACKWARDS COMPATIBILITY',
# the above console color settings should work for vt also.
# Looking at terminal.h
# ( https://github.com/freebsd/freebsd-src/blob/main/sys/sys/terminal.h#L127 )
# it looks like that this "backwards compatibility" still is there.
# So these following two settings are just there to make sure that 
# there is something wrong with vt.
options 	TERMINAL_NORM_ATTR=(FG_BLACK|BG_GREEN)
options 	TERMINAL_KERN_ATTR=(FG_BLACK|BG_RED)
%;

####################    cmdline opts
my $opt_ignoreversion;
my $opt_install;
my $opt_installxorg;
my $opt_configx;
my $opt_apache;

####################    help message
# TODO update
my $bootiehelp = 
qq|Usage: $myname [option(s)]

Options:
help, --help, -h
            Shows this help.
--version
            Prints the version info.
-i, --install
            Does the normal installation.
-x, --installxorg
            If the SkunkOS base system is already installed without
            X Window, you can use this option to later additionally
            install X Window.
-c, --configx
            (re)configures X Window configuration, e.g. autodetect and 
            autoconfigure graphics cards.
            If you only installed the base system part, ending
            installation instead of proceeding with xorg installation,
            it will also install xorg.
            This is the last step of the normal installation that you 
            enter when running the installer without parameters.
            So running this option is necessary only when, for example,
            you have changed the graphics hardware, either swapping
            or adding graphics cards.
            Caution: File changes:
            $d_etc_X11/xorg.conf and...
            ~/.xinitrc      will be overwritten. Existing files will be 
                            copied to same-named files
                            with .old extension.
            /boot/loader.conf and...
            /etc/rc.conf    will be changed to the new configuration.
                            Backups will be placed in same-named files
                            with .old extension.
            Recommended:
            - Update the system before, to make sure all versions match.
            - It never does damage creating a backup boot environment 
              in the (albeit unlikely) case that something goes wrong.
-d, --ignoreversion
            don't care for/ignore OS version (for running $myname on a 
            FreeBSD version it that has not yet been tested and verified
            to work with). No guarantees this will work.
            Feedback about success/failure is highly appreciated, so 
            support for other OS versions can be added/improved.
            
Do *not* use the following options unless you are a developer 
and know what you do:
-a          Only intended for development: Enable installing with apache server 
            running as root (suexec). Do not do this unless you need this.

EXAMPLES:
$myname -configx
            Use this if the graphics installation needs 
            to be repeated/redone.
            This might be necessary in some cases, in particular
            if you...
            - have installed a different graphics card
            - have installed an additional graphics card
            - want/need to switch to other drivers, for example
                between open-source and proprietary closed-source
|;

####################    variables
my $myhostname = `hostname`;
chomp $myhostname;
my $zzz_supported;
my $isvbox;
my $dmesgboot;
my $runningconsole;
my $myip = '';
my $httpd_conf;     # contains text of generated httpd.conf
my $user1001;
my $user1001home;
my $dt;             # gets set to = getdirdatetag();

# command queues
my $cmd = '';
my $execbatch_install = '';
my $execbatch_live = '';
my $execbatch_xorg_poststart = '';


my $msg_donotuse;   # sub vgaconfigure message in case of fatal
my $log = '';       # log text

# see sub catchkmssurprise
my $kmssurprise;
    
### variables to hold configuration files to be written
### at final executer run
my $devfs_rules = '';
my $xorgconf = '';
my $xinitrcsoft;
my $xinitrchard;
my $sysctlconf = '';
my $bootloaderconf = '';
my $mycgi;     # text of helloworld cgi


####################    internal constants - do not change

# placeholder names for executer batch
# for internal dispatch instead of external programs calling
my $backupandpatchsuexec = '_back_up_and_patch_suexec_c_';
my $hackmakeconf = '_hackmakeconf_';
my $writehttpdconf = '_write_httpd_conf_';
my $writehelloworld = '_write_the_helloworld_cgi_';
my $writexorgconf = '_writexorgconf_';
my $writexinitrcsoft = '_writexinitrcsoft_';
my $writexinitrchard = '_writexinitrchard_';
my $writeskunkoskernconf = '_writeskunkoskernconf_';
my $installprocfs = '_installprocfs_';
my $sysmod = '_sysmod_';
my $modini = '_modini_';
my $pkginst = 'env ASSUME_ALWAYS_YES=YES pkg install';

# section markers for .xinitrc
my $xinitrc_hard_start = "#### hardware related section start\n";
my $xinitrc_hard_end   = "#### hardware related section end\n";
my $xinitrc_soft_start = "#### software related section start\n";
my $xinitrc_soft_end   = "#### software related section end\n";

####################    list of BEs made by $myname

my $FreeBSDBaseInstall = 'FreeBSDBaseInstall';
my $FreeBSDBaseInstallUpdated = 'FreeBSDBaseInstallUpdated';
my $SkunkOSBaseInstall = 'SkunkOSBaseInstall';
my $SkunkOSXInstall = 'SkunkOSXInstall';

my $FREEBSDBASEINSTALL = 1;
my $FREEBSDBASEINSTALLUPDATED = 2;
my $SKUNKOSBASEINSTALL = 3;
my $SKUNKOSXINSTALL = 4;

my @installbes = (
'default',
$FreeBSDBaseInstall,
$FreeBSDBaseInstallUpdated,
$SkunkOSBaseInstall,
$SkunkOSXInstall,
);

####################    list of FreeBSD versions tested for use by $myname

# used in supportedversioncheck()
my $fbsdvers_supported = {
    '12' => 'supported',            # tested with 12.2 only
    '13' => 'supported',
#     '14' => 'experimental',         # not tested yet
};

####################    internal constants
####################    to be set at runtime for the running system
my $islaptop;
{
    my $tmps = qx|devinfo|;
    # acpi_acad0 is the battery handler
    # only laptops have this
    my $islaptop = $tmps =~ m/acpi_acad0/;
}
my $xs = `sysctl hw.physmem`;
(my $mymemory) = $xs =~ /hw\.physmem:\s(\d+)/;
$xs = `sysctl hw.ncpu`;
(my $mycpus) = $xs =~ /hw\.ncpu:\s(\d+)/;
my $usablemem = $mymemory - $myresidualmem;
# sprintf used to round fp to int
my $maxthreadsinmem = sprintf "%.0f", $usablemem / $mymemorypercompilethread;
my $maxthreadslimit = $mycpus * 3;
my $threadstocompilewith =
    ($maxthreadslimit > $maxthreadsinmem)
        ? $maxthreadsinmem 
        : $maxthreadslimit;
        
my $fbsd_kernelinstalled;
my $fbsd_kernelrunning;
my $fbsd_userlandinstalled;

my $fbsd_major;
my $fbsd_minor;
my $fbsd_release;
my $fbsd_patchlevel;

# for snapshots management
my $unamem = qx|uname -m|;
chop $unamem;
my $system_arch = $unamem;
my $system_bootmethod = qx|sysctl machdep.bootmethod|;
my $system_isuefi = $system_bootmethod =~ m/UEFI/;

# vars for graphics card autodetection/autoconfig
my $bootvga;
my $pciconf;
my $vga;
my @vgas; 


####################    lookup constants
# some system info hash keys for video tables
# to indicate xorg driver doing ddc via VESA bios
my $key_vesaddc = 'vesaddc';
# some cards have too little memory for 24/32bit or no truecolor dac
my $key_bpp = 'bpp';
# some cards default, for example, to (no longer existing) accel 
# method xaa, these must be set to exa or the like
my $key_accel = 'accel';
# some cards/drivers need vesa.ko for restoring state after S3 resume
my $key_vesako = 'vesako';
    

############################################################    
####################    utility functions
############################################################

sub isnumin {
  my $aref = shift;
  my $num = shift;
  my $isin = 0;
  foreach (@$aref) {
    next if ($_ == $num);
    $isin = 1;
  }
  return $isin;
}

sub isvalinarray
{
    my $arref = shift;
    my $val = shift;

    foreach( @$$arref) {
        return 1 if ($_ eq $val);
    }
    return 0;
}

sub getdirdatetag
{
	my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
	my $now = sprintf("%04d-%02d-%02d-%02d:%02d:%02d", $year+1900, $mon+1, $mday, $hour, $min, $sec);
	return $now;
}

$dt = getdirdatetag();

# string read_a_file( string filename)
# returns a reference to the text
sub read_a_file
{
  my $fn = shift;
  local $/ = undef;
  open FILE, $fn or return undef;
  my $text = <FILE>;
  close FILE or return undef;
  return \$text;
}

# int xwrite_a_file( string filename, stringref text, mode {write|append})
sub xwrite_a_file
{
  my $fn = shift;
  my $tx = shift;
  my $m = shift;
  my $mode;
  if ($m eq 'write') {
    $mode = '>';
  } elsif ($m eq 'append') {
    $mode = '>>';
  } else {
    die "'$m'";
  }
  open my $file, $mode, $fn or return -1;
  print $file $$tx or return -2;
  close $file or return -3;
  return 0;
}

# int append_a_file( string filename, stringref text)
sub append_a_file
{
  my $fn = shift;
  my $tx = shift;
  return xwrite_a_file( $fn, $tx, 'append');
}

# int write_a_file( string filename, stringref text)
sub write_a_file
{
  my $fn = shift;
  my $tx = shift;
  return xwrite_a_file( $fn, $tx, 'write');
}

############################################################    
####################    other utility functions 
############################################################

sub getrunningconsole
{
    my $dmesgboot = read_a_file('/var/run/dmesg.boot');
    die if (not defined $dmesgboot);
    my $cons;
    if ($$dmesgboot =~ /vtvga0/s) {
        $cons = 'vt';
    } elsif ($$dmesgboot =~ /sc0\:\s\<System console\>/s) {
        $cons = 'sc';
    } else {
        die "Could not find which console is running!";
    }
    return $cons;
}


sub logconsole
{
    my $t = shift;
    
    print $t;
    append_a_file( $executerlogfile, \$t );
}

############################################################    
####################    utility functions for "internal commands"
############################################################
        
sub do_backupandpatchsuexec
{
    logconsole( 'do_backupandpatchsuexec: ');
    # patch suexec.c
    # get the suexec path
    # as the version number is part of the path, we have to look a bit
    my $lss = "ls -d $srcp/httpd-*";
    my $pn = `$lss`;
    chomp $pn;
    my $suexecpath = $pn . '/support/suexec.c';
    # backup the suexec src
    my $suexecpathorig = "$suexecpath.orig";
    my $src = read_a_file( $suexecpath);
    if (not -e $suexecpathorig) {
        die "do_backupandpatchsuexec: Cannot backup" if (write_a_file( $suexecpathorig, $src));
    }
    # now hack the suexec src
    # we need to disable two security checks to allow cgi run as root    
    #     (uid == 0) || (uid < AP_UID_MIN)
    #     (gid == 0) || (gid < AP_GID_MIN)
    $$src =~ s/(\(\wid\s\=\=\s0\)\s\|\|\s\(\wid\s\<\sAP_\wID_MIN\))/\/\* $1 \*\/ 0/g;
    die "do_backupandpatchsuexec: Write error" if (write_a_file( $suexecpath, $src));
    logconsole( "Success\n");
}

sub do_writehttpdconf
{
    logconsole( 'do_writehttpdconf: ');
    if (write_a_file( $httpdconfp, \$httpd_conf)) {
        die "do_writehttpdconf: Write error" ;
    }
    logconsole( "Success\n");
}
    
sub do_writehelloworld
{
    logconsole( 'do_writehelloworld: ');
    if (write_a_file( "$webroot$cgipath/$cginame.pl", \$mycgi)) {
        die "do_writehelloworld: Write error";
    }
    # TODO make perms more restrictive
    if (chmod( 0755, "$webroot$cgipath/$cginame.pl") != 1) {
        die "do_writehelloworld: chmod error";
    }
    logconsole( "Success\n");
}
    
# TODO unhack make.conf after build apache
sub do_hackmakeconf
{
    logconsole( 'do_hackmakeconf: ');
    # hack make.conf
    my $f = '/etc/make.conf';
#     my $s = read_a_file( $f);
#     write_a_file( "$f.bak", \$s);
    my $s .= "\nOPTIONS_SET+=SUEXEC\n" .
            "SUEXEC_DOCROOT=$suexec_docroot\n" .
            "SUEXEC_USERDIR=$suexec_userdir\n" .
            "SUEXEC_UIDMIN=$suexec_uidmin\n" .
            "SUEXEC_GIDMIN=$suexec_gidmin\n" .
            "SUEXEC_LOGFILE=$suexec_logfile\n";
    die if (write_a_file( $f, \$s));
    logconsole( "Success\n");
}

############################################################    
####################    functions for "internal batch executer"
############################################################
        
sub callsystem
{
    my $sy = shift;
    
    logconsole( "callsystem('$sy')\n");
    my $syr = system( $sy);
    if ($syr == -1) {
        # error
        my $syserrno;
        my $syserrstr;
        if ($syserrno = $!) {
            $syserrstr = "$!";
            logconsole( "callsystem: failed with error number $syserrno ($syserrstr)\n");
            die;
        }
        my $sysstatus = $?;
        if ($sysstatus & 127) {
            my $m .= "callsystem: died with signal " . ($sysstatus & 127);
            if ($sysstatus & 128) {
                $m .= ' and dumped core';
            }
            logconsole( " $m\n");
            die;
        }
    }
    my $retc = $syr >> 8;
    logconsole( 'callsystem: returned \'' . $retc . "'. Success\n");
    return $retc;
}
    
############################################################    
####################    internal batch executer "commands"
############################################################
        
sub do_writexorgconf
{
    logconsole( "do_writexorgconf: ");
    if (-e "$d_etc_X11/xorg.conf") {
        print "File '$d_etc_X11/xorg.conf' already exists...\n" . "This shouldn't be... what went wrong?\n";
        die;
    }
    die if (write_a_file( "$d_etc_X11/xorg.conf", \$xorgconf));
    logconsole( " Success\n");
}

sub do_writexinitrchard
{
    my $xrc;
    logconsole( "do_writexinitrchard: ");
    if (-e "$user1001home/.xinitrc") {
        logconsole( "Notice: File '$user1001home/.xinitrc' already exists, merging.\n");
        $xrc = read_a_file( "$user1001home/.xinitrc");
        # remove old hardware section if any
        $$xrc =~ s/$xinitrc_hard_start.*?$xinitrc_hard_end//s;
    } else {
        my $emptys = '';
        $xrc = \$emptys;
    }
    $$xrc = $xinitrchard . $$xrc;
    die if (write_a_file( "$user1001home/.xinitrc", $xrc));
    # chown and chmod it
    die if callsystem("chown $user1001:$user1001 $user1001home/.xinitrc");
    logconsole( " Success\n");
}

sub do_writexinitrcsoft
{
    my $xrc;
    logconsole( "do_writexinitrcsoft: ");
    if (-e "$user1001home/.xinitrc") {
        logconsole( "Notice: File '$user1001home/.xinitrc' already exists, merging.\n");
        $xrc = read_a_file( "$user1001home/.xinitrc");
        # remove old hardware section if any
        $$xrc =~ s/$xinitrc_soft_start.*?$xinitrc_soft_end//s;
    } else {
        my $emptys = '';
        $xrc = \$emptys;
    }
    $$xrc .= $xinitrcsoft;
    die if (write_a_file( "$user1001home/.xinitrc", $xrc));
    # chown and chmod it
    die if callsystem("chown $user1001:$user1001 $user1001home/.xinitrc");
    logconsole( " Success\n");
}

sub do_writeskunkoskernconf
{
    logconsole( "do_writeskunkoskernconf: ");
    my $fn = "/usr/src/sys/$system_arch/conf/SKUNKOS";
    if (-e $fn) {
        logconsole( "Notice: File '$fn' already exists. Will be overwritten\n");
    }
    die if (write_a_file( $fn, \$skunkos_kernconf));
    logconsole( " Success\n");
}

# partly 'stolen' from Jasons procfs_config() - thanks Jason :D
sub do_installprocfs
{
    my $fstab = read_a_file( $f_fstab);
    die if (not defined $fstab);
    if (not ($fstab =~ /^proc\s+\/proc\s+procfs/ms)) {
        my $crap = "\nproc\t\t\t/proc\t\tprocfs\trw\t\t0\t0\n";
        die if append_a_file( $f_fstab, \$crap);
    }
    my $mnt = `mount`;
    if (not ($mnt =~ /^procfs on \/proc/ms)) {
        my $pcmd = "mount proc\n";
        executer( $pcmd);
    }
}

sub escapeme
{
    my $str = shift;
    $str =~ s/\\/\\\\/;
    $str =~ s/\|/\\\|/;
    $str =~ s/\[/\\\[/;
    $str =~ s/\]/\\\]/;
    $str =~ s/\{/\\\{/;
    $str =~ s/\}/\\\}/;
    $str =~ s/\(/\\\(/;
    $str =~ s/\)/\\\)/;
    $str =~ s/\</\\\</;
    $str =~ s/\>/\\\>/;
    $str =~ s/\*/\\\*/;
    $str =~ s/\./\\\./;
    $str =~ s/\?/\\\?/;
    $str =~ s/\+/\\\+/;
    $str =~ s/\^/\\\^/;
    $str =~ s/\$/\\\$/;
    return $str;
}

# modini (filename, argstr)
# argstr: '[section]line'
sub modini
{
    my $filename = shift;
    my $expr = shift;
    my $changed;

    # remove surrounding apostrophes if present
    foreach ( '\'', '"') {
        if ($expr =~ /^$_.*$_$/) {
            substr( $expr, length($expr) - 1, 1, "");
            substr( $expr, 0, 1, "");
        }
    }

    (my $section, my $line) = $expr =~ /^(\[[^\]]*?\])(.*)$/;
    if (not defined $section or not defined $line) {
        my $diemsg = "fail: expr: '" . $expr . "' \n";
        die $diemsg;
    }
    my $section_esc = escapeme( $section);
    
    my $file = read_a_file( $filename);
    if (not defined $file) {
        # file does not exist yet
        my $ph = '';
        $file = \$ph;
    }
    
    # does the section already exist?
    if ($$file =~ /.*\n?$section_esc/s) {
        # section already exists
        my $prematc;
        my $sec;
        my $postmatc;
                    
        ($prematc, $sec, $postmatc) = $$file =~ /^(.*?)
        $section_esc(.*?)
        (\[[^\]]*?\].*|\s*\n*\s*|)$/sx;
        
        my $line_esc = escapeme( $line);
        if ($sec =~ /^\s*$line_esc\s*$/ms) {
            $changed = 0;
        } else {
            my $ins = '';
            if (not $sec =~ /\n$/) {
                $ins = "\n";
            }
            $ins .= $line . "\n";
            $$file = $prematc . $section . $sec . $ins . $postmatc;
            $changed = 1;
        }
    } else {
        # section does not yet exist
        my $ins = '';
        if ((length $$file) and not $$file =~ /\n$/) {
            $ins = "\n";
        }
        $ins .= $section . "\n" . $line;
        $$file .= $ins;
        $changed = 1;
    }
    if ($changed) {
        die if (write_a_file( $filename, $file));
        logconsole( "modini: written changed file '$filename' with settings '$expr'\n");
    } else {
        logconsole( "modini: not written file '$filename' because nothing changed by settings '$expr'\n");
    }
}

# sub sysmod - replacement for useless sysrc
# see TODO PR link
sub sysmod
{
    my $filename = shift;
    my $expr = shift;
    my $oper = 'replace';
    my $parenchar = shift;
    my $sep = ' ';
    my $file;
    
    # remove surrounding apostrophes if present
    foreach ( '\'', '"') {
        if ($expr =~ /^$_.*$_$/) {
            substr( $expr, length($expr) - 1, 1, "");
            substr( $expr, 0, 1, "");
        }
    }
    
    $file = read_a_file( $filename);
    if (not defined $file) {
        # file does not exist yet
        my $ph = '';
        $file = \$ph;
    }
    (my $left, my $right) = $expr =~ /^(.*)=(.*)$/;
    die if (not defined $left or not defined $right);
    if ($left =~ /\+$/) {
        $oper = 'add';
        chop $left;
    } elsif ($left =~ /\-$/) {
        $oper = 'remove';
        chop $left;
    }
    
    if (($right =~ /^".*"$/) or ($right =~ /^'.*'$/)) {
        # $right is in parens
        substr( $right, length($right) - 1, 1, "");
        substr( $right, 0, 1, "");
    }
    
    if ($oper eq 'add' or $oper eq 'remove') {
        # if delimiter present, remove it
        if (length($right)) {
            if (not ($right =~ /^[a-zA-Z1-90]/)) {
                $sep = substr( $right, 0, 1);
                substr( $right, 0, 1, "");
            }
        }
    }
    
    my $lv;
    my $rv;
    my $prematch;
    my $postmatch;
    my $changed = 0;
    my $left_esc = escapeme($left);
    my $right_esc = escapeme($right);
    
    # check whether value is already present
    if ($$file =~ /(?:\n|^)\s*$left_esc(?:[^\n]*)(?:\n|$)/s) {
        ($prematch, $lv, $rv, $postmatch) = $$file =~ /^(.*(?:\n*))((?:\s*$left_esc\s*))=([^\n]*)(.*)$/s;
    }
    if ($parenchar ne '' and defined $rv and $rv =~ /^$parenchar.*$parenchar$/) {
        # remove parens from $rv
        substr( $rv, length($rv) - 1, 1, "");
        substr( $rv, 0, 1, "");
    }
    
    if ($oper eq 'remove') {
        my $recompose = 1;
        if (not defined $lv) {
            # lv not present, nothing to do
            # check whether rvalue already contains $right
        } elsif ($rv =~ /^(?:.*$sep\s*|)$right_esc(?:\s*$sep.*|\s+|$)/) {
            $changed = 1;
            # left present, contains right, remove right from rv
            # four cases:
            # 1. rv is only value -> remove both lv and rv
            # 2. rv is last value -> remove rv and previous delim
            # 3. rv is first value -> remove rv and first delim
            # 4. rv is middle value -> remove rv and one delim
            if ($rv =~ /^\s*$right_esc\s*$/) {
                # 1. rv is only value -> remove both lv and rv
                # make sure only one CR remains
                if (length( $postmatch)) {
                    substr( $postmatch, 0, 1, "");
                } elsif ($prematch =~ /\n$/) {
                    chomp $prematch;
                }
                $$file = $prematch . $postmatch;
                $recompose = 0;
            } elsif ($rv =~ /.*$sep\s*$right_esc\s*$/) {
                # 2. rv is last value -> remove rv and previous delim
                (my $snip) = $rv =~ /.*($sep\s*$right_esc\s*).*/;
                $rv =~ s/$snip//;
            } elsif ($rv =~ /^\s*$right_esc\s*$sep/) {
                # 3. rv is first value -> remove rv and first delim
                (my $snip) = $rv =~ /.*($right_esc\s*$sep\s*).*/;
                $rv =~ s/$snip//;
            } elsif ($rv =~ /.*$sep\s*$right_esc\s*$sep\s*.*/) {
                # 4. rv is middle value -> remove rv and one delim
                (my $snip) = $rv =~ /.*($sep\s*$right_esc\s*)$sep\s*.*/;
                $rv =~ s/$snip//;
            } else {
                die;   # should never happen
            }
        } else {
            # left present, does not contain right, nothing to do
        }
        if ($changed and $recompose) {
            $$file = $prematch . $lv . '=' . $parenchar . $rv . $parenchar . $postmatch;
        }
    } elsif ($oper eq 'add') {
        if (not defined $lv) {
            # lv not present, just add left=right
            if (not $$file =~ /\n$/) {
                $$file .= "\n";
            }
            $$file .= $left . '=' . $parenchar . $right . $parenchar . "\n";
            $changed = 1;
            # check whether rvalue already contains $right
        } elsif ($rv =~ /(?:.*$sep\s*|)$right_esc(?:\s*$sep.*|\s*)/) {
            # left present, contains right, nothing to do
            $changed = 0;
        } else {
            # left present, does not contain right, add right
            my $ins = '';
            if ($prematch =~ /^\n/) {
                $ins = "\n";
            }
            $rv =~ s/\n$//s;    # chop newline if present
            $rv =~ s/\s*$//s;   # chop whitespace if present
            $ins .= $left . '=' . $parenchar . $rv . $sep . $right . $parenchar;
            $$file = $prematch . $ins . $postmatch;
            $changed = 1;
        }
    } elsif ($oper eq 'replace') {
        # make sure it is not present yet
        if (not defined $lv) {
            # lv not present, just add
            if (not $$file =~ /\n$/) {
                $$file .= "\n";
            }
            $$file .= $left . '=' . $parenchar . $right . $parenchar . "\n";
            $changed = 1;
        } else {
            # left present, replace if rv and right not equal
            if ($right ne $rv) {
                $$file = $prematch . $left . '=' . $parenchar . $right . $parenchar . $postmatch;
                $changed = 1;
            }
        }
    }
    
    if ($changed) {
        die if (write_a_file( $filename, $file));
        logconsole( "sysmod: written changed file '$filename' with settings '$expr'\n");
    } else {
        logconsole( "sysmod: not written file '$filename' because nothing changed by settings '$expr'\n");
    }
}

sub executer
{
    my $batch = shift;
    my @steps = split( "\n", $batch);
    
    logconsole( "executer start\n");
    foreach (@steps) {
        # check for cd, do these commands ourself
        if (/^cd\s/ or /^chdir\s/) {
            if (/^cd\s([a-zA-Z1-9_\-\/]+)$/ or /^chdir\s([a-zA-Z1-9_\-\/]+)$/) {
                my $newdir = $1;
                if (not chdir( $newdir)) {
                    die "executer: Dir doesn't exist!" 
                }
                next;
            } else {
                die "executer: Bad chdir";
            }
        } elsif (/^$writexorgconf/) {
            do_writexorgconf();
            next;
        } elsif (/^$writeskunkoskernconf/) {
            do_writeskunkoskernconf();
            next;
        } elsif (/^$installprocfs/) {
            do_installprocfs();
            next;
        } elsif (/^$modini/) {
            (my $fil, my $arg) = $_ =~ /^$modini\s+([^\s]*)\s+(.*)\s*$/;
            modini( $fil, $arg);
            next;
        } elsif (/^$sysmod/) {
            (my $fil, my $arg, my $paren) = $_ =~ /^$sysmod\s+([^\s]*)\s+(.*?)\s+(none|single|double)\s*$/;
            my $parch;
            if ($paren eq 'single') {
                $parch = '\'';
            } elsif ($paren eq 'double') {
                $parch = '"';
            } elsif ($paren eq 'none') {
                $parch = '';
            } else {
                die "bad paren\n";
            }
            sysmod( $fil, $arg, $parch);
            next;
        } elsif (/^$writexinitrchard/) {
            do_writexinitrchard();
            next;
        } elsif (/^$writexinitrcsoft/) {
            do_writexinitrcsoft();
            next;
        } elsif (/^$hackmakeconf/) {
            do_hackmakeconf();
            next;
        } elsif (/^$backupandpatchsuexec/) {
            do_backupandpatchsuexec();
            next;
        } elsif (/^$writehttpdconf/) {
            do_writehttpdconf();
            next;
        } elsif (/^$writehelloworld/) {
            do_writehelloworld();
            next;
        }
        
        # check if special "pass on" return codes are defined
        # these are given in the format:
        #   [a b c]command parms
        # makes executer interpret a b c as success return codes
        # for example freebsd-update install returns 1/2 if system is up-to-date!
        my $ex;
        my @goodcodes;
        my $isspecial;
        if (/^\[([01-9 ]+)\](.*)$/) {
            $ex = $2;
            @goodcodes = split( '\s', $1);
            $isspecial = 1;
        } else {
            $ex = $_;
            $isspecial = 0;
        }
        
        my $retval = 0;
        $retval = callsystem($ex);
        if ($isspecial) {
            if ( isnumin( \@goodcodes, $retval)) {
                $log .= "executer: Success! retval $retval: '$_'\n";
                next;
            }
        } else {
            if ($retval == 0) {
                $log .= "executer: Success! retval $retval: '$_'\n";
                next;
            }
        }
        # error out
        logconsole( "executer: Terminated: Got nonzero result from '$_'\n");
        die;
    }
    logconsole( "executer finish\n");
}

############################################################    
####################    interactive dialog forms
############################################################

sub getshellform
{
    my $sy = "dialog --backtitle '$bootie_backtitleheader: User creation stage' --title 'Create your default user' --clear --radiolist 'Please choose user shell:' 12 40 5 'tcsh' 'Tee Shell' on 'csh' 'C Shell' off 'sh' 'Bourne Shell' off   2>$tmpfile";
    my $r;
    do {
        $r = callsystem( $sy);
    } while ($r != 0);

    my $rref = read_a_file( $tmpfile);
    unlink( $tmpfile);
    return $rref;
}

sub getuserdataform
{
    my $user = shift;
    my $fullname = shift;
    my $pw1 = shift;
    my $pw2 = shift;
    my $msg = shift;
    my $sy = "dialog --backtitle '$bootie_backtitleheader: User creation stage' --title 'Create your default user' --clear --form '$msg' 11 70 4 'User name' 1 1 '$user' 1 20 40 40 'Full name' 2 1 '$fullname' 2 20 40 60 'Password' 3 1 '$pw1' 3 20 40 30 'Password (repeat)' 4 1 '$pw2' 4 20 40 30   2>$tmpfile";

    my $r;
    do {
        $r = callsystem( $sy);
    } while ($r != 0);

    my $rref = read_a_file( $tmpfile);
    unlink( $tmpfile);
    return $rref;
}

sub createuser1001
{
    my $duser = '';
    my $dfullname = '';
    my $pw1 = '';
    my $pw2 = '';

    my $userok;
    my $rref;
    my $msg = 'Enter user data.\\nUse the arrow up/down keys to move between fields. Press Enter when you have finished entering the data in all fields.';

    do {
        $rref = getuserdataform( $duser, $dfullname, $pw1, $pw2, $msg);

        # check for illegal chars
        if ($$rref =~ /['"\][}{*%$#@!\\:]/s) {
            $msg = 'Do not use disallowed special chars. These have been removed. Please make sure you enter acceptable data..';
            $$rref =~ s/['"\][}{*%$#@!\\:]//sg;
        } else {
            $msg = '';
        }
        
        ($duser, $dfullname, $pw1, $pw2) = $$rref =~ /^([^\n]*)\n([^\n]*)\n([^\n]*)\n([^\n]*)$/s;

        if (length $msg) {
            $userok = 0;
        } elsif ((length $duser)>0 and (length $dfullname)>0 and (length $pw1)>0 and (length $pw2)>0 and 
                $pw1 eq $pw2) {
            $userok = 1;
            $msg = '';
        } else {
            $userok = 0;
            if ((length $duser)==0) {
                $msg = 'You have not entered a user name. Please complete the form.';
            } elsif ((length $dfullname)==0) {
                $msg = 'You have not entered the users full name. Please complete the form.';
            } elsif ((length $pw1)==0) {
                $msg = 'You have not entered a password. Please complete the form.';
            } elsif ($pw1 ne $pw2) {
                $msg = 'The passwords differ. Please correct the form.';
            }
        }
    } while (not $userok);

    $rref = getshellform( );
    my $myshell = $$rref;

    # 1. adduser fails quietly without signaling error, neither in return 
    #    value, nor by error message, if the line is not terminated with 
    #    a newline. It then does just *nothing*.
    # 2. it creates the desired user number, but fails to create the users 
    #    group, if the latter is given explicitly.
    #    So we for now don't give uid/gid numbers, just assuming they
    #    will be 1001.
#     my $adduser = "$duser:1001:1001:default:::$dfullname\::/bin/$myshell:$pw1";
    
    my $adduser = "$duser\:::default:::$dfullname\::/bin/$myshell:$pw1\n";
    die if write_a_file( $adduserfn, \$adduser);
    if (-e $tmpfile) {
        unlink( $tmpfile);
    }
    if (-e $tmpfile2) {
        unlink( $tmpfile2);
    }
    my $r = callsystem( "adduser -f $adduserfn >$tmpfile 2>$tmpfile2");
    unlink( $adduserfn);
    die "adduser failed\n" if ($r);
    # TODO investigate and smoothen this breakage? 
    # adduser in some circumstances seems to fail quietly (!),
    # with return code 0, so we better check its output too
    my $err = 0;
    if (-e $tmpfile) {
        my $verif = read_a_file( $tmpfile);
        if ($$verif ne "adduser: INFO: Successfully added ($duser) to the user database.\n") {
            ++$err;
            logconsole( "adduser failed: user='$duser' msg='$$verif'\n") if ($err);
        }
        unlink( $tmpfile);
    } else {
        ++$err;
        if (-e $tmpfile2) {
            my $verif = read_a_file( $tmpfile2);
            if (defined ($$verif =~ /^There was an error/)) {
                ++$err;
            };
            unlink( $tmpfile2);
            logconsole( "adduser2 failed: user='$duser' msg='$$verif'\n") if ($err);
        }
        logconsole( "adduser failed: err: $err\n");
    }
    if (-e $tmpfile2) {
        unlink( $tmpfile2);
    }
    die if ($err);
    $user1001 = $duser;
}

sub getcheckform
{
    my $itemlist = shift;   # ref hash (id => description text)
    my $itemseq = shift;    # ref list (sequence items are to be listed)
    my $backtitle = shift;
    my $title = shift;
    my $checklisttext = shift;
    my $dimensions = shift; #  string "formheight formwidth listheight"
    my $selections = shift; # ref hash filled on return (selected ids exist as keys)
    my $itemenable = shift; # optional: undef or ref hash (id => on|off)
    my $defaultonoff = shift; # optional: undef or either string on|off
    
    
    my $sy = "dialog --backtitle '$backtitle' --title '$title' --clear --checklist '$checklisttext' $dimensions";
    
    foreach (@{$itemseq}) {
        # %itemlist items need not to be in @itemseq,
        # because @itemseq serves as general sequence definition
        if (exists ${$itemlist}{$_}) {
            if (defined $itemenable) {
                $sy .= " $_ '${$itemlist}{$_}' ${$itemenable}{$_}";
            } elsif (defined $defaultonoff) {
                $sy .= " $_ '${$itemlist}{$_}' $defaultonoff";
            } else {
                $sy .= " $_ '${$itemlist}{$_}' off";
            }
        }
    }
    $sy .= " 2>$tmpfile";
    
    my $r;
    do {
        $r = callsystem( $sy);
    } while ($r != 0);
    
    my $rref = read_a_file( $tmpfile);
    unlink( $tmpfile);
    {
        my @selitems = split( ' ', $$rref);
        foreach (@selitems) {
            ${$selections}{ $_} = 'i';
        }
    }
}

sub getradioform
{
    my $itemlist = shift;   # ref hash (id => description text)
    my $itemseq = shift;    # ref list (sequence items are to be listed)
    my $backtitle = shift;
    my $title = shift;
    my $radiolisttext = shift;
    my $dimensions = shift; #  string "formheight formwidth listheight"
    my $selection = shift;  # ref string filled on return (selected tag)
    my $itemdefault = shift; # optional: ref str with the item tag to be activated by default
    
    my $sy = "dialog --backtitle '$backtitle' --title '$title' --clear --radiolist '$radiolisttext' $dimensions";
    
    foreach (@{$itemseq}) {
        # %itemlist items need not to be in @itemseq,
        # because @itemseq serves as general sequence definition
        if (exists ${$itemlist}{$_}) {
            my $onoff = ($_ eq $$itemdefault)
                        ? 'on'
                        : 'off';
            $sy .= " $_ '${$itemlist}{$_}' $onoff";
        }
    }
    $sy .= " 2>$tmpfile";
    
    my $r;
    do {
        $r = callsystem( $sy);
    } while ($r != 0);
    
    my $rref = read_a_file( $tmpfile);
    unlink( $tmpfile);
    $$selection = $$rref;
}

sub inputbox
{
    my $backtitle = shift;
    my $title = shift;
    my $text = shift;
    my $dimensions = shift;
    my $presetval = shift;

    my $sy = "dialog --backtitle '$backtitle' --title '$title' --clear --inputbox '$text' $dimensions '$presetval'";

    my $r = callsystem( "$sy 2>$tmpfile");
    my $rref = read_a_file( $tmpfile);
    unlink( $tmpfile);
    return $$rref;
}

sub yesno
{
    my $backtitle = shift;
    my $title = shift;
    my $text = shift;
    my $dimensions = shift; #  string "height width"

    my $sy = "dialog --backtitle '$backtitle' --title '$title' --clear --yesno '$text' $dimensions";
    my $r = callsystem( $sy);

# TODO find out what is wrong!
# logconsole( "yesno: dialog returned '$r'\n");
# sometimes dialog-yesno returns 2 (Help) instead of 0 (OK) ?!?
if ($r == 2) {
    $r = 0;
}

    return (($r) ? 0 : 1);
}

sub msgbox
{
    my $backtitle = shift;
    my $title = shift;
    my $text = shift;
    my $dimensions = shift; #  string "height width"

    my $sy = "dialog --backtitle '$backtitle' --title '$title' --clear --msgbox '$text' $dimensions";

    callsystem( $sy);
}


############################################################    
####################    PCI IDs section begin
############################################################

    # Intel PCI IDS
    # source: xf86-video-i740 source i740_driver.c:
    # checks for PCI IDs  PCI_CHIP_I740_AGP and PCI_CHIP_I740_PCI
    # these constants are defined:
    # https://github.com/iquiw/xsrc/blob/master/external/mit/xorg-server.old/dist/hw/xfree86/common/xf86PciInfo.h
        #define PCI_CHIP_I740_PCI		0x00D1 #define PCI_VENDOR_INTEL		0x8086 #define PCI_CHIP_I740_AGP		0x7800
    # TODO add vendor Real3d!
    # note    # xf86-video-i740 supports Real3d cards, so we do too
#     see def above: my $pcivendor_real3d = '003D';      
        # from 
        # #define I740_DRIVER_NAME "i740"
        # https://web.archive.org/web/20140329071342/http://www.vgamuseum.info/images/stories/doc/intel/i740.pdf
        # table 3.1 contains pci id info
        # it is 7800 for i740 AGP
        #         in addition, an old pci list reveals:
        # https://github.com/iquiw/xsrc/blob/master/external/mit/xorg-server.old/dist/hw/xfree86/common/xf86PciInfo.h
        #define PCI_CHIP_I740_PCI		0x00D1
        
    # supported by xf86-video-i740
    # xf86-video-i740 supports Real3d cards too
my $intelpciid_i740 = {
    $key_vesako     => 'ToBeChecked',
    '7800' => 'i740 AGP',
    '00D1' => 'i740 PCI',
};
    
    # the short lived i752, unsupported
    # source: https://en.wikipedia.org/wiki/List_of_Intel_graphics_processing_units#First_generation
my $intelpciid_i752 = {
    $key_vesako     => 'ToBeChecked',
    '1240' => 'i752',
};
    
    
    # obsolete but keep for now to have full PCI ID list of unsupported devices
    # Intel PCI IDS between i810 and i915
    # note some extra PCI IDs 1130 and 1131 not found in Wikipedia
    # these are in agp mode
    # I815 (80815)
    # table 3.4 says PCI ID 1130
    # table 3.5 says PCI ID 1131
    # https://www.intel.com/content/dam/support/us/en/documents/graphics/29835102.pdf

    # supported by xf86-video-intel
my $intelpciid_oldintel = {
    $key_vesako     => 'ToBeChecked',
    '7121' => 'i810',
    '7123' => 'i810-DC100',
    '7125' => 'i810E i810E2',
    '1131' => 'i815 i815E i815G i815EG AGP mode',
    '1132' => 'i815 i815E i815G i815EG GFX mode',
    '2562' => 'i845G i845GL i845GV',
    '3577' => 'i830M i830MG',
    '2572' => 'i865G i865GV',
    '3582' => 'i852GM i852GME i852GMV',
    '358E' => 'i854',
    '3582' => 'i855GM i855GME',
};






my $indintel_shortn = 0;
my $indintel_gengpu = 1;
my @inddrm_kmod_fbsdvers = 2;
my @drm_kmod_fbsdvers = ('12', '13', '13-devel', '14', '');

my $fbsdvers_drmkmod_drivername = {
    '12' => 'graphics/drm-kmod',
    '13' => 'graphics/drm-kmod',
    '13-devel' =>'graphics/drm-devel-kmod',
    '14' =>'graphics/drm-devel-kmod',
};
my $fbsdvers_drmkmod_modulename = {
    '12' => undef,
    '13' => undef,
    '13-devel' => undef,
    '14' => undef,
#     '12' => 'drm-kmod.ko',
#     '13' => 'drm-kmod.ko',
#     '13-devel' =>'drm-devel-kmod.ko',
#     '14' =>'drm-devel-kmod.ko',
};
# my @intel_fbsd_versions_index = ( 3,4,5,6,7);
my $fbsd__drmkmod_versions_index = {
    '12' => '3',
    '13' => '4',
    '13-devel' => '5',
    '14' => '6',
    '' => '7',
};

my $indintel_archgencpu = 7;
my $indintel_intro = 8;
my $indintel_formf = 9;
my $indintel_marketnames = 10;
my $indintel_codename = 11;
my $indintel_codedescription = 12;

my $pciids_intel = {
    '7121' => [ 'I810',      '1',      'No',     'No',     'No',     '',       '',       'ICH',    '1999',  'D',        'i752',  'Whitney', 'Whitney I810' ],
    '7123' => [ 'I810',      '1',      'No',     'No',     'No',     '',       '',       'ICH',    '1999',  'D',        'i752',  'Whitney', 'Whitney I810_DC100' ],
    '7125' => [ 'I810',      '1',      'No',     'No',     'No',     '',       '',       'ICH',    '1999',  'D',        'i752',  'Whitney', 'Whitney I810_E' ],
    '1132' => [ 'I815',      '1',      'No',     'No',     'No',     '',       '',       'ICH',    '2000',  'D',        'i754',  'Solano', 'Solano I815' ],
    '3577' => [ 'I830',      '2',      'Unlikely', 'Unlikely', 'Very Unlikely', '',       '',       'ICH',    '2001',  'M',        'Extreme Graphics', 'Almador', 'Almador' ],
    '2562' => [ 'I845G',     '2',      'Unlikely', 'Unlikely', 'Very Unlikely', '',       '',       'ICH',    '2002',  'D',        'Extreme Graphics', 'Brookdale', 'Brookdale' ],
    '3582' => [ 'I85X',      '2',      'Unlikely', 'Unlikely', 'Very Unlikely', '',       '',       'ICH',    '2003',  'M',        'Extreme
Graphics 2', 'Montara', 'Montara I855_GM' ],
    '358E' => [ 'I85X',      '2',      'Unlikely', 'Unlikely', 'Very Unlikely', '',       '',       'ICH',    '2003',  'M',        'Extreme
Graphics 2', 'Montara', 'Montara' ],
    '2572' => [ 'I865G',     '2',      'Unlikely', 'Unlikely', 'Very Unlikely', '',       '',       'ICH',    '2003',  'D',        'Extreme
Graphics 2', 'Springdale', 'Springdale I865_G' ],
    '2582' => [ 'I915G',     '3',      'Probably Testworthy', 'Probably Testworthy', 'Possibly Testworthy', '',       '',       'ICH',    '2004',  'D',        'GMA 900', 'Grantsdale', 'Grantsdale I915_G' ],
    '258A' => [ 'I915G',     '3',      'Probably Testworthy', 'Probably Testworthy', 'Possibly Testworthy', '',       '',       'ICH',    '2004',  'D',        'GMA 900', 'Grantsdale', 'Grantsdale E7221_G' ],
    '2592' => [ 'I915GM',    '3',      'Probably Testworthy', 'Probably Testworthy', 'Possibly Testworthy', '',       '',       'ICH',    '2005',  'M',        'GMA 900', 'Alviso', 'Alviso I915_GM' ],
    '2772' => [ 'I945G',     '3',      'Probably Testworthy', 'Probably Testworthy', 'Possibly Testworthy', '',       '',       'ICH',    '2005',  'D',        'GMA 950', 'Lakeport', 'Lakeport I945_G' ],
    '27A2' => [ 'I945GM',    '3',      'Probably Testworthy', 'Probably Testworthy', 'Possibly Testworthy', '',       '',       'ICH',    '2006',  'M',        'GMA 950', 'Calistoga', 'Calistoga I945_GM' ],
    '27AE' => [ 'I945GM',    '3',      'Probably Testworthy', 'Probably Testworthy', 'Possibly Testworthy', '',       '',       'ICH',    '2006',  'M',        'GMA 950', 'Calistoga', 'Calistoga I945_GME' ],
    '2972' => [ 'I965G',     '4',      'Testworthy', 'Testworthy', 'Probably Testworthy', '',       '',       'ICH',    '2006',  'D',        'GMA 3000', 'Broadwater Bearlake Lakeport', 'Broadwater Bearlake Lakeport I946_GZ' ],
    '2982' => [ 'I965G',     '4',      'Testworthy', 'Testworthy', 'Probably Testworthy', '',       '',       'ICH',    '2006',  'D',        'GMA 3000', 'Broadwater Bearlake Lakeport', 'Broadwater Bearlake Lakeport G35_G' ],
    '2992' => [ 'I965G',     '4',      'Testworthy', 'Testworthy', 'Probably Testworthy', '',       '',       'ICH',    '2006',  'D',        'GMA 3000', 'Broadwater Bearlake Lakeport', 'Broadwater Bearlake Lakeport I965_Q' ],
    '29A2' => [ 'I965G',     '4',      'Testworthy', 'Testworthy', 'Probably Testworthy', '',       '',       'ICH',    '2006',  'D',        'GMA 3000', 'Broadwater Bearlake Lakeport', 'Broadwater Bearlake Lakeport I965_G' ],
    '29B2' => [ 'G33',       '3',      'Probably Testworthy', 'Probably Testworthy', 'Possibly Testworthy', '',       '',       'GMCH',   '2007',  'D',        'GMA 3100', 'Bearlake', 'Bearlake Q35_G' ],
    '29C2' => [ 'G33',       '3',      'Probably Testworthy', 'Probably Testworthy', 'Possibly Testworthy', '',       '',       'GMCH',   '2007',  'D',        'GMA 3100', 'Bearlake', 'Bearlake G33_G' ],
    '29D2' => [ 'G33',       '3',      'Probably Testworthy', 'Probably Testworthy', 'Possibly Testworthy', '',       '',       'GMCH',   '2007',  'D',        'GMA 3100', 'Bearlake', 'Bearlake Q33_G' ],
    '2A02' => [ 'I965GM',    '4',      'Testworthy', 'Testworthy', 'Probably Testworthy', '',       '',       'ICH',    '2007',  'M',        'GMA X3100', 'Crestline', 'Crestline I965_GM' ],
    '2A12' => [ 'I965GM',    '4',      'Testworthy', 'Testworthy', 'Probably Testworthy', '',       '',       'ICH',    '2007',  'M',        'GMA X3100', 'Crestline', 'Crestline I965_GME' ],
    '2A42' => [ 'GM45',      '4.5',    'Testworthy', 'Testworthy', 'Testworthy', '',       '',       'GMCH',   '2008',  'M',        'GMA 4500MHD', 'Cantiga', 'Cantiga GM45_G' ],
    '2E02' => [ 'G45',       '4.5',    'Testworthy', 'Testworthy', 'Testworthy', '',       '',       'GMA',    '2008',  'D',        'GMA X4500HD', 'Eaglelake', 'Eaglelake IGD_E_G' ],
    '2E12' => [ 'G45',       '4.5',    'Testworthy', 'Testworthy', 'Testworthy', '',       '',       'GMA',    '2008',  'D',        'GMA X4500HD', 'Eaglelake', 'Eaglelake Q45_G' ],
    '2E22' => [ 'G45',       '4.5',    'Testworthy', 'Testworthy', 'Testworthy', '',       '',       'GMA',    '2008',  'D',        'GMA X4500HD', 'Eaglelake', 'Eaglelake G45_G' ],
    '2E32' => [ 'G45',       '4.5',    'Testworthy', 'Testworthy', 'Testworthy', '',       '',       'GMA',    '2008',  'D',        'GMA X4500HD', 'Eaglelake', 'Eaglelake G41_G' ],
    '2E42' => [ 'G45',       '4.5',    'Testworthy', 'Testworthy', 'Testworthy', '',       '',       'GMA',    '2008',  'D',        'GMA X4500HD', 'Eaglelake', 'Eaglelake B43_G' ],
    '2E92' => [ 'G45',       '4.5',    'Testworthy', 'Testworthy', 'Testworthy', '',       '',       'GMA',    '2008',  'D',        'GMA X4500HD', 'Eaglelake', 'Eaglelake B43_G.1' ],
    'A001' => [ 'PINEVIEW',  '3',      'Probably Testworthy', 'Probably Testworthy', 'Possibly Testworthy', '',       '',       'GMA',    '2010',  'NB',       'GMA 3150', 'Pineview', 'Pineview G' ],
    'A011' => [ 'PINEVIEW',  '3',      'Probably Testworthy', 'Probably Testworthy', 'Possibly Testworthy', '',       '',       'GMA',    '2010',  'NB',       'GMA 3150', 'Pineview', 'Pineview M' ],
    '0042' => [ 'IRONLAKE',  '5',      'Testworthy', 'Testworthy', 'Testworthy', '',       '',       '1',      '2010',  'D',        'HD Graphics', 'Ironlake', 'Ironlake D' ],
    '0046' => [ 'IRONLAKE',  '5',      'Testworthy', 'Testworthy', 'Testworthy', '',       '',       '1',      '2010',  'D',        'HD Graphics', 'Ironlake', 'Ironlake M' ],
    '0102' => [ 'SNB',       '6.0',    'Yes',    'Yes',    'Yes',    '',       '',       '2',      '2011',  'MDW',      'HD Graphics,HD Graphics 2000,HD Graphics 3000,HD Graphics P3000', 'Sandy Bridge', 'Sandy Bridge D_GT1' ],
    '010A' => [ 'SNB',       '6.0',    'Yes',    'Yes',    'Yes',    '',       '',       '2',      '2011',  'MDW',      'HD Graphics,HD Graphics 2000,HD Graphics 3000,HD Graphics P3000', 'Sandy Bridge', 'Sandy Bridge D_GT1' ],
    '0112' => [ 'SNB',       '6.0',    'Yes',    'Yes',    'Yes',    '',       '',       '2',      '2011',  'MDW',      'HD Graphics,HD Graphics 2000,HD Graphics 3000,HD Graphics P3000', 'Sandy Bridge', 'Sandy Bridge D_GT2' ],
    '0122' => [ 'SNB',       '6.0',    'Yes',    'Yes',    'Yes',    '',       '',       '2',      '2011',  'MDW',      'HD Graphics,HD Graphics 2000,HD Graphics 3000,HD Graphics P3000', 'Sandy Bridge', 'Sandy Bridge D_GT2' ],
    '0106' => [ 'SNB',       '6.0',    'Yes',    'Yes',    'Yes',    '',       '',       '2',      '2011',  'MDW',      'HD Graphics,HD Graphics 2000,HD Graphics 3000,HD Graphics P3000', 'Sandy Bridge', 'Sandy Bridge M_GT1' ],
    '0116' => [ 'SNB',       '6.0',    'Yes',    'Yes',    'Yes',    '',       '',       '2',      '2011',  'MDW',      'HD Graphics,HD Graphics 2000,HD Graphics 3000,HD Graphics P3000', 'Sandy Bridge', 'Sandy Bridge M_GT2' ],
    '0126' => [ 'SNB',       '6.0',    'Yes',    'Yes',    'Yes',    '',       '',       '2',      '2011',  'MDW',      'HD Graphics,HD Graphics 2000,HD Graphics 3000,HD Graphics P3000', 'Sandy Bridge', 'Sandy Bridge M_GT2' ],
    '0156' => [ 'IVB',       '7.0',    'Yes',    'Yes',    'Yes',    '',       '',       '3',      '2012',  'DMW',      'HD Graphics,HD Graphics 2500,HD Graphics 4000,HD Graphics P4000', 'Ivy Bridge', 'Ivy Bridge GT1 mobile [M_GT1]' ],
    '0166' => [ 'IVB',       '7.0',    'Yes',    'Yes',    'Yes',    '',       '',       '3',      '2012',  'DMW',      'HD Graphics,HD Graphics 2500,HD Graphics 4000,HD Graphics P4000', 'Ivy Bridge', 'Ivy Bridge GT2 mobile [M_GT2]' ],
    '0152' => [ 'IVB',       '7.0',    'Yes',    'Yes',    'Yes',    '',       '',       '3',      '2012',  'DMW',      'HD Graphics,HD Graphics 2500,HD Graphics 4000,HD Graphics P4000', 'Ivy Bridge', 'Ivy Bridge GT1 desktop [D_GT1]' ],
    '015A' => [ 'IVB',       '7.0',    'Yes',    'Yes',    'Yes',    '',       '',       '3',      '2012',  'DMW',      'HD Graphics,HD Graphics 2500,HD Graphics 4000,HD Graphics P4000', 'Ivy Bridge', 'Ivy Bridge GT1 server [D_GT1]' ],
    '0162' => [ 'IVB',       '7.0',    'Yes',    'Yes',    'Yes',    '',       '',       '3',      '2012',  'DMW',      'HD Graphics,HD Graphics 2500,HD Graphics 4000,HD Graphics P4000', 'Ivy Bridge', 'Ivy Bridge GT2 desktop [D_GT2]' ],
    '016A' => [ 'IVB',       '7.0',    'Yes',    'Yes',    'Yes',    '',       '',       '3',      '2012',  'DMW',      'HD Graphics,HD Graphics 2500,HD Graphics 4000,HD Graphics P4000', 'Ivy Bridge', 'Ivy Bridge GT2 server [D_GT2]' ],
    '0A02' => [ 'HSW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       '4',      '2013',  'DMUW',     'HD Graphics,HD Graphics 4200,HD Graphics 4400,HD Graphics 4600,HD Graphics P4600,HD Graphics P4700,HD Graphics 5000,Iris Graphics 5100', 'Haswell', 'Haswell ULT GT1 desktop [ULT_GT1]' ],
    '0A0A' => [ 'HSW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       '4',      '2013',  'DMUW',     'HD Graphics,HD Graphics 4200,HD Graphics 4400,HD Graphics 4600,HD Graphics P4600,HD Graphics P4700,HD Graphics 5000,Iris Graphics 5100', 'Haswell', 'Haswell ULT GT1 server [ULT_GT1]' ],
    '0A0B' => [ 'HSW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       '4',      '2013',  'DMUW',     'HD Graphics,HD Graphics 4200,HD Graphics 4400,HD Graphics 4600,HD Graphics P4600,HD Graphics P4700,HD Graphics 5000,Iris Graphics 5100', 'Haswell', 'Haswell ULT GT1 reserved [ULT_GT1]' ],
    '0A06' => [ 'HSW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       '4',      '2013',  'DMUW',     'HD Graphics,HD Graphics 4200,HD Graphics 4400,HD Graphics 4600,HD Graphics P4600,HD Graphics P4700,HD Graphics 5000,Iris Graphics 5100', 'Haswell', 'Haswell ULT GT1 mobile [ULT_GT1]' ],
    '0A0E' => [ 'HSW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       '4',      '2013',  'DMUW',     'HD Graphics,HD Graphics 4200,HD Graphics 4400,HD Graphics 4600,HD Graphics P4600,HD Graphics P4700,HD Graphics 5000,Iris Graphics 5100', 'Haswell', 'Haswell ULX GT1 mobile [ULX_GT1]' ],
    '0402' => [ 'HSW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       '4',      '2013',  'DMUW',     'HD Graphics,HD Graphics 4200,HD Graphics 4400,HD Graphics 4600,HD Graphics P4600,HD Graphics P4700,HD Graphics 5000,Iris Graphics 5100', 'Haswell', 'Haswell GT1 desktop [GT1]' ],
    '040A' => [ 'HSW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       '4',      '2013',  'DMUW',     'HD Graphics,HD Graphics 4200,HD Graphics 4400,HD Graphics 4600,HD Graphics P4600,HD Graphics P4700,HD Graphics 5000,Iris Graphics 5100', 'Haswell', 'Haswell GT1 server [GT1]' ],
    '040B' => [ 'HSW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       '4',      '2013',  'DMUW',     'HD Graphics,HD Graphics 4200,HD Graphics 4400,HD Graphics 4600,HD Graphics P4600,HD Graphics P4700,HD Graphics 5000,Iris Graphics 5100', 'Haswell', 'Haswell GT1 reserved [GT1]' ],
    '040E' => [ 'HSW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       '4',      '2013',  'DMUW',     'HD Graphics,HD Graphics 4200,HD Graphics 4400,HD Graphics 4600,HD Graphics P4600,HD Graphics P4700,HD Graphics 5000,Iris Graphics 5100', 'Haswell', 'Haswell GT1 reserved [GT1]' ],
    '0C02' => [ 'HSW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       '4',      '2013',  'DMUW',     'HD Graphics,HD Graphics 4200,HD Graphics 4400,HD Graphics 4600,HD Graphics P4600,HD Graphics P4700,HD Graphics 5000,Iris Graphics 5100', 'Haswell', 'Haswell SDV GT1 desktop [GT1]' ],
    '0C0A' => [ 'HSW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       '4',      '2013',  'DMUW',     'HD Graphics,HD Graphics 4200,HD Graphics 4400,HD Graphics 4600,HD Graphics P4600,HD Graphics P4700,HD Graphics 5000,Iris Graphics 5100', 'Haswell', 'Haswell SDV GT1 server [GT1]' ],
    '0C0B' => [ 'HSW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       '4',      '2013',  'DMUW',     'HD Graphics,HD Graphics 4200,HD Graphics 4400,HD Graphics 4600,HD Graphics P4600,HD Graphics P4700,HD Graphics 5000,Iris Graphics 5100', 'Haswell', 'Haswell SDV GT1 reserved [GT1]' ],
    '0C0E' => [ 'HSW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       '4',      '2013',  'DMUW',     'HD Graphics,HD Graphics 4200,HD Graphics 4400,HD Graphics 4600,HD Graphics P4600,HD Graphics P4700,HD Graphics 5000,Iris Graphics 5100', 'Haswell', 'Haswell SDV GT1 reserved [GT1]' ],
    '0D02' => [ 'CRW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       'IGP',    '2013',  'DM',       'HD Graphics,HD Graphics 4600,Iris Pro Graphics 5200', 'Crystal Well', '(Haswell) Crystal Well GT1 desktop [GT1]' ],
    '0D0A' => [ 'CRW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       'IGP',    '2013',  'DM',       'HD Graphics,HD Graphics 4600,Iris Pro Graphics 5200', 'Crystal Well', '(Haswell) Crystal Well GT1 server [GT1]' ],
    '0D0B' => [ 'CRW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       'IGP',    '2013',  'DM',       'HD Graphics,HD Graphics 4600,Iris Pro Graphics 5200', 'Crystal Well', '(Haswell) Crystal Well GT1 reserved [GT1]' ],
    '0D0E' => [ 'CRW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       'IGP',    '2013',  'DM',       'HD Graphics,HD Graphics 4600,Iris Pro Graphics 5200', 'Crystal Well', '(Haswell) Crystal Well GT1 reserved [GT1]' ],
    '0406' => [ 'CRW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       'IGP',    '2013',  'DM',       'HD Graphics,HD Graphics 4600,Iris Pro Graphics 5200', 'Crystal Well', 'Haswell GT1 mobile [GT1]' ],
    '0C06' => [ 'CRW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       'IGP',    '2013',  'DM',       'HD Graphics,HD Graphics 4600,Iris Pro Graphics 5200', 'Crystal Well', 'Haswell SDV GT1 mobile [GT1]' ],
    '0D06' => [ 'CRW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       'IGP',    '2013',  'DM',       'HD Graphics,HD Graphics 4600,Iris Pro Graphics 5200', 'Crystal Well', '(Haswell) Crystal Well GT1 mobile [GT1]' ],
    '0A12' => [ 'HSW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       '4',      '2013',  'DMUW',     'HD Graphics,HD Graphics 4200,HD Graphics 4400,HD Graphics 4600,HD Graphics P4600,HD Graphics P4700,HD Graphics 5000,Iris Graphics 5100', 'Haswell', 'Haswell ULT GT2 desktop [ULT_GT2]' ],
    '0A1A' => [ 'HSW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       '4',      '2013',  'DMUW',     'HD Graphics,HD Graphics 4200,HD Graphics 4400,HD Graphics 4600,HD Graphics P4600,HD Graphics P4700,HD Graphics 5000,Iris Graphics 5100', 'Haswell', 'Haswell ULT GT2 server [ULT_GT2]' ],
    '0A1B' => [ 'HSW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       '4',      '2013',  'DMUW',     'HD Graphics,HD Graphics 4200,HD Graphics 4400,HD Graphics 4600,HD Graphics P4600,HD Graphics P4700,HD Graphics 5000,Iris Graphics 5100', 'Haswell', 'Haswell ULT GT2 reserved [ULT_GT2]' ],
    '0A16' => [ 'HSW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       '4',      '2013',  'DMUW',     'HD Graphics,HD Graphics 4200,HD Graphics 4400,HD Graphics 4600,HD Graphics P4600,HD Graphics P4700,HD Graphics 5000,Iris Graphics 5100', 'Haswell', 'Haswell ULT GT2 mobile [ULT_GT2]' ],
    '0A1E' => [ 'HSW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       '4',      '2013',  'DMUW',     'HD Graphics,HD Graphics 4200,HD Graphics 4400,HD Graphics 4600,HD Graphics P4600,HD Graphics P4700,HD Graphics 5000,Iris Graphics 5100', 'Haswell', 'Haswell ULX GT2 mobile [ULX_GT2]' ],
    '0412' => [ 'HSW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       '4',      '2013',  'DMUW',     'HD Graphics,HD Graphics 4200,HD Graphics 4400,HD Graphics 4600,HD Graphics P4600,HD Graphics P4700,HD Graphics 5000,Iris Graphics 5100', 'Haswell', 'Haswell GT2 desktop [GT2]' ],
    '041A' => [ 'HSW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       '4',      '2013',  'DMUW',     'HD Graphics,HD Graphics 4200,HD Graphics 4400,HD Graphics 4600,HD Graphics P4600,HD Graphics P4700,HD Graphics 5000,Iris Graphics 5100', 'Haswell', 'Haswell GT2 server [GT2]' ],
    '041B' => [ 'HSW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       '4',      '2013',  'DMUW',     'HD Graphics,HD Graphics 4200,HD Graphics 4400,HD Graphics 4600,HD Graphics P4600,HD Graphics P4700,HD Graphics 5000,Iris Graphics 5100', 'Haswell', 'Haswell GT2 reserved [GT2]' ],
    '041E' => [ 'HSW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       '4',      '2013',  'DMUW',     'HD Graphics,HD Graphics 4200,HD Graphics 4400,HD Graphics 4600,HD Graphics P4600,HD Graphics P4700,HD Graphics 5000,Iris Graphics 5100', 'Haswell', 'Haswell GT2 reserved [GT2]' ],
    '0C12' => [ 'HSW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       '4',      '2013',  'DMUW',     'HD Graphics,HD Graphics 4200,HD Graphics 4400,HD Graphics 4600,HD Graphics P4600,HD Graphics P4700,HD Graphics 5000,Iris Graphics 5100', 'Haswell', 'Haswell SDV GT2 desktop [GT2]' ],
    '0C1A' => [ 'HSW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       '4',      '2013',  'DMUW',     'HD Graphics,HD Graphics 4200,HD Graphics 4400,HD Graphics 4600,HD Graphics P4600,HD Graphics P4700,HD Graphics 5000,Iris Graphics 5100', 'Haswell', 'Haswell SDV GT2 server [GT2]' ],
    '0C1B' => [ 'HSW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       '4',      '2013',  'DMUW',     'HD Graphics,HD Graphics 4200,HD Graphics 4400,HD Graphics 4600,HD Graphics P4600,HD Graphics P4700,HD Graphics 5000,Iris Graphics 5100', 'Haswell', 'Haswell SDV GT2 reserved [GT2]' ],
    '0C1E' => [ 'HSW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       '4',      '2013',  'DMUW',     'HD Graphics,HD Graphics 4200,HD Graphics 4400,HD Graphics 4600,HD Graphics P4600,HD Graphics P4700,HD Graphics 5000,Iris Graphics 5100', 'Haswell', 'Haswell SDV GT2 reserved [GT2]' ],
    '0D12' => [ 'CRW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       'IGP',    '2013',  'DM',       'HD Graphics,HD Graphics 4600,Iris Pro Graphics 5200', 'Crystal Well', '(Haswell) Crystal Well GT2 desktop [GT2]' ],
    '0D1A' => [ 'CRW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       'IGP',    '2013',  'DM',       'HD Graphics,HD Graphics 4600,Iris Pro Graphics 5200', 'Crystal Well', '(Haswell) Crystal Well GT2 server [GT2]' ],
    '0D1B' => [ 'CRW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       'IGP',    '2013',  'DM',       'HD Graphics,HD Graphics 4600,Iris Pro Graphics 5200', 'Crystal Well', '(Haswell) Crystal Well GT2 reserved [GT2]' ],
    '0D1E' => [ 'CRW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       'IGP',    '2013',  'DM',       'HD Graphics,HD Graphics 4600,Iris Pro Graphics 5200', 'Crystal Well', '(Haswell) Crystal Well GT2 reserved [GT2]' ],
    '0416' => [ 'CRW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       'IGP',    '2013',  'DM',       'HD Graphics,HD Graphics 4600,Iris Pro Graphics 5200', 'Crystal Well', 'Haswell GT2 mobile [GT2]' ],
    '0426' => [ 'CRW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       'IGP',    '2013',  'DM',       'HD Graphics,HD Graphics 4600,Iris Pro Graphics 5200', 'Crystal Well', 'Haswell GT2 mobile [GT2]' ],
    '0C16' => [ 'CRW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       'IGP',    '2013',  'DM',       'HD Graphics,HD Graphics 4600,Iris Pro Graphics 5200', 'Crystal Well', 'Haswell SDV GT2 mobile [GT2]' ],
    '0D16' => [ 'CRW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       'IGP',    '2013',  'DM',       'HD Graphics,HD Graphics 4600,Iris Pro Graphics 5200', 'Crystal Well', '(Haswell) Crystal Well GT2 mobile [GT2]' ],
    '0A22' => [ 'HSW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       '4',      '2013',  'DMUW',     'HD Graphics,HD Graphics 4200,HD Graphics 4400,HD Graphics 4600,HD Graphics P4600,HD Graphics P4700,HD Graphics 5000,Iris Graphics 5100', 'Haswell', 'Haswell ULT GT3 desktop [ULT_GT3]' ],
    '0A2A' => [ 'HSW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       '4',      '2013',  'DMUW',     'HD Graphics,HD Graphics 4200,HD Graphics 4400,HD Graphics 4600,HD Graphics P4600,HD Graphics P4700,HD Graphics 5000,Iris Graphics 5100', 'Haswell', 'Haswell ULT GT3 server [ULT_GT3]' ],
    '0A2B' => [ 'HSW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       '4',      '2013',  'DMUW',     'HD Graphics,HD Graphics 4200,HD Graphics 4400,HD Graphics 4600,HD Graphics P4600,HD Graphics P4700,HD Graphics 5000,Iris Graphics 5100', 'Haswell', 'Haswell ULT GT3 reserved [ULT_GT3]' ],
    '0A26' => [ 'HSW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       '4',      '2013',  'DMUW',     'HD Graphics,HD Graphics 4200,HD Graphics 4400,HD Graphics 4600,HD Graphics P4600,HD Graphics P4700,HD Graphics 5000,Iris Graphics 5100', 'Haswell', 'Haswell ULT GT3 mobile [ULT_GT3]' ],
    '0A2E' => [ 'HSW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       '4',      '2013',  'DMUW',     'HD Graphics,HD Graphics 4200,HD Graphics 4400,HD Graphics 4600,HD Graphics P4600,HD Graphics P4700,HD Graphics 5000,Iris Graphics 5100', 'Haswell', 'Haswell ULT GT3 reserved [ULT_GT3]' ],
    '0422' => [ 'HSW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       '4',      '2013',  'DMUW',     'HD Graphics,HD Graphics 4200,HD Graphics 4400,HD Graphics 4600,HD Graphics P4600,HD Graphics P4700,HD Graphics 5000,Iris Graphics 5100', 'Haswell', 'Haswell GT3 desktop [GT3]' ],
    '042A' => [ 'HSW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       '4',      '2013',  'DMUW',     'HD Graphics,HD Graphics 4200,HD Graphics 4400,HD Graphics 4600,HD Graphics P4600,HD Graphics P4700,HD Graphics 5000,Iris Graphics 5100', 'Haswell', 'Haswell GT3 server [GT3]' ],
    '042B' => [ 'HSW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       '4',      '2013',  'DMUW',     'HD Graphics,HD Graphics 4200,HD Graphics 4400,HD Graphics 4600,HD Graphics P4600,HD Graphics P4700,HD Graphics 5000,Iris Graphics 5100', 'Haswell', 'Haswell GT3 reserved [GT3]' ],
    '042E' => [ 'HSW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       '4',      '2013',  'DMUW',     'HD Graphics,HD Graphics 4200,HD Graphics 4400,HD Graphics 4600,HD Graphics P4600,HD Graphics P4700,HD Graphics 5000,Iris Graphics 5100', 'Haswell', 'Haswell GT3 reserved [GT3]' ],
    '0C22' => [ 'HSW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       '4',      '2013',  'DMUW',     'HD Graphics,HD Graphics 4200,HD Graphics 4400,HD Graphics 4600,HD Graphics P4600,HD Graphics P4700,HD Graphics 5000,Iris Graphics 5100', 'Haswell', 'Haswell SDV GT3 desktop [GT3]' ],
    '0C2A' => [ 'HSW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       '4',      '2013',  'DMUW',     'HD Graphics,HD Graphics 4200,HD Graphics 4400,HD Graphics 4600,HD Graphics P4600,HD Graphics P4700,HD Graphics 5000,Iris Graphics 5100', 'Haswell', 'Haswell SDV GT3 server [GT3]' ],
    '0C2B' => [ 'HSW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       '4',      '2013',  'DMUW',     'HD Graphics,HD Graphics 4200,HD Graphics 4400,HD Graphics 4600,HD Graphics P4600,HD Graphics P4700,HD Graphics 5000,Iris Graphics 5100', 'Haswell', 'Haswell SDV GT3 reserved [GT3]' ],
    '0C2E' => [ 'HSW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       '4',      '2013',  'DMUW',     'HD Graphics,HD Graphics 4200,HD Graphics 4400,HD Graphics 4600,HD Graphics P4600,HD Graphics P4700,HD Graphics 5000,Iris Graphics 5100', 'Haswell', 'Haswell SDV GT3 reserved [GT3]' ],
    '0D22' => [ 'CRW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       'IGP',    '2013',  'DM',       'HD Graphics,HD Graphics 4600,Iris Pro Graphics 5200', 'Crystal Well', '(Haswell) Crystal Well GT3 desktop [GT3]' ],
    '0D2A' => [ 'CRW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       'IGP',    '2013',  'DM',       'HD Graphics,HD Graphics 4600,Iris Pro Graphics 5200', 'Crystal Well', '(Haswell) Crystal Well GT3 server [GT3]' ],
    '0D2B' => [ 'CRW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       'IGP',    '2013',  'DM',       'HD Graphics,HD Graphics 4600,Iris Pro Graphics 5200', 'Crystal Well', '(Haswell) Crystal Well GT3 reserved [GT3]' ],
    '0D2E' => [ 'CRW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       'IGP',    '2013',  'DM',       'HD Graphics,HD Graphics 4600,Iris Pro Graphics 5200', 'Crystal Well', '(Haswell) Crystal Well GT3 reserved [GT3]' ],
    '0C26' => [ 'CRW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       'IGP',    '2013',  'DM',       'HD Graphics,HD Graphics 4600,Iris Pro Graphics 5200', 'Crystal Well', 'Haswell SDV GT3 mobile [GT3]' ],
    '0D26' => [ 'CRW',       '7.5',    'Yes',    'Yes',    'Yes',    '',       '',       'IGP',    '2013',  'DM',       'HD Graphics,HD Graphics 4600,Iris Pro Graphics 5200', 'Crystal Well', '(Haswell) Crystal Well GT3 mobile [GT3]' ],
    '0F30' => [ 'VLV',       '7.0',    'Yes',    'Yes',    'Yes',    '',       '',       'SOC',    '2013',  'TLE',      'HD Graphics', 'Bay Trail (Valleyview)', 'Bay Trail (Valleyview)' ],
    '0F31' => [ 'VLV',       '7.0',    'Yes',    'Yes',    'Yes',    '',       '',       'SOC',    '2013',  'TLE',      'HD Graphics', 'Bay Trail (Valleyview)', 'Bay Trail (Valleyview)' ],
    '0F32' => [ 'VLV',       '7.0',    'Yes',    'Yes',    'Yes',    '',       '',       'SOC',    '2013',  'TLE',      'HD Graphics', 'Bay Trail (Valleyview)', 'Bay Trail (Valleyview)' ],
    '0F33' => [ 'VLV',       '7.0',    'Yes',    'Yes',    'Yes',    '',       '',       'SOC',    '2013',  'TLE',      'HD Graphics', 'Bay Trail (Valleyview)', 'Bay Trail (Valleyview)' ],
    '0157' => [ 'VLV',       '7.0',    'Yes',    'Yes',    'Yes',    '',       '',       'SOC',    '2013',  'TLE',      'HD Graphics', 'Bay Trail (Valleyview)', 'Bay Trail (Valleyview)' ],
    '0155' => [ 'VLV',       '7.0',    'Yes',    'Yes',    'Yes',    '',       '',       'SOC',    '2013',  'TLE',      'HD Graphics', 'Bay Trail (Valleyview)', 'Bay Trail (Valleyview)' ],
    '1606' => [ 'BDW',       '8.0',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2014/15', 'UDMW',     'HD Graphics,HD Graphics 5300,HD Graphics 5500,HD Graphics 5600,HD Graphics P5700,,HD Graphics 6000,Iris Graphics 6100,Iris Pro Graphics 6200,Iris Pro Graphics P6300', 'Broadwell', 'Broadwell GT1 ULT [ULT_GT1]' ],
    '160B' => [ 'BDW',       '8.0',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2014/15', 'UDMW',     'HD Graphics,HD Graphics 5300,HD Graphics 5500,HD Graphics 5600,HD Graphics P5700,,HD Graphics 6000,Iris Graphics 6100,Iris Pro Graphics 6200,Iris Pro Graphics P6300', 'Broadwell', 'Broadwell GT1 Iris [ULT_GT1]' ],
    '160E' => [ 'BDW',       '8.0',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2014/15', 'UDMW',     'HD Graphics,HD Graphics 5300,HD Graphics 5500,HD Graphics 5600,HD Graphics P5700,,HD Graphics 6000,Iris Graphics 6100,Iris Pro Graphics 6200,Iris Pro Graphics P6300', 'Broadwell', 'Broadwell GT1 ULX [ULX_GT1]' ],
    '1602' => [ 'BDW',       '8.0',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2014/15', 'UDMW',     'HD Graphics,HD Graphics 5300,HD Graphics 5500,HD Graphics 5600,HD Graphics P5700,,HD Graphics 6000,Iris Graphics 6100,Iris Pro Graphics 6200,Iris Pro Graphics P6300', 'Broadwell', 'Broadwell GT1 ULT [GT1]' ],
    '160A' => [ 'BDW',       '8.0',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2014/15', 'UDMW',     'HD Graphics,HD Graphics 5300,HD Graphics 5500,HD Graphics 5600,HD Graphics P5700,,HD Graphics 6000,Iris Graphics 6100,Iris Pro Graphics 6200,Iris Pro Graphics P6300', 'Broadwell', 'Broadwell GT1 Server [GT1]' ],
    '160D' => [ 'BDW',       '8.0',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2014/15', 'UDMW',     'HD Graphics,HD Graphics 5300,HD Graphics 5500,HD Graphics 5600,HD Graphics P5700,,HD Graphics 6000,Iris Graphics 6100,Iris Pro Graphics 6200,Iris Pro Graphics P6300', 'Broadwell', 'Broadwell GT1 Workstation [GT1]' ],
    '1616' => [ 'BDW',       '8.0',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2014/15', 'UDMW',     'HD Graphics,HD Graphics 5300,HD Graphics 5500,HD Graphics 5600,HD Graphics P5700,,HD Graphics 6000,Iris Graphics 6100,Iris Pro Graphics 6200,Iris Pro Graphics P6300', 'Broadwell', 'Broadwell GT2 ULT [ULT_GT2]' ],
    '161B' => [ 'BDW',       '8.0',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2014/15', 'UDMW',     'HD Graphics,HD Graphics 5300,HD Graphics 5500,HD Graphics 5600,HD Graphics P5700,,HD Graphics 6000,Iris Graphics 6100,Iris Pro Graphics 6200,Iris Pro Graphics P6300', 'Broadwell', 'Broadwell GT2 ULT [ULT_GT2]' ],
    '161E' => [ 'BDW',       '8.0',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2014/15', 'UDMW',     'HD Graphics,HD Graphics 5300,HD Graphics 5500,HD Graphics 5600,HD Graphics P5700,,HD Graphics 6000,Iris Graphics 6100,Iris Pro Graphics 6200,Iris Pro Graphics P6300', 'Broadwell', 'Broadwell GT2 ULX [ULX_GT2]' ],
    '1612' => [ 'BDW',       '8.0',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2014/15', 'UDMW',     'HD Graphics,HD Graphics 5300,HD Graphics 5500,HD Graphics 5600,HD Graphics P5700,,HD Graphics 6000,Iris Graphics 6100,Iris Pro Graphics 6200,Iris Pro Graphics P6300', 'Broadwell', 'Broadwell GT2 Halo [GT2]' ],
    '161A' => [ 'BDW',       '8.0',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2014/15', 'UDMW',     'HD Graphics,HD Graphics 5300,HD Graphics 5500,HD Graphics 5600,HD Graphics P5700,,HD Graphics 6000,Iris Graphics 6100,Iris Pro Graphics 6200,Iris Pro Graphics P6300', 'Broadwell', 'Broadwell GT2 Server [GT2]' ],
    '161D' => [ 'BDW',       '8.0',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2014/15', 'UDMW',     'HD Graphics,HD Graphics 5300,HD Graphics 5500,HD Graphics 5600,HD Graphics P5700,,HD Graphics 6000,Iris Graphics 6100,Iris Pro Graphics 6200,Iris Pro Graphics P6300', 'Broadwell', 'Broadwell GT2 Workstation [GT2]' ],
    '1626' => [ 'BDW',       '8.0',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2014/15', 'UDMW',     'HD Graphics,HD Graphics 5300,HD Graphics 5500,HD Graphics 5600,HD Graphics P5700,,HD Graphics 6000,Iris Graphics 6100,Iris Pro Graphics 6200,Iris Pro Graphics P6300', 'Broadwell', 'Broadwell ULT [ULT_GT3]' ],
    '162B' => [ 'BDW',       '8.0',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2014/15', 'UDMW',     'HD Graphics,HD Graphics 5300,HD Graphics 5500,HD Graphics 5600,HD Graphics P5700,,HD Graphics 6000,Iris Graphics 6100,Iris Pro Graphics 6200,Iris Pro Graphics P6300', 'Broadwell', 'Broadwell Iris [ULT_GT3]' ],
    '162E' => [ 'BDW',       '8.0',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2014/15', 'UDMW',     'HD Graphics,HD Graphics 5300,HD Graphics 5500,HD Graphics 5600,HD Graphics P5700,,HD Graphics 6000,Iris Graphics 6100,Iris Pro Graphics 6200,Iris Pro Graphics P6300', 'Broadwell', 'Broadwell ULX [ULX_GT3]' ],
    '1622' => [ 'BDW',       '8.0',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2014/15', 'UDMW',     'HD Graphics,HD Graphics 5300,HD Graphics 5500,HD Graphics 5600,HD Graphics P5700,,HD Graphics 6000,Iris Graphics 6100,Iris Pro Graphics 6200,Iris Pro Graphics P6300', 'Broadwell', 'Broadwell ULT [GT3]' ],
    '162A' => [ 'BDW',       '8.0',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2014/15', 'UDMW',     'HD Graphics,HD Graphics 5300,HD Graphics 5500,HD Graphics 5600,HD Graphics P5700,,HD Graphics 6000,Iris Graphics 6100,Iris Pro Graphics 6200,Iris Pro Graphics P6300', 'Broadwell', 'Broadwell Server [GT3]' ],
    '162D' => [ 'BDW',       '8.0',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2014/15', 'UDMW',     'HD Graphics,HD Graphics 5300,HD Graphics 5500,HD Graphics 5600,HD Graphics P5700,,HD Graphics 6000,Iris Graphics 6100,Iris Pro Graphics 6200,Iris Pro Graphics P6300', 'Broadwell', 'Broadwell Workstation [GT3]' ],
    '1636' => [ 'BDW',       '8.0',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2014/15', 'UDMW',     'HD Graphics,HD Graphics 5300,HD Graphics 5500,HD Graphics 5600,HD Graphics P5700,,HD Graphics 6000,Iris Graphics 6100,Iris Pro Graphics 6200,Iris Pro Graphics P6300', 'Broadwell', 'Broadwell ULT [ULT_RSVD]' ],
    '163B' => [ 'BDW',       '8.0',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2014/15', 'UDMW',     'HD Graphics,HD Graphics 5300,HD Graphics 5500,HD Graphics 5600,HD Graphics P5700,,HD Graphics 6000,Iris Graphics 6100,Iris Pro Graphics 6200,Iris Pro Graphics P6300', 'Broadwell', 'Broadwell Iris [ULT_RSVD]' ],
    '163E' => [ 'BDW',       '8.0',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2014/15', 'UDMW',     'HD Graphics,HD Graphics 5300,HD Graphics 5500,HD Graphics 5600,HD Graphics P5700,,HD Graphics 6000,Iris Graphics 6100,Iris Pro Graphics 6200,Iris Pro Graphics P6300', 'Broadwell', 'Broadwell ULX [ULX_RSVD]' ],
    '1632' => [ 'BDW',       '8.0',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2014/15', 'UDMW',     'HD Graphics,HD Graphics 5300,HD Graphics 5500,HD Graphics 5600,HD Graphics P5700,,HD Graphics 6000,Iris Graphics 6100,Iris Pro Graphics 6200,Iris Pro Graphics P6300', 'Broadwell', 'Broadwell ULT [RSVD]' ],
    '163A' => [ 'BDW',       '8.0',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2014/15', 'UDMW',     'HD Graphics,HD Graphics 5300,HD Graphics 5500,HD Graphics 5600,HD Graphics P5700,,HD Graphics 6000,Iris Graphics 6100,Iris Pro Graphics 6200,Iris Pro Graphics P6300', 'Broadwell', 'Broadwell Server [RSVD]' ],
    '163D' => [ 'BDW',       '8.0',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2014/15', 'UDMW',     'HD Graphics,HD Graphics 5300,HD Graphics 5500,HD Graphics 5600,HD Graphics P5700,,HD Graphics 6000,Iris Graphics 6100,Iris Pro Graphics 6200,Iris Pro Graphics P6300', 'Broadwell', 'Broadwell Workstation [RSVD]' ],
    '22B0' => [ 'CHV',       '8.0',    'Yes',    'Yes',    'Yes',    '',       '',       'xx',     '2015/16', 'U',        'HD Graphics,HD Graphics 400,HD Graphics 405', 'Cherry Trail (Braswell, Cherry View)', 'Cherry Trail (Braswell, Cherry View)' ],
    '22B1' => [ 'CHV',       '8.0',    'Yes',    'Yes',    'Yes',    '',       '',       'xx',     '2015/16', 'U',        'HD Graphics,HD Graphics 400,HD Graphics 405', 'Cherry Trail (Braswell, Cherry View)', 'Cherry Trail (Braswell, Cherry View)' ],
    '22B2' => [ 'CHV',       '8.0',    'Yes',    'Yes',    'Yes',    '',       '',       'xx',     '2015/16', 'U',        'HD Graphics,HD Graphics 400,HD Graphics 405', 'Cherry Trail (Braswell, Cherry View)', 'Cherry Trail (Braswell, Cherry View)' ],
    '22B3' => [ 'CHV',       '8.0',    'Yes',    'Yes',    'Yes',    '',       '',       'xx',     '2015/16', 'U',        'HD Graphics,HD Graphics 400,HD Graphics 405', 'Cherry Trail (Braswell, Cherry View)', 'Cherry Trail (Braswell, Cherry View)' ],
    '1906' => [ 'SKL',       '9.0',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2015',  'MDW',      'HD Graphics 510,HD Graphics 515,HD Graphics 520,HD Graphics 530,HD Graphics P530,Iris Graphics 540,Iris Graphics 550,Iris Pro Graphics P555,Iris Pro Graphics 580,Iris Pro Graphics P580', 'Skylake', 'Skylake ULT GT1 [ULT_GT1]' ],
    '190E' => [ 'SKL',       '9.0',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2015',  'MDW',      'HD Graphics 510,HD Graphics 515,HD Graphics 520,HD Graphics 530,HD Graphics P530,Iris Graphics 540,Iris Graphics 550,Iris Pro Graphics P555,Iris Pro Graphics 580,Iris Pro Graphics P580', 'Skylake', 'Skylake ULX GT1 [ULX_GT1]' ],
    '1902' => [ 'SKL',       '9.0',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2015',  'MDW',      'HD Graphics 510,HD Graphics 515,HD Graphics 520,HD Graphics 530,HD Graphics P530,Iris Graphics 540,Iris Graphics 550,Iris Pro Graphics P555,Iris Pro Graphics 580,Iris Pro Graphics P580', 'Skylake', 'Skylake DT  GT1 [GT1]' ],
    '190B' => [ 'SKL',       '9.0',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2015',  'MDW',      'HD Graphics 510,HD Graphics 515,HD Graphics 520,HD Graphics 530,HD Graphics P530,Iris Graphics 540,Iris Graphics 550,Iris Pro Graphics P555,Iris Pro Graphics 580,Iris Pro Graphics P580', 'Skylake', 'Skylake Halo GT1 [GT1]' ],
    '190A' => [ 'SKL',       '9.0',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2015',  'MDW',      'HD Graphics 510,HD Graphics 515,HD Graphics 520,HD Graphics 530,HD Graphics P530,Iris Graphics 540,Iris Graphics 550,Iris Pro Graphics P555,Iris Pro Graphics 580,Iris Pro Graphics P580', 'Skylake', 'Skylake SRV GT1 [GT1]' ],
    '1916' => [ 'SKL',       '9.0',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2015',  'MDW',      'HD Graphics 510,HD Graphics 515,HD Graphics 520,HD Graphics 530,HD Graphics P530,Iris Graphics 540,Iris Graphics 550,Iris Pro Graphics P555,Iris Pro Graphics 580,Iris Pro Graphics P580', 'Skylake', 'Skylake ULT GT2 [ULT_GT2]' ],
    '1921' => [ 'SKL',       '9.0',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2015',  'MDW',      'HD Graphics 510,HD Graphics 515,HD Graphics 520,HD Graphics 530,HD Graphics P530,Iris Graphics 540,Iris Graphics 550,Iris Pro Graphics P555,Iris Pro Graphics 580,Iris Pro Graphics P580', 'Skylake', 'Skylake ULT GT2F [ULT_GT2]' ],
    '191E' => [ 'SKL',       '9.0',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2015',  'MDW',      'HD Graphics 510,HD Graphics 515,HD Graphics 520,HD Graphics 530,HD Graphics P530,Iris Graphics 540,Iris Graphics 550,Iris Pro Graphics P555,Iris Pro Graphics 580,Iris Pro Graphics P580', 'Skylake', 'Skylake ULX GT2 [ULX_GT2]' ],
    '1912' => [ 'SKL',       '9.0',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2015',  'MDW',      'HD Graphics 510,HD Graphics 515,HD Graphics 520,HD Graphics 530,HD Graphics P530,Iris Graphics 540,Iris Graphics 550,Iris Pro Graphics P555,Iris Pro Graphics 580,Iris Pro Graphics P580', 'Skylake', 'Skylake DT  GT2 [GT2]' ],
    '191B' => [ 'SKL',       '9.0',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2015',  'MDW',      'HD Graphics 510,HD Graphics 515,HD Graphics 520,HD Graphics 530,HD Graphics P530,Iris Graphics 540,Iris Graphics 550,Iris Pro Graphics P555,Iris Pro Graphics 580,Iris Pro Graphics P580', 'Skylake', 'Skylake Halo GT2 [GT2]' ],
    '191A' => [ 'SKL',       '9.0',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2015',  'MDW',      'HD Graphics 510,HD Graphics 515,HD Graphics 520,HD Graphics 530,HD Graphics P530,Iris Graphics 540,Iris Graphics 550,Iris Pro Graphics P555,Iris Pro Graphics 580,Iris Pro Graphics P580', 'Skylake', 'Skylake SRV GT2 [GT2]' ],
    '191D' => [ 'SKL',       '9.0',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2015',  'MDW',      'HD Graphics 510,HD Graphics 515,HD Graphics 520,HD Graphics 530,HD Graphics P530,Iris Graphics 540,Iris Graphics 550,Iris Pro Graphics P555,Iris Pro Graphics 580,Iris Pro Graphics P580', 'Skylake', 'Skylake WKS GT2 [GT2]' ],
    '1926' => [ 'SKL',       '9.0',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2015',  'MDW',      'HD Graphics 510,HD Graphics 515,HD Graphics 520,HD Graphics 530,HD Graphics P530,Iris Graphics 540,Iris Graphics 550,Iris Pro Graphics P555,Iris Pro Graphics 580,Iris Pro Graphics P580', 'Skylake', 'Skylake ULT GT3 [ULT_GT3]' ],
    '1923' => [ 'SKL',       '9.0',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2015',  'MDW',      'HD Graphics 510,HD Graphics 515,HD Graphics 520,HD Graphics 530,HD Graphics P530,Iris Graphics 540,Iris Graphics 550,Iris Pro Graphics P555,Iris Pro Graphics 580,Iris Pro Graphics P580', 'Skylake', 'Skylake ULT GT3 [GT3]' ],
    '1927' => [ 'SKL',       '9.0',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2015',  'MDW',      'HD Graphics 510,HD Graphics 515,HD Graphics 520,HD Graphics 530,HD Graphics P530,Iris Graphics 540,Iris Graphics 550,Iris Pro Graphics P555,Iris Pro Graphics 580,Iris Pro Graphics P580', 'Skylake', 'Skylake ULT GT3 [GT3]' ],
    '192B' => [ 'SKL',       '9.0',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2015',  'MDW',      'HD Graphics 510,HD Graphics 515,HD Graphics 520,HD Graphics 530,HD Graphics P530,Iris Graphics 540,Iris Graphics 550,Iris Pro Graphics P555,Iris Pro Graphics 580,Iris Pro Graphics P580', 'Skylake', 'Skylake Halo GT3 [GT3]' ],
    '192D' => [ 'SKL',       '9.0',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2015',  'MDW',      'HD Graphics 510,HD Graphics 515,HD Graphics 520,HD Graphics 530,HD Graphics P530,Iris Graphics 540,Iris Graphics 550,Iris Pro Graphics P555,Iris Pro Graphics 580,Iris Pro Graphics P580', 'Skylake', 'Skylake SRV GT3 [GT3]' ],
    '1932' => [ 'SKL',       '9.0',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2015',  'MDW',      'HD Graphics 510,HD Graphics 515,HD Graphics 520,HD Graphics 530,HD Graphics P530,Iris Graphics 540,Iris Graphics 550,Iris Pro Graphics P555,Iris Pro Graphics 580,Iris Pro Graphics P580', 'Skylake', 'Skylake DT GT4 [GT4]' ],
    '193B' => [ 'SKL',       '9.0',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2015',  'MDW',      'HD Graphics 510,HD Graphics 515,HD Graphics 520,HD Graphics 530,HD Graphics P530,Iris Graphics 540,Iris Graphics 550,Iris Pro Graphics P555,Iris Pro Graphics 580,Iris Pro Graphics P580', 'Skylake', 'Skylake Halo GT4 [GT4]' ],
    '193D' => [ 'SKL',       '9.0',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2015',  'MDW',      'HD Graphics 510,HD Graphics 515,HD Graphics 520,HD Graphics 530,HD Graphics P530,Iris Graphics 540,Iris Graphics 550,Iris Pro Graphics P555,Iris Pro Graphics 580,Iris Pro Graphics P580', 'Skylake', 'Skylake WKS GT4 [GT4]' ],
    '192A' => [ 'SKL',       '9.0',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2015',  'MDW',      'HD Graphics 510,HD Graphics 515,HD Graphics 520,HD Graphics 530,HD Graphics P530,Iris Graphics 540,Iris Graphics 550,Iris Pro Graphics P555,Iris Pro Graphics 580,Iris Pro Graphics P580', 'Skylake', 'Skylake SRV GT4 [GT4]' ],
    '193A' => [ 'SKL',       '9.0',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2015',  'MDW',      'HD Graphics 510,HD Graphics 515,HD Graphics 520,HD Graphics 530,HD Graphics P530,Iris Graphics 540,Iris Graphics 550,Iris Pro Graphics P555,Iris Pro Graphics 580,Iris Pro Graphics P580', 'Skylake', 'Skylake SRV GT4e [GT4]' ],
    '0A84' => [ 'BXT',       '9.0',    'Yes',    'Yes',    'Yes',    '',       '',       'xx',     '2016',  'MEDP',     'HD Graphics 500,HD Graphics 505', 'Broxton (Goldmont Apollo Lake)', 'Broxton (Goldmont Apollo Lake)' ],
    '1A84' => [ 'BXT',       '9.0',    'Yes',    'Yes',    'Yes',    '',       '',       'xx',     '2016',  'MEDP',     'HD Graphics 500,HD Graphics 505', 'Broxton (Goldmont Apollo Lake)', 'Broxton (Goldmont Apollo Lake)' ],
    '1A85' => [ 'BXT',       '9.0',    'Yes',    'Yes',    'Yes',    '',       '',       'xx',     '2016',  'MEDP',     'HD Graphics 500,HD Graphics 505', 'Broxton (Goldmont Apollo Lake)', 'Broxton (Goldmont Apollo Lake)' ],
    '5A84' => [ 'BXT',       '9.0',    'Yes',    'Yes',    'Yes',    '',       '',       'xx',     '2016',  'MEDP',     'HD Graphics 500,HD Graphics 505', 'Broxton (Goldmont Apollo Lake)', 'Broxton (Goldmont Apollo Lake) APL HD Graphics 505' ],
    '5A85' => [ 'BXT',       '9.0',    'Yes',    'Yes',    'Yes',    '',       '',       'xx',     '2016',  'MEDP',     'HD Graphics 500,HD Graphics 505', 'Broxton (Goldmont Apollo Lake)', 'Broxton (Goldmont Apollo Lake) APL HD Graphics 500' ],
    '3184' => [ 'GLK',       '9.5',    'Yes? Need confirmation', 'Yes',    'Yes',    '',       '',       'xx',     '2017',  'MDP',      'UHD Graphics 600,UHD Graphics 605', 'Gemini Lake (Goldmont Plus, Gemini Lake Refresh)', 'Gemini Lake (Goldmont Plus, Gemini Lake Refresh)' ],
    '3185' => [ 'GLK',       '9.5',    'Yes? Need confirmation', 'Yes',    'Yes',    '',       '',       'xx',     '2017',  'MDP',      'UHD Graphics 600,UHD Graphics 605', 'Gemini Lake (Goldmont Plus, Gemini Lake Refresh)', 'Gemini Lake (Goldmont Plus, Gemini Lake Refresh)' ],
    '5906' => [ 'KBL',       '9.5',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2017',  'MDW',      'HD Graphics 610,HD Graphics 615,HD Graphics 620,UHD Graphics 620,HD Graphics 630,HD Graphics P630,Iris Plus Graphics 640,Iris Plus Graphics 650,', 'Kaby Lake', 'Kaby Lake ULT GT1 [ULT_GT1]' ],
    '5913' => [ 'KBL',       '9.5',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2017',  'MDW',      'HD Graphics 610,HD Graphics 615,HD Graphics 620,UHD Graphics 620,HD Graphics 630,HD Graphics P630,Iris Plus Graphics 640,Iris Plus Graphics 650,', 'Kaby Lake', 'Kaby Lake ULT GT1.5 [ULT_GT1]' ],
    '590E' => [ 'KBL',       '9.5',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2017',  'MDW',      'HD Graphics 610,HD Graphics 615,HD Graphics 620,UHD Graphics 620,HD Graphics 630,HD Graphics P630,Iris Plus Graphics 640,Iris Plus Graphics 650,', 'Kaby Lake', 'Kaby Lake ULX GT1 [ULX_GT1]' ],
    '5915' => [ 'KBL',       '9.5',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2017',  'MDW',      'HD Graphics 610,HD Graphics 615,HD Graphics 620,UHD Graphics 620,HD Graphics 630,HD Graphics P630,Iris Plus Graphics 640,Iris Plus Graphics 650,', 'Kaby Lake', 'Kaby Lake ULX GT1.5 [ULX_GT1]' ],
    '5902' => [ 'KBL',       '9.5',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2017',  'MDW',      'HD Graphics 610,HD Graphics 615,HD Graphics 620,UHD Graphics 620,HD Graphics 630,HD Graphics P630,Iris Plus Graphics 640,Iris Plus Graphics 650,', 'Kaby Lake', 'Kaby Lake DT  GT1 [GT1]' ],
    '5908' => [ 'KBL',       '9.5',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2017',  'MDW',      'HD Graphics 610,HD Graphics 615,HD Graphics 620,UHD Graphics 620,HD Graphics 630,HD Graphics P630,Iris Plus Graphics 640,Iris Plus Graphics 650,', 'Kaby Lake', 'Kaby Lake Halo GT1 [GT1]' ],
    '590B' => [ 'KBL',       '9.5',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2017',  'MDW',      'HD Graphics 610,HD Graphics 615,HD Graphics 620,UHD Graphics 620,HD Graphics 630,HD Graphics P630,Iris Plus Graphics 640,Iris Plus Graphics 650,', 'Kaby Lake', 'Kaby Lake Halo GT1 [GT1]' ],
    '590A' => [ 'KBL',       '9.5',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2017',  'MDW',      'HD Graphics 610,HD Graphics 615,HD Graphics 620,UHD Graphics 620,HD Graphics 630,HD Graphics P630,Iris Plus Graphics 640,Iris Plus Graphics 650,', 'Kaby Lake', 'Kaby Lake SRV GT1 [GT1]' ],
    '5916' => [ 'KBL',       '9.5',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2017',  'MDW',      'HD Graphics 610,HD Graphics 615,HD Graphics 620,UHD Graphics 620,HD Graphics 630,HD Graphics P630,Iris Plus Graphics 640,Iris Plus Graphics 650,', 'Kaby Lake', 'Kaby Lake ULT GT2 [ULT_GT2]' ],
    '5921' => [ 'KBL',       '9.5',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2017',  'MDW',      'HD Graphics 610,HD Graphics 615,HD Graphics 620,UHD Graphics 620,HD Graphics 630,HD Graphics P630,Iris Plus Graphics 640,Iris Plus Graphics 650,', 'Kaby Lake', 'Kaby Lake ULT GT2F [ULT_GT2]' ],
    '591E' => [ 'KBL',       '9.5',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2017',  'MDW',      'HD Graphics 610,HD Graphics 615,HD Graphics 620,UHD Graphics 620,HD Graphics 630,HD Graphics P630,Iris Plus Graphics 640,Iris Plus Graphics 650,', 'Kaby Lake', 'Kaby Lake ULX GT2 [ULX_GT2]' ],
    '5917' => [ 'KBL',       '9.5',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2017',  'MDW',      'HD Graphics 610,HD Graphics 615,HD Graphics 620,UHD Graphics 620,HD Graphics 630,HD Graphics P630,Iris Plus Graphics 640,Iris Plus Graphics 650,', 'Kaby Lake', 'Kaby Lake Mobile GT2 [GT2]' ],
    '5912' => [ 'KBL',       '9.5',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2017',  'MDW',      'HD Graphics 610,HD Graphics 615,HD Graphics 620,UHD Graphics 620,HD Graphics 630,HD Graphics P630,Iris Plus Graphics 640,Iris Plus Graphics 650,', 'Kaby Lake', 'Kaby Lake DT  GT2 [GT2]' ],
    '591B' => [ 'KBL',       '9.5',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2017',  'MDW',      'HD Graphics 610,HD Graphics 615,HD Graphics 620,UHD Graphics 620,HD Graphics 630,HD Graphics P630,Iris Plus Graphics 640,Iris Plus Graphics 650,', 'Kaby Lake', 'Kaby Lake Halo GT2 [GT2]' ],
    '591A' => [ 'KBL',       '9.5',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2017',  'MDW',      'HD Graphics 610,HD Graphics 615,HD Graphics 620,UHD Graphics 620,HD Graphics 630,HD Graphics P630,Iris Plus Graphics 640,Iris Plus Graphics 650,', 'Kaby Lake', 'Kaby Lake SRV GT2 [GT2]' ],
    '591D' => [ 'KBL',       '9.5',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2017',  'MDW',      'HD Graphics 610,HD Graphics 615,HD Graphics 620,UHD Graphics 620,HD Graphics 630,HD Graphics P630,Iris Plus Graphics 640,Iris Plus Graphics 650,', 'Kaby Lake', 'Kaby Lake WKS GT2 [GT2]' ],
    '5926' => [ 'KBL',       '9.5',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2017',  'MDW',      'HD Graphics 610,HD Graphics 615,HD Graphics 620,UHD Graphics 620,HD Graphics 630,HD Graphics P630,Iris Plus Graphics 640,Iris Plus Graphics 650,', 'Kaby Lake', 'Kaby Lake ULT GT3 [ULT_GT3]' ],
    '5923' => [ 'KBL',       '9.5',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2017',  'MDW',      'HD Graphics 610,HD Graphics 615,HD Graphics 620,UHD Graphics 620,HD Graphics 630,HD Graphics P630,Iris Plus Graphics 640,Iris Plus Graphics 650,', 'Kaby Lake', 'Kaby Lake ULT GT3 [GT3]' ],
    '5927' => [ 'KBL',       '9.5',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2017',  'MDW',      'HD Graphics 610,HD Graphics 615,HD Graphics 620,UHD Graphics 620,HD Graphics 630,HD Graphics P630,Iris Plus Graphics 640,Iris Plus Graphics 650,', 'Kaby Lake', 'Kaby Lake ULT GT3 [GT3]' ],
    '593B' => [ 'KBL',       '9.5',    'Yes',    'Yes',    'Yes',    '',       '',       '?',      '2017',  'MDW',      'HD Graphics 610,HD Graphics 615,HD Graphics 620,UHD Graphics 620,HD Graphics 630,HD Graphics P630,Iris Plus Graphics 640,Iris Plus Graphics 650,', 'Kaby Lake', 'Kaby Lake Halo GT4 [GT4]' ],
    ### AML/KBL Y GT2 
    '591C' => [ 'AML',       '9.5',    'Yes? Need confirmation', 'Yes',    'Yes',    '',       '',       '10',     '2019',  '',         '',      'Amber Lake Y', 'Amber Lake Y ULX GT2 [KBL_GT2]' ],
    '87C0' => [ 'AML',       '9.5',    'Yes? Need confirmation', 'Yes',    'Yes',    '',       '',       '10',     '2019',  '',         '',      'Amber Lake Y', 'Amber Lake Y ULX GT2 [KBL_GT2]' ],
    ### AML/CFL Y GT2 
    '87CA' => [ 'AML',       '9.5',    'Yes? Need confirmation', 'Yes',    'Yes',    '',       '',       '10',     '2019',  '',         '',      'Amber Lake Y', 'Amber Lake Y CFL_GT2' ],
    ### CML GT1 
    '9BA5' => [ 'CML',       '9.5',    'Yes? Need confirmation', 'Yes',    'Yes',    '',       '',       '10',     '2020?', '',         '',      'Comet Lake', 'Comet Lake GT1' ],
    '9BA8' => [ 'CML',       '9.5',    'Yes? Need confirmation', 'Yes',    'Yes',    '',       '',       '10',     '2020?', '',         '',      'Comet Lake', 'Comet Lake GT1' ],
    '9BA4' => [ 'CML',       '9.5',    'Yes? Need confirmation', 'Yes',    'Yes',    '',       '',       '10',     '2020?', '',         '',      'Comet Lake', 'Comet Lake GT1' ],
    '9BA2' => [ 'CML',       '9.5',    'Yes? Need confirmation', 'Yes',    'Yes',    '',       '',       '10',     '2020?', '',         '',      'Comet Lake', 'Comet Lake GT1' ],
    '9B21' => [ 'CML',       '9.5',    'Yes? Need confirmation', 'Yes',    'Yes',    '',       '',       '10',     '2020?', '',         '',      'Comet Lake', 'Comet Lake U_GT1' ],
    '9BAA' => [ 'CML',       '9.5',    'Yes? Need confirmation', 'Yes',    'Yes',    '',       '',       '10',     '2020?', '',         '',      'Comet Lake', 'Comet Lake U_GT1' ],
    '9BAC' => [ 'CML',       '9.5',    'Yes? Need confirmation', 'Yes',    'Yes',    '',       '',       '10',     '2020?', '',         '',      'Comet Lake', 'Comet Lake U_GT1' ],
    ### CML GT2 
    '9BC5' => [ 'CML',       '9.5',    'Yes? Need confirmation', 'Yes',    'Yes',    '',       '',       '10',     '2020?', '',         '',      'Comet Lake', 'Comet Lake GT2' ],
    '9BC8' => [ 'CML',       '9.5',    'Yes? Need confirmation', 'Yes',    'Yes',    '',       '',       '10',     '2020?', '',         '',      'Comet Lake', 'Comet Lake GT2' ],
    '9BC4' => [ 'CML',       '9.5',    'Yes? Need confirmation', 'Yes',    'Yes',    '',       '',       '10',     '2020?', '',         '',      'Comet Lake', 'Comet Lake GT2' ],
    '9BC2' => [ 'CML',       '9.5',    'Yes? Need confirmation', 'Yes',    'Yes',    '',       '',       '10',     '2020?', '',         '',      'Comet Lake', 'Comet Lake GT2' ],
    '9BC6' => [ 'CML',       '9.5',    'Yes? Need confirmation', 'Yes',    'Yes',    '',       '',       '10',     '2020?', '',         '',      'Comet Lake', 'Comet Lake GT2' ],
    '9BE6' => [ 'CML',       '9.5',    'Yes? Need confirmation', 'Yes',    'Yes',    '',       '',       '10',     '2020?', '',         '',      'Comet Lake', 'Comet Lake GT2' ],
    '9BF6' => [ 'CML',       '9.5',    'Yes? Need confirmation', 'Yes',    'Yes',    '',       '',       '10',     '2020?', '',         '',      'Comet Lake', 'Comet Lake GT2' ],
    '9B41' => [ 'CML',       '9.5',    'Yes? Need confirmation', 'Yes',    'Yes',    '',       '',       '10',     '2020?', '',         '',      'Comet Lake', 'Comet Lake U_GT2' ],
    '9BCA' => [ 'CML',       '9.5',    'Yes? Need confirmation', 'Yes',    'Yes',    '',       '',       '10',     '2020?', '',         '',      'Comet Lake', 'Comet Lake U_GT2' ],
    '9BCC' => [ 'CML',       '9.5',    'Yes? Need confirmation', 'Yes',    'Yes',    '',       '',       '10',     '2020?', '',         '',      'Comet Lake', 'Comet Lake U_GT2' ],
    ### CFL S 
    '3E90' => [ 'CFL',       '9.5',    'Yes',    'Yes',    'Yes',    '',       '',       '8',      '2018',  'DMW',      'UHD Graphics 610,UHD Graphics 630,Iris Plus Graphics 645,Iris Plus Graphics 655', 'Coffee Lake', 'Coffee Lake SRV GT1 [S_GT1]' ],
    '3E93' => [ 'CFL',       '9.5',    'Yes',    'Yes',    'Yes',    '',       '',       '8',      '2018',  'DMW',      'UHD Graphics 610,UHD Graphics 630,Iris Plus Graphics 645,Iris Plus Graphics 655', 'Coffee Lake', 'Coffee Lake SRV GT1 [S_GT1]' ],
    '3E99' => [ 'CFL',       '9.5',    'Yes',    'Yes',    'Yes',    '',       '',       '8',      '2018',  'DMW',      'UHD Graphics 610,UHD Graphics 630,Iris Plus Graphics 645,Iris Plus Graphics 655', 'Coffee Lake', 'Coffee Lake SRV GT1 [S_GT1]' ],
    '3E91' => [ 'CFL',       '9.5',    'Yes',    'Yes',    'Yes',    '',       '',       '8',      '2018',  'DMW',      'UHD Graphics 610,UHD Graphics 630,Iris Plus Graphics 645,Iris Plus Graphics 655', 'Coffee Lake', 'Coffee Lake SRV GT2 [S_GT2]' ],
    '3E92' => [ 'CFL',       '9.5',    'Yes',    'Yes',    'Yes',    '',       '',       '8',      '2018',  'DMW',      'UHD Graphics 610,UHD Graphics 630,Iris Plus Graphics 645,Iris Plus Graphics 655', 'Coffee Lake', 'Coffee Lake SRV GT2 [S_GT2]' ],
    '3E96' => [ 'CFL',       '9.5',    'Yes',    'Yes',    'Yes',    '',       '',       '8',      '2018',  'DMW',      'UHD Graphics 610,UHD Graphics 630,Iris Plus Graphics 645,Iris Plus Graphics 655', 'Coffee Lake', 'Coffee Lake SRV GT2 [S_GT2]' ],
    '3E98' => [ 'CFL',       '9.5',    'Yes',    'Yes',    'Yes',    '',       '',       '8',      '2018',  'DMW',      'UHD Graphics 610,UHD Graphics 630,Iris Plus Graphics 645,Iris Plus Graphics 655', 'Coffee Lake', 'Coffee Lake SRV GT2 [S_GT2]' ],
    '3E9A' => [ 'CFL',       '9.5',    'Yes',    'Yes',    'Yes',    '',       '',       '8',      '2018',  'DMW',      'UHD Graphics 610,UHD Graphics 630,Iris Plus Graphics 645,Iris Plus Graphics 655', 'Coffee Lake', 'Coffee Lake SRV GT2 [S_GT2]' ],
    ### CFL H 
    '3E9C' => [ 'CFL',       '9.5',    'Yes',    'Yes',    'Yes',    '',       '',       '8',      '2018',  'DMW',      'UHD Graphics 610,UHD Graphics 630,Iris Plus Graphics 645,Iris Plus Graphics 655', 'Coffee Lake', 'Coffee Lake H_GT1' ],
    '3E9B' => [ 'CFL',       '9.5',    'Yes',    'Yes',    'Yes',    '',       '',       '8',      '2018',  'DMW',      'UHD Graphics 610,UHD Graphics 630,Iris Plus Graphics 645,Iris Plus Graphics 655', 'Coffee Lake', 'Coffee Lake Halo GT2 [H_GT2]' ],
    '3E94' => [ 'CFL',       '9.5',    'Yes',    'Yes',    'Yes',    '',       '',       '8',      '2018',  'DMW',      'UHD Graphics 610,UHD Graphics 630,Iris Plus Graphics 645,Iris Plus Graphics 655', 'Coffee Lake', 'Coffee Lake Halo GT2 [H_GT2]' ],
    ### CFL U GT2 
    '3EA9' => [ 'CFL',       '9.5',    'Yes',    'Yes',    'Yes',    '',       '',       '8',      '2018',  'DMW',      'UHD Graphics 610,UHD Graphics 630,Iris Plus Graphics 645,Iris Plus Graphics 655', 'Coffee Lake', 'Coffee Lake U_GT2' ],
    ### CFL U GT3 
    '3EA5' => [ 'CFL',       '9.5',    'Yes',    'Yes',    'Yes',    '',       '',       '8',      '2018',  'DMW',      'UHD Graphics 610,UHD Graphics 630,Iris Plus Graphics 645,Iris Plus Graphics 655', 'Coffee Lake', 'Coffee Lake ULT GT3 [U_GT3]' ],
    '3EA6' => [ 'CFL',       '9.5',    'Yes',    'Yes',    'Yes',    '',       '',       '8',      '2018',  'DMW',      'UHD Graphics 610,UHD Graphics 630,Iris Plus Graphics 645,Iris Plus Graphics 655', 'Coffee Lake', 'Coffee Lake ULT GT3 [U_GT3]' ],
    '3EA7' => [ 'CFL',       '9.5',    'Yes',    'Yes',    'Yes',    '',       '',       '8',      '2018',  'DMW',      'UHD Graphics 610,UHD Graphics 630,Iris Plus Graphics 645,Iris Plus Graphics 655', 'Coffee Lake', 'Coffee Lake ULT GT3 [U_GT3]' ],
    '3EA8' => [ 'CFL',       '9.5',    'Yes',    'Yes',    'Yes',    '',       '',       '8',      '2018',  'DMW',      'UHD Graphics 610,UHD Graphics 630,Iris Plus Graphics 645,Iris Plus Graphics 655', 'Coffee Lake', 'Coffee Lake ULT GT3 [U_GT3]' ],
    ### WHL/CFL U GT1 
    '3EA1' => [ 'WHL',       '9.5',    'Yes',    'Yes',    'Yes',    '',       '',       '8',      '2018',  '',         '',      'Whiskey Lake', 'Whiskey Lake U_GT1' ],
    '3EA4' => [ 'WHL',       '9.5',    'Yes',    'Yes',    'Yes',    '',       '',       '8',      '2018',  '',         '',      'Whiskey Lake', 'Whiskey Lake U_GT1' ],
    ### WHL/CFL U GT2 
    '3EA0' => [ 'WHL',       '9.5',    'Yes',    'Yes',    'Yes',    '',       '',       '8',      '2018',  '',         '',      'Whiskey Lake', 'Whiskey Lake U_GT2' ],
    '3EA3' => [ 'WHL',       '9.5',    'Yes',    'Yes',    'Yes',    '',       '',       '8',      '2018',  '',         '',      'Whiskey Lake', 'Whiskey Lake U_GT2' ],
    ### WHL/CFL U GT3 
    '3EA2' => [ 'WHL',       '9.5',    'Yes',    'Yes',    'Yes',    '',       '',       '8',      '2018',  '',         '',      'Whiskey Lake', 'Whiskey Lake U_GT3' ],
    ### CNL 
    '5A54' => [ 'CNL',       '10.0',   'Yes? Need confirmation', 'Yes',    'Yes',    '',       '',       '8',      '2018?', '',         '',      'Cannon Lake', 'Cannon Lake PORT_F' ],
    '5A5C' => [ 'CNL',       '10.0',   'Yes? Need confirmation', 'Yes',    'Yes',    '',       '',       '8',      '2018?', '',         '',      'Cannon Lake', 'Cannon Lake PORT_F' ],
    '5A44' => [ 'CNL',       '10.0',   'Yes? Need confirmation', 'Yes',    'Yes',    '',       '',       '8',      '2018?', '',         '',      'Cannon Lake', 'Cannon Lake PORT_F' ],
    '5A4C' => [ 'CNL',       '10.0',   'Yes? Need confirmation', 'Yes',    'Yes',    '',       '',       '8',      '2018?', '',         '',      'Cannon Lake', 'Cannon Lake PORT_F' ],
    '5A51' => [ 'CNL',       '10.0',   'Yes? Need confirmation', 'Yes',    'Yes',    '',       '',       '8',      '2018?', '',         '',      'Cannon Lake', 'Cannon Lake' ],
    '5A59' => [ 'CNL',       '10.0',   'Yes? Need confirmation', 'Yes',    'Yes',    '',       '',       '8',      '2018?', '',         '',      'Cannon Lake', 'Cannon Lake' ],
    '5A41' => [ 'CNL',       '10.0',   'Yes? Need confirmation', 'Yes',    'Yes',    '',       '',       '8',      '2018?', '',         '',      'Cannon Lake', 'Cannon Lake' ],
    '5A49' => [ 'CNL',       '10.0',   'Yes? Need confirmation', 'Yes',    'Yes',    '',       '',       '8',      '2018?', '',         '',      'Cannon Lake', 'Cannon Lake' ],
    '5A52' => [ 'CNL',       '10.0',   'Yes? Need confirmation', 'Yes',    'Yes',    '',       '',       '8',      '2018?', '',         '',      'Cannon Lake', 'Cannon Lake' ],
    '5A5A' => [ 'CNL',       '10.0',   'Yes? Need confirmation', 'Yes',    'Yes',    '',       '',       '8',      '2018?', '',         '',      'Cannon Lake', 'Cannon Lake' ],
    '5A42' => [ 'CNL',       '10.0',   'Yes? Need confirmation', 'Yes',    'Yes',    '',       '',       '8',      '2018?', '',         '',      'Cannon Lake', 'Cannon Lake' ],
    '5A4A' => [ 'CNL',       '10.0',   'Yes? Need confirmation', 'Yes',    'Yes',    '',       '',       '8',      '2018?', '',         '',      'Cannon Lake', 'Cannon Lake' ],
    '5A50' => [ 'CNL',       '10.0',   'Yes? Need confirmation', 'Yes',    'Yes',    '',       '',       '8',      '2018?', '',         '',      'Cannon Lake', 'Cannon Lake' ],
    '5A40' => [ 'CNL',       '10.0',   'Yes? Need confirmation', 'Yes',    'Yes',    '',       '',       '8',      '2018?', '',         '',      'Cannon Lake', 'Cannon Lake' ],
    ### ICL 
    '8A50' => [ 'ICL',       '11.0',   'No',     'Yes? Need confirmation', 'Yes',    '',       '',       '10',     '2019',  'M',        'Iris Plus Graphics 655,Iris Plus Graphics', 'Ice Lake', 'Ice Lake PORT_F' ],
    '8A5C' => [ 'ICL',       '11.0',   'No',     'Yes? Need confirmation', 'Yes',    '',       '',       '10',     '2019',  'M',        'Iris Plus Graphics 655,Iris Plus Graphics', 'Ice Lake', 'Ice Lake PORT_F' ],
    '8A59' => [ 'ICL',       '11.0',   'No',     'Yes? Need confirmation', 'Yes',    '',       '',       '10',     '2019',  'M',        'Iris Plus Graphics 655,Iris Plus Graphics', 'Ice Lake', 'Ice Lake PORT_F' ],
    '8A58' => [ 'ICL',       '11.0',   'No',     'Yes? Need confirmation', 'Yes',    '',       '',       '10',     '2019',  'M',        'Iris Plus Graphics 655,Iris Plus Graphics', 'Ice Lake', 'Ice Lake PORT_F' ],
    '8A52' => [ 'ICL',       '11.0',   'No',     'Yes? Need confirmation', 'Yes',    '',       '',       '10',     '2019',  'M',        'Iris Plus Graphics 655,Iris Plus Graphics', 'Ice Lake', 'Ice Lake PORT_F' ],
    '8A5A' => [ 'ICL',       '11.0',   'No',     'Yes? Need confirmation', 'Yes',    '',       '',       '10',     '2019',  'M',        'Iris Plus Graphics 655,Iris Plus Graphics', 'Ice Lake', 'Ice Lake PORT_F' ],
    '8A5B' => [ 'ICL',       '11.0',   'No',     'Yes? Need confirmation', 'Yes',    '',       '',       '10',     '2019',  'M',        'Iris Plus Graphics 655,Iris Plus Graphics', 'Ice Lake', 'Ice Lake PORT_F' ],
    '8A57' => [ 'ICL',       '11.0',   'No',     'Yes? Need confirmation', 'Yes',    '',       '',       '10',     '2019',  'M',        'Iris Plus Graphics 655,Iris Plus Graphics', 'Ice Lake', 'Ice Lake PORT_F' ],
    '8A56' => [ 'ICL',       '11.0',   'No',     'Yes? Need confirmation', 'Yes',    '',       '',       '10',     '2019',  'M',        'Iris Plus Graphics 655,Iris Plus Graphics', 'Ice Lake', 'Ice Lake PORT_F' ],
    '8A71' => [ 'ICL',       '11.0',   'No',     'Yes? Need confirmation', 'Yes',    '',       '',       '10',     '2019',  'M',        'Iris Plus Graphics 655,Iris Plus Graphics', 'Ice Lake', 'Ice Lake PORT_F' ],
    '8A70' => [ 'ICL',       '11.0',   'No',     'Yes? Need confirmation', 'Yes',    '',       '',       '10',     '2019',  'M',        'Iris Plus Graphics 655,Iris Plus Graphics', 'Ice Lake', 'Ice Lake PORT_F' ],
    '8A53' => [ 'ICL',       '11.0',   'No',     'Yes? Need confirmation', 'Yes',    '',       '',       '10',     '2019',  'M',        'Iris Plus Graphics 655,Iris Plus Graphics', 'Ice Lake', 'Ice Lake PORT_F' ],
    '8A54' => [ 'ICL',       '11.0',   'No',     'Yes? Need confirmation', 'Yes',    '',       '',       '10',     '2019',  'M',        'Iris Plus Graphics 655,Iris Plus Graphics', 'Ice Lake', 'Ice Lake PORT_F' ],
    '8A51' => [ 'ICL',       '11.0',   'No',     'Yes? Need confirmation', 'Yes',    '',       '',       '10',     '2019',  'M',        'Iris Plus Graphics 655,Iris Plus Graphics', 'Ice Lake', 'Ice Lake' ],
    '8A5D' => [ 'ICL',       '11.0',   'No',     'Yes? Need confirmation', 'Yes',    '',       '',       '10',     '2019',  'M',        'Iris Plus Graphics 655,Iris Plus Graphics', 'Ice Lake', 'Ice Lake' ],
    ### EHL/JSL 
    '4500' => [ 'EHL',       '11.0',   'No',     'Yes? Need confirmation', 'Yes',    '',       '',       '11',     '2020?', '',         '',      'Elkhart Lake', 'Elkhart Lake' ],
    '4571' => [ 'EHL',       '11.0',   'No',     'Yes? Need confirmation', 'Yes',    '',       '',       '11',     '2020?', '',         '',      'Elkhart Lake', 'Elkhart Lake' ],
    '4551' => [ 'EHL',       '11.0',   'No',     'Yes? Need confirmation', 'Yes',    '',       '',       '11',     '2020?', '',         '',      'Elkhart Lake', 'Elkhart Lake' ],
    '4541' => [ 'EHL',       '11.0',   'No',     'Yes? Need confirmation', 'Yes',    '',       '',       '11',     '2020?', '',         '',      'Elkhart Lake', 'Elkhart Lake' ],
    '4E71' => [ 'EHL',       '11.0',   'No',     'Yes? Need confirmation', 'Yes',    '',       '',       '11',     '2020?', '',         '',      'Elkhart Lake', 'Elkhart Lake' ],
    '4E61' => [ 'EHL',       '11.0',   'No',     'Yes? Need confirmation', 'Yes',    '',       '',       '11',     '2020?', '',         '',      'Elkhart Lake', 'Elkhart Lake' ],
    '4E51' => [ 'EHL',       '11.0',   'No',     'Yes? Need confirmation', 'Yes',    '',       '',       '11',     '2020?', '',         '',      'Elkhart Lake', 'Elkhart Lake' ],
    ### TGL 
    '9A49' => [ 'TGL',       '12.0',   'No',     'No',     'Yes',    '',       '',       '12',     '2020',  'M',        'Iris Xe Graphics', 'Tiger Lake', 'Tiger Lake' ],
    '9A40' => [ 'TGL',       '12.0',   'No',     'No',     'Yes',    '',       '',       '12',     '2020',  'M',        'Iris Xe Graphics', 'Tiger Lake', 'Tiger Lake' ],
    '9A59' => [ 'TGL',       '12.0',   'No',     'No',     'Yes',    '',       '',       '12',     '2020',  'M',        'Iris Xe Graphics', 'Tiger Lake', 'Tiger Lake' ],
    '9A60' => [ 'TGL',       '12.0',   'No',     'No',     'Yes',    '',       '',       '12',     '2020',  'M',        'Iris Xe Graphics', 'Tiger Lake', 'Tiger Lake' ],
    '9A68' => [ 'TGL',       '12.0',   'No',     'No',     'Yes',    '',       '',       '12',     '2020',  'M',        'Iris Xe Graphics', 'Tiger Lake', 'Tiger Lake' ],
    '9A70' => [ 'TGL',       '12.0',   'No',     'No',     'Yes',    '',       '',       '12',     '2020',  'M',        'Iris Xe Graphics', 'Tiger Lake', 'Tiger Lake' ],
    '9A78' => [ 'TGL',       '12.0',   'No',     'No',     'Yes',    '',       '',       '12',     '2020',  'M',        'Iris Xe Graphics', 'Tiger Lake', 'Tiger Lake' ],
};



    ############################
    # NVIDIA PCI IDS
    
my @nv_legacydrivers = ( '367', '173', '96', '71' );
    
my $pciid_nvidialegacy = {
    '367' => {
        '0FEF' => '+',  '0FF2' => '+',  '11BF' => '+',
        },
    '173' => {
        '00FA' => '-',  '00FB' => '-',  '00FC' => '-',  '00FD' => '-',
        '00FE' => '-',  '0301' => '-',  '0302' => '-',  '0308' => '-',
        '0309' => '-',  '0311' => '-',  '0312' => '-',  '0314' => '-',
        '031A' => '-',  '031B' => '-',  '031C' => '-',  '0320' => '-',
        '0321' => '-',  '0322' => '-',  '0323' => '-',  '0324' => '-',
        '0325' => '-',  '0326' => '-',  '0327' => '-',  '0328' => '-',
        '032A' => '-',  '032B' => '-',  '032C' => '-',  '032D' => '-',
        '0330' => '-',  '0331' => '-',  '0332' => '-',  '0333' => '-',
        '0334' => '-',  '0338' => '-',  '033F' => '-',  '0341' => '-',
        '0342' => '-',  '0343' => '-',  '0344' => '-',  '0347' => '-',
        '0348' => '-',  '034C' => '-',  '034E' => '-',
        },
    '96' => {
        '0110' => '-',  '0111' => '-',  '0112' => '-',  '0113' => '-',
        '0170' => '-',  '0171' => '-',  '0172' => '-',  '0173' => '-',
        '0174' => '-',  '0175' => '-',  '0176' => '-',  '0177' => '-',
        '0178' => '-',  '0179' => '-',  '017A' => '-',  '017C' => '-',
        '017D' => '-',  '0181' => '-',  '0182' => '-',  '0183' => '-',
        '0185' => '-',  '0188' => '-',  '018A' => '-',  '018B' => '-',
        '018C' => '-',  '01A0' => '-',  '01F0' => '-',  '0200' => '-',
        '0201' => '-',  '0202' => '-',  '0203' => '-',  '0250' => '-',
        '0251' => '-',  '0253' => '-',  '0258' => '-',  '0259' => '-',
        '025B' => '-',  '0280' => '-',  '0281' => '-',  '0282' => '-',
        '0286' => '-',  '0288' => '-',  '0289' => '-',  '028C' => '-',
        },
    '71' => {
        '0020' => '-',  '0028' => '-',  '0029' => '-',  '002C' => '-',
        '002D' => '-',  '00A0' => '-',  '0100' => '-',  '0101' => '-',
        '0103' => '-',  '0150' => '-',  '0151' => '-',  '0152' => '-',
        '0153' => '-',
    }
};


    
# Nvidia Optimus
# optimus compatible chipsets listed here:
# https://www.nvidia.com/en-us/geforce/technologies/optimus/supported-gpus/
# Some of the GPU PCI IDS were in the driver README.txt
# others I had to find in PCI ID sites. These are indicated with an 'X'
# in the VDPAU level field.
# TODO:
# Not yet found the PCI IDs of the following Optimus capable GPUs:
#       geforce gt 610m
#       GTX 10 notebook series
    
my $pciid_nv_optimus = {
    '1F09' => 'GeForce GTX 1660 SUPER ',  #  J
    '1F0A' => 'GeForce GTX 1650',         #  J
    '174D' => 'GeForce MX130',            #  E
    '174E' => 'GeForce MX110',            #  E
    '1D11' => 'GeForce MX230',            #  H
    '1D13' => 'GeForce MX250',            #  H
    '161A' => 'GeForce GTX 980',          #  E
    '13D7' => 'GeForce GTX 980M',         #  E
    '1618' => 'GeForce GTX 970M',         #  E
    '13D9' => 'GeForce GTX 965M',         #  E
    '139B' => 'GeForce GTX 960M',         #  E
    '139A' => 'GeForce GTX 950M',         #  E
    '1348' => 'GeForce 945M',             #  E
    '179C' => 'GeForce 940MX',            #  E
    '1347' => 'GeForce 940M',             #  E
    '1346' => 'GeForce 930M',             #  E
    '134E' => 'GeForce 930MX',            #  E
    '134F' => 'GeForce 920MX',            #  E
    '1299' => 'GeForce 920M',             #  X
    '129A' => 'GeForce 910M',             #  X
    '1198' => 'GeForce GTX 880M',         #  X
    '1199' => 'GeForce GTX 870M',         #  X          # or 11A9 ??? TODO check
    '1392' => 'GeForce GTX 860M',         #  D
    '1391' => 'GeForce GTX 850M',         #  E
    '1341' => 'GeForce 840M',             #  E
    '1340' => 'GeForce 830M',             #  E
    '1140' => 'GeForce 820M',             #  C
    '119F' => 'GeForce GTX 780M',         #  X
    '119E' => 'GeForce GTX 780M',         #  X          # mac edition
    '11E0' => 'GeForce GTX 770M',         #  X
    '11E1' => 'GeForce GTX 765M',         #  X
    '11E2' => 'GeForce GTX 765M',         #  X
    '11E3' => 'GeForce GTX 760M',         #  X
    '0FCD' => 'GeForce GT 755M',          #  X
    '0FEA' => 'GeForce GT 755M',          #  X          # mac edition
    '0FE4' => 'GeForce GT 750M',          #  X
    '0FE9' => 'GeForce GT 750M',          #  X          # mac edition
    '0FE2' => 'GeForce GT 745M',          #  X
    '0FE3' => 'GeForce GT 745M',          #  X
    '0FDF' => 'GeForce GT 740M',          #  X
    '1292' => 'GeForce GT 740M',          #  X
    '1294' => 'GeForce GT 740M',          #  X
    '1291' => 'GeForce GT 735M',          #  X
    '1293' => 'GeForce GT 730M',          #  X
    '0FE1' => 'GeForce GT 730M',          #  X
    '1290' => 'GeForce GT 730M',          #  X
    '1140' => 'GeForce GT 720M',          #  C
    '1140' => 'GeForce 710M',             #  C
    '1140' => 'GeForce 705M',             #  C
    '1C90' => 'GeForce MX150',            #  H
    '1140' => 'GeForce GT 620M',          #  C
    '1140' => 'GeForce GT 625M',          #  C
    '0FD9' => 'GeForce GT 645M',          #  X
    '0FD2' => 'GeForce GT 640M',          #  X
    '0FD8' => 'GeForce GT 640M',          #  X          # mac edition
    '0FD1' => 'GeForce GT 650M',          #  X
    '0FD5' => 'GeForce GT 650M',          #  X          # mac edition
    '0DE9' => 'GeForce GT 630M',          #  C
    '0DE9' => 'GeForce GT 635M',          #  C
    '1210' => 'GeForce GTX 570M',         #  C
    '1211' => 'GeForce GTX 580M',         #  C
    '1051' => 'GeForce GT 520MX',         #  D
    '1251' => 'GeForce GTX 560M',         #  C
    '1246' => 'GeForce GT 550M',          #  C
    '0DED' => 'GeForce GT 520M',          #  C
    '1247' => 'GeForce GT 555M',          #  C
    '0DEC' => 'GeForce GT 525M',          #  C
    '0DF4' => 'GeForce GT 540M',          #  C
};


# list of what xf86-video-nv supports
my $pciid_nv = {
    $key_vesaddc    => 'true',
    $key_vesako     => 'ToBeChecked',
    '0020' => 'RIVA TNT',
    '0028' => 'RIVA TNT2',
    '002A' => 'Unknown TNT2',
    '002C' => 'Vanta',
    '0029' => 'RIVA TNT2 Ultra',
    '002D' => 'RIVA TNT2 Model 64',
    '00A0' => 'Aladdin TNT2',
    '0100' => 'GeForce 256',
    '0101' => 'GeForce DDR',
    '0103' => 'Quadro',
    '0110' => 'GeForce2 MX/MX 400',
    '0111' => 'GeForce2 MX 100/200',
    '0112' => 'GeForce2 Go',
    '0113' => 'Quadro2 MXR/EX/Go',
    '01A0' => 'GeForce2 Integrated GPU',
    '0150' => 'GeForce2 GTS',
    '0151' => 'GeForce2 Ti',
    '0152' => 'GeForce2 Ultra',
    '0153' => 'Quadro2 Pro',
    '0170' => 'GeForce4 MX 460',
    '0171' => 'GeForce4 MX 440',
    '0172' => 'GeForce4 MX 420',
    '0173' => 'GeForce4 MX 440-SE',
    '0174' => 'GeForce4 440 Go',
    '0175' => 'GeForce4 420 Go',
    '0176' => 'GeForce4 420 Go 32M',
    '0177' => 'GeForce4 460 Go',
    '0178' => 'Quadro4 550 XGL',
    '0179' => 'GeForce4 440 Go 64M',
    '017A' => 'Quadro NVS',
    '017C' => 'Quadro4 500 GoGL',
    '017D' => 'GeForce4 410 Go 16M',
    '0181' => 'GeForce4 MX 440 with AGP8X',
    '0182' => 'GeForce4 MX 440SE with AGP8X',
    '0183' => 'GeForce4 MX 420 with AGP8X',
    '0185' => 'GeForce4 MX 4000',
    '0186' => 'GeForce4 448 Go',
    '0187' => 'GeForce4 488 Go',
    '0188' => 'Quadro4 580 XGL',
    '0189' => 'GeForce4 MX with AGP8X (Mac)',
    '018A' => 'Quadro4 NVS 280 SD',
    '018B' => 'Quadro4 380 XGL',
    '018C' => 'Quadro NVS 50 PCI',
    '018D' => 'GeForce4 448 Go',
    '01F0' => 'GeForce4 MX Integrated GPU',
    '0200' => 'GeForce3',
    '0201' => 'GeForce3 Ti 200',
    '0202' => 'GeForce3 Ti 500',
    '0203' => 'Quadro DCC',
    '0250' => 'GeForce4 Ti 4600',
    '0251' => 'GeForce4 Ti 4400',
    '0253' => 'GeForce4 Ti 4200',
    '0258' => 'Quadro4 900 XGL',
    '0259' => 'Quadro4 750 XGL',
    '025B' => 'Quadro4 700 XGL',
    '0280' => 'GeForce4 Ti 4800',
    '0281' => 'GeForce4 Ti 4200 with AGP8X',
    '0282' => 'GeForce4 Ti 4800 SE',
    '0286' => 'GeForce4 4200 Go',
    '028C' => 'Quadro4 700 GoGL',
    '0288' => 'Quadro4 980 XGL',
    '0289' => 'Quadro4 780 XGL',
    '0301' => 'GeForce FX 5800 Ultra',
    '0302' => 'GeForce FX 5800',
    '0308' => 'Quadro FX 2000',
    '0309' => 'Quadro FX 1000',
    '0311' => 'GeForce FX 5600 Ultra',
    '0312' => 'GeForce FX 5600',
    '0314' => 'GeForce FX 5600XT',
    '031A' => 'GeForce FX Go5600',
    '031B' => 'GeForce FX Go5650',
    '031C' => 'Quadro FX Go700',
    '0320' => 'GeForce FX 5200',
    '0321' => 'GeForce FX 5200 Ultra',
    '0322' => 'GeForce FX 5200',
    '0323' => 'GeForce FX 5200LE',
    '0324' => 'GeForce FX Go5200',
    '0325' => 'GeForce FX Go5250',
    '0326' => 'GeForce FX 5500',
    '0327' => 'GeForce FX 5100',
    '0328' => 'GeForce FX Go5200 32M/64M',
    '0329' => 'GeForce FX 5200 (Mac)',
    '032A' => 'Quadro NVS 55/280 PCI',
    '032B' => 'Quadro FX 500/600 PCI',
    '032C' => 'GeForce FX Go53xx Series',
    '032D' => 'GeForce FX Go5100',
    '0330' => 'GeForce FX 5900 Ultra',
    '0331' => 'GeForce FX 5900',
    '0332' => 'GeForce FX 5900XT',
    '0333' => 'GeForce FX 5950 Ultra',
    '0334' => 'GeForce FX 5900ZT',
    '0338' => 'Quadro FX 3000',
    '033F' => 'Quadro FX 700',
    '0341' => 'GeForce FX 5700 Ultra',
    '0342' => 'GeForce FX 5700',
    '0343' => 'GeForce FX 5700LE',
    '0344' => 'GeForce FX 5700VE',
    '0347' => 'GeForce FX Go5700',
    '0348' => 'GeForce FX Go5700',
    '034C' => 'Quadro FX Go1000',
    '034E' => 'Quadro FX 1100',
    '0040' => 'GeForce 6800 Ultra',
    '0041' => 'GeForce 6800',
    '0042' => 'GeForce 6800 LE',
    '0043' => 'GeForce 6800 XE',
    '0044' => 'GeForce 6800 XT',
    '0045' => 'GeForce 6800 GT',
    '0046' => 'GeForce 6800 GT',
    '0047' => 'GeForce 6800 GS',
    '0048' => 'GeForce 6800 XT',
    '004E' => 'Quadro FX 4000',
    '00C0' => 'GeForce 6800 GS',
    '00C1' => 'GeForce 6800',
    '00C2' => 'GeForce 6800 LE',
    '00C3' => 'GeForce 6800 XT',
    '00C8' => 'GeForce Go 6800',
    '00C9' => 'GeForce Go 6800 Ultra',
    '00CC' => 'Quadro FX Go1400',
    '00CD' => 'Quadro FX 3450/4000 SDI',
    '00CE' => 'Quadro FX 1400',
    '0140' => 'GeForce 6600 GT',
    '0141' => 'GeForce 6600',
    '0142' => 'GeForce 6600 LE',
    '0143' => 'GeForce 6600 VE',
    '0144' => 'GeForce Go 6600',
    '0145' => 'GeForce 6610 XL',
    '0146' => 'GeForce Go 6600 TE/6200 TE',
    '0147' => 'GeForce 6700 XL',
    '0148' => 'GeForce Go 6600',
    '0149' => 'GeForce Go 6600 GT',
    '014A' => 'Quadro NVS 440',
    '014C' => 'Quadro FX 550',
    '014D' => 'Quadro FX 550',
    '014E' => 'Quadro FX 540',
    '014F' => 'GeForce 6200',
    '0160' => 'GeForce 6500',
    '0161' => 'GeForce 6200 TurboCache(TM)',
    '0162' => 'GeForce 6200SE TurboCache(TM)',
    '0163' => 'GeForce 6200 LE',
    '0164' => 'GeForce Go 6200',
    '0165' => 'Quadro NVS 285',
    '0166' => 'GeForce Go 6400',
    '0167' => 'GeForce Go 6200',
    '0168' => 'GeForce Go 6400',
    '0169' => 'GeForce 6250',
    '016A' => 'GeForce 7100 GS',
    '0211' => 'GeForce 6800',
    '0212' => 'GeForce 6800 LE',
    '0215' => 'GeForce 6800 GT',
    '0218' => 'GeForce 6800 XT',
    '0221' => 'GeForce 6200',
    '0222' => 'GeForce 6200 A-LE',
    '0090' => 'GeForce 7800 GTX',
    '0091' => 'GeForce 7800 GTX',
    '0092' => 'GeForce 7800 GT',
    '0093' => 'GeForce 7800 GS',
    '0095' => 'GeForce 7800 SLI',
    '0098' => 'GeForce Go 7800',
    '0099' => 'GeForce Go 7800 GTX',
    '009D' => 'Quadro FX 4500',
    '01D0' => 'GeForce 7350 LE',
    '01D1' => 'GeForce 7300 LE',
    '01D3' => 'GeForce 7300 SE',
    '01D6' => 'GeForce Go 7200',
    '01D7' => 'GeForce Go 7300',
    '01D8' => 'GeForce Go 7400',
    '01D9' => 'GeForce Go 7400 GS',
    '01DA' => 'Quadro NVS 110M',
    '01DB' => 'Quadro NVS 120M',
    '01DC' => 'Quadro FX 350M',
    '01DD' => 'GeForce 7500 LE',
    '01DE' => 'Quadro FX 350',
    '01DF' => 'GeForce 7300 GS',
    '0390' => 'GeForce 7650 GS',
    '0391' => 'GeForce 7600 GT',
    '0392' => 'GeForce 7600 GS',
    '0393' => 'GeForce 7300 GT',
    '0394' => 'GeForce 7600 LE',
    '0395' => 'GeForce 7300 GT',
    '0397' => 'GeForce Go 7700',
    '0398' => 'GeForce Go 7600',
    '0399' => 'GeForce Go 7600 GT',
    '039A' => 'Quadro NVS 300M',
    '039B' => 'GeForce Go 7900 SE',
    '039C' => 'Quadro FX 550M',
    '039E' => 'Quadro FX 560',
    '0290' => 'GeForce 7900 GTX',
    '0291' => 'GeForce 7900 GT',
    '0292' => 'GeForce 7900 GS',
    '0293' => 'GeForce 7950 GX2',
    '0294' => 'GeForce 7950 GX2',
    '0295' => 'GeForce 7950 GT',
    '0297' => 'GeForce Go 7950 GTX',
    '0298' => 'GeForce Go 7900 GS',
    '0299' => 'GeForce Go 7900 GTX',
    '029A' => 'Quadro FX 2500M',
    '029B' => 'Quadro FX 1500M',
    '029C' => 'Quadro FX 5500',
    '029D' => 'Quadro FX 3500',
    '029E' => 'Quadro FX 1500',
    '029F' => 'Quadro FX 4500 X2',
    '0240' => 'GeForce 6150',
    '0241' => 'GeForce 6150 LE',
    '0242' => 'GeForce 6100',
    '0244' => 'GeForce Go 6150',
    '0245' => 'Quadro NVS 210S / NVIDIA GeForce 6150LE',
    '0247' => 'GeForce Go 6100',
    '03D0' => 'GeForce 6150SE',
    '03D1' => 'GeForce 6100 nForce 405',
    '03D2' => 'GeForce 6100 nForce 400',
    '03D5' => 'GeForce 6100 nForce 420',
    '0531' => 'GeForce 7150M / nForce 630M',
    '0533' => 'GeForce 7000M / nForce 610M',
    '053A' => 'GeForce 7050 PV / nForce 630a',
    '053B' => 'GeForce 7050 PV / nForce 630a',
    '053E' => 'GeForce 7025 / nForce 630a',
    '0191' => 'GeForce 8800 GTX',
    '0193' => 'GeForce 8800 GTS',
    '0194' => 'GeForce 8800 Ultra',
    '019D' => 'Quadro FX 5600',
    '019E' => 'Quadro FX 4600',
    '0400' => 'GeForce 8600 GTS',
    '0401' => 'GeForce 8600 GT',
    '0402' => 'GeForce 8600 GT',
    '0403' => 'GeForce 8600 GS',
    '0404' => 'GeForce 8400 GS',
    '0405' => 'GeForce 9500M GS',
    '0406' => 'GeForce 8300 GS',
    '0407' => 'GeForce 8600M GT',
    '0408' => 'GeForce 9650M GS',
    '0409' => 'GeForce 8700M GT',
    '040A' => 'Quadro FX 370',
    '040B' => 'Quadro NVS 320M',
    '040C' => 'Quadro FX 570M',
    '040D' => 'Quadro FX 1600M',
    '040E' => 'Quadro FX 570',
    '040F' => 'Quadro FX 1700',
    '0410' => 'GeForce GT 330',
    '0420' => 'GeForce 8400 SE',
    '0421' => 'GeForce 8500 GT',
    '0422' => 'GeForce 8400 GS',
    '0423' => 'GeForce 8300 GS',
    '0424' => 'GeForce 8400 GS',
    '0425' => 'GeForce 8600M GS',
    '0426' => 'GeForce 8400M GT',
    '0427' => 'GeForce 8400M GS',
    '0428' => 'GeForce 8400M G',
    '0429' => 'Quadro NVS 140M',
    '042A' => 'Quadro NVS 130M',
    '042B' => 'Quadro NVS 135M',
    '042C' => 'GeForce 9400 GT',
    '042D' => 'Quadro FX 360M',
    '042E' => 'GeForce 9300M G',
    '042F' => 'Quadro NVS 290',
    '05E0' => 'GeForce GTX 295',
    '05E1' => 'GeForce GTX 280',
    '05E2' => 'GeForce GTX 260',
    '05E3' => 'GeForce GTX 285',
    '05E6' => 'GeForce GTX 275',
    '05EA' => 'GeForce GTX 260',
    '05EB' => 'GeForce GTX 295',
    '05ED' => 'Quadroplex 2200 D2',
    '05F8' => 'Quadroplex 2200 S4',
    '05F9' => 'Quadro CX',
    '05FD' => 'Quadro FX 5800',
    '05FE' => 'Quadro FX 4800',
    '05FF' => 'Quadro FX 3800',
    '0600' => 'GeForce 8800 GTS 512',
    '0601' => 'GeForce 9800 GT',
    '0602' => 'GeForce 8800 GT',
    '0603' => 'GeForce GT 230',
    '0604' => 'GeForce 9800 GX2',
    '0605' => 'GeForce 9800 GT',
    '0606' => 'GeForce 8800 GS',
    '0607' => 'GeForce GTS 240',
    '0608' => 'GeForce 9800M GTX',
    '0609' => 'GeForce 8800M GTS',
    '060A' => 'GeForce GTX 280M',
    '060B' => 'GeForce 9800M GT',
    '060C' => 'GeForce 8800M GTX',
    '060D' => 'GeForce 8800 GS',
    '060F' => 'GeForce GTX 285M',
    '0610' => 'GeForce 9600 GSO',
    '0611' => 'GeForce 8800 GT',
    '0612' => 'GeForce 9800 GTX/9800 GTX+',
    '0613' => 'GeForce 9800 GTX+',
    '0614' => 'GeForce 9800 GT',
    '0615' => 'GeForce GTS 250',
    '0617' => 'GeForce 9800M GTX',
    '0618' => 'GeForce GTX 260M',
    '0619' => 'Quadro FX 4700 X2',
    '061A' => 'Quadro FX 3700',
    '061B' => 'Quadro VX 200',
    '061C' => 'Quadro FX 3600M',
    '061D' => 'Quadro FX 2800M',
    '061E' => 'Quadro FX 3700M',
    '061F' => 'Quadro FX 3800M',
    '0622' => 'GeForce 9600 GT',
    '0623' => 'GeForce 9600 GS',
    '0625' => 'GeForce 9600 GSO 512',
    '0626' => 'GeForce GT 130',
    '0627' => 'GeForce GT 140',
    '0628' => 'GeForce 9800M GTS',
    '062A' => 'GeForce 9700M GTS',
    '062B' => 'GeForce 9800M GS',
    '062C' => 'GeForce 9800M GTS',
    '062D' => 'GeForce 9600 GT',
    '062E' => 'GeForce 9600 GT',
    '0631' => 'GeForce GTS 160M',
    '0632' => 'GeForce GTS 150M',
    '0635' => 'GeForce 9600 GSO',
    '0637' => 'GeForce 9600 GT',
    '0638' => 'Quadro FX 1800',
    '063A' => 'Quadro FX 2700M',
    '0640' => 'GeForce 9500 GT',
    '0641' => 'GeForce 9400 GT',
    '0643' => 'GeForce 9500 GT',
    '0644' => 'GeForce 9500 GS',
    '0645' => 'GeForce 9500 GS',
    '0646' => 'GeForce GT 120',
    '0647' => 'GeForce 9600M GT',
    '0648' => 'GeForce 9600M GS',
    '0649' => 'GeForce 9600M GT',
    '064A' => 'GeForce 9700M GT',
    '064B' => 'GeForce 9500M G',
    '064C' => 'GeForce 9650M GT',
    '0651' => 'GeForce G 110M',
    '0652' => 'GeForce GT 130M',
    '0653' => 'GeForce GT 120M',
    '0654' => 'GeForce GT 220M',
    '0656' => 'GeForce 9650 S',
    '0658' => 'Quadro FX 380',
    '0659' => 'Quadro FX 580',
    '065A' => 'Quadro FX 1700M',
    '065B' => 'GeForce 9400 GT',
    '065C' => 'Quadro FX 770M',
    '06E0' => 'GeForce 9300 GE',
    '06E1' => 'GeForce 9300 GS',
    '06E2' => 'GeForce 8400',
    '06E3' => 'GeForce 8400 SE',
    '06E4' => 'GeForce 8400 GS',
    '06E5' => 'GeForce 9300M GS',
    '06E6' => 'GeForce G100',
    '06E7' => 'GeForce 9300 SE',
    '06E8' => 'GeForce 9200M GS',
    '06E9' => 'GeForce 9300M GS',
    '06EA' => 'Quadro NVS 150M',
    '06EB' => 'Quadro NVS 160M',
    '06EC' => 'GeForce G 105M',
    '06EF' => 'GeForce G 103M',
    '06F1' => 'GeForce G105M',
    '06F8' => 'Quadro NVS 420',
    '06F9' => 'Quadro FX 370 LP',
    '06FA' => 'Quadro NVS 450',
    '06FB' => 'Quadro FX 370M',
    '06FD' => 'Quadro NVS 295',
    '0844' => 'GeForce 9100M G',
    '0845' => 'GeForce 8200M G',
    '0846' => 'GeForce 9200',
    '0847' => 'GeForce 9100',
    '0848' => 'GeForce 8300',
    '0849' => 'GeForce 8200',
    '084A' => 'nForce 730a',
    '084B' => 'GeForce 9200',
    '084C' => 'nForce 980a/780a SLI',
    '084D' => 'nForce 750a SLI',
    '084F' => 'GeForce 8100 / nForce 720a',
    '0860' => 'GeForce 9400',
    '0861' => 'GeForce 9400',
    '0862' => 'GeForce 9400M G',
    '0863' => 'GeForce 9400M',
    '0864' => 'GeForce 9300',
    '0865' => 'ION',
    '0866' => 'GeForce 9400M G',
    '0867' => 'GeForce 9400',
    '0868' => 'nForce 760i SLI',
    '086A' => 'GeForce 9400',
    '086C' => 'GeForce 9300 / nForce 730i',
    '086D' => 'GeForce 9200',
    '086E' => 'GeForce 9100M G',
    '086F' => 'GeForce 8200M G',
    '0870' => 'GeForce 9400M',
    '0871' => 'GeForce 9200',
    '0872' => 'GeForce G102M',
    '0873' => 'GeForce G102M',
    '0874' => 'ION',
    '0876' => 'ION',
    '087A' => 'GeForce 9400',
    '087D' => 'ION',
    '087E' => 'ION LE',
    '087F' => 'ION LE',
    '0A20' => 'GeForce GT 220',
    '0A22' => 'GeForce 315',
    '0A23' => 'GeForce 210',
    '0A28' => 'GeForce GT 230M',
    '0A29' => 'GeForce GT 330M',
    '0A2A' => 'GeForce GT 230M',
    '0A2B' => 'GeForce GT 330M',
    '0A2C' => 'NVS 5100M',
    '0A2D' => 'GeForce GT 320M',
    '0A34' => 'GeForce GT 240M',
    '0A35' => 'GeForce GT 325M',
    '0A3C' => 'Quadro FX 880M',
    '0A60' => 'GeForce G210',
    '0A62' => 'GeForce 205',
    '0A63' => 'GeForce 310',
    '0A64' => 'ION',
    '0A65' => 'GeForce 210',
    '0A66' => 'GeForce 310',
    '0A67' => 'GeForce 315',
    '0A68' => 'GeForce G105M',
    '0A69' => 'GeForce G105M',
    '0A6A' => 'NVS 2100M',
    '0A6C' => 'NVS 3100M',
    '0A6E' => 'GeForce 305M',
    '0A6F' => 'ION',
    '0A70' => 'GeForce 310M',
    '0A71' => 'GeForce 305M',
    '0A72' => 'GeForce 310M',
    '0A73' => 'GeForce 305M',
    '0A74' => 'GeForce G210M',
    '0A75' => 'GeForce 310M',
    '0A78' => 'Quadro FX 380 LP',
    '0A7C' => 'Quadro FX 380M',
    '0CA0' => 'GeForce GT 330',
    '0CA2' => 'GeForce GT 320',
    '0CA3' => 'GeForce GT 240',
    '0CA4' => 'GeForce GT 340',
    '0CA7' => 'GeForce GT 330',
    '0CA8' => 'GeForce GTS 260M',
    '0CA9' => 'GeForce GTS 250M',
    '0CAC' => 'GeForce 315',
    '0CAF' => 'GeForce GT 335M',
    '0CB0' => 'GeForce GTS 350M',
    '0CB1' => 'GeForce GTS 360M',
    '0CBC' => 'Quadro FX 1800M',
};


my $nvind_vdpau = 0;
my $nvind_name = 1;
my @nvidia_drivers = ( 'nvidia-driver', 'nvidia-driver-390', 'nvidia-driver-340', 'nvidia-driver-304' );

my $pciid_nvidia = {
# list of cards PCI IDs supported by current 460+ driver
    # Lists as downloaded per Mar 19, 2021
    'nvidia-driver' => {
        '0FC0' => [ 'C', 'GeForce GT 640' ],
        '0FC1' => [ 'C', 'GeForce GT 640' ],
        '0FC2' => [ 'C', 'GeForce GT 630' ],
        '0FC6' => [ 'D', 'GeForce GTX 650' ],
        '0FC8' => [ 'D', 'GeForce GT 740' ],
        '0FC9' => [ 'C', 'GeForce GT 730' ],
        '0FD2' => [ 'C', 'GeForce GT 640M LE' ],
        '0FD2' => [ 'C', 'GeForce GT 640M LE' ],
        '0FE3' => [ 'D', 'GeForce GT 745A' ],
        '0FE3' => [ 'D', 'GeForce GT 745A' ],
        '1001' => [ 'D', 'GeForce GTX TITAN Z' ],
        '1004' => [ 'D', 'GeForce GTX 780' ],
        '1005' => [ 'D', 'GeForce GTX TITAN' ],
        '1007' => [ 'D', 'GeForce GTX 780' ],
        '1008' => [ 'D', 'GeForce GTX 780 Ti' ],
        '100A' => [ 'D', 'GeForce GTX 780 Ti' ],
        '100C' => [ 'D', 'GeForce GTX TITAN Black' ],
        '1180' => [ 'D', 'GeForce GTX 680' ],
        '1183' => [ 'D', 'GeForce GTX 660 Ti' ],
        '1184' => [ 'D', 'GeForce GTX 770' ],
        '1185' => [ 'D', 'GeForce GTX 660' ],
        '1185' => [ 'D', 'GeForce GTX 760' ],
        '1187' => [ 'D', 'GeForce GTX 760' ],
        '1188' => [ 'D', 'GeForce GTX 690' ],
        '1189' => [ 'D', 'GeForce GTX 670' ],
        '1189' => [ 'D', 'GeForce GTX 760 Ti OEM' ],
        '118E' => [ 'D', 'GeForce GTX 760 (192-bit)' ],
        '1193' => [ 'D', 'GeForce GTX 760 Ti OEM' ],
        '1195' => [ 'D', 'GeForce GTX 660' ],
        '1199' => [ 'D', 'GeForce GTX 760' ],
        '11C0' => [ 'D', 'GeForce GTX 660' ],
        '11C2' => [ 'D', 'GeForce GTX 650 Ti BOOST' ],
        '11C3' => [ 'D', 'GeForce GTX 650 Ti' ],
        '11C4' => [ 'D', 'GeForce GTX 645' ],
        '11C5' => [ 'D', 'GeForce GT 740' ],
        '11C6' => [ 'D', 'GeForce GTX 650 Ti' ],
        '11C8' => [ 'D', 'GeForce GTX 650' ],
        '11CB' => [ 'D', 'GeForce GT 740' ],
        '11E3' => [ 'D', 'GeForce GTX 760A' ],
        '1280' => [ 'D', 'GeForce GT 635' ],
        '1281' => [ 'D', 'GeForce GT 710' ],
        '1282' => [ 'C', 'GeForce GT 640' ],
        '1284' => [ 'C', 'GeForce GT 630' ],
        '1286' => [ 'D', 'GeForce GT 720' ],
        '1287' => [ 'C', 'GeForce GT 730' ],
        '1288' => [ 'D', 'GeForce GT 720' ],
        '1289' => [ 'D', 'GeForce GT 710' ],
        '128B' => [ 'D', 'GeForce GT 710' ],
        '1290' => [ 'D', 'GeForce 730A' ],
        '1292' => [ 'D', 'GeForce GT 740A' ],
        '1292' => [ 'D', 'GeForce GT 740A' ],
        '1292' => [ 'D', 'GeForce GT 740A' ],
        '1295' => [ 'C', 'GeForce 710A' ],
        '1295' => [ 'C', 'GeForce 710A' ],
        '1295' => [ 'D', 'GeForce 810A' ],
        '1295' => [ 'D', 'GeForce 810A' ],
        '1295' => [ 'D', 'GeForce 805A' ],
        '1295' => [ 'D', 'GeForce 710A' ],
        '1299' => [ 'D', 'GeForce 920A' ],
        '1299' => [ 'D', 'GeForce 920A' ],
        '1299' => [ 'D', 'GeForce 920A' ],
        '1299' => [ 'D', 'GeForce 920A' ],
        '1299' => [ 'D', 'GeForce 920A' ],
        '1299' => [ 'D', 'GeForce 920A' ],
        '1299' => [ 'D', 'GeForce 920A' ],
        '1299' => [ 'D', 'GeForce 920A' ],
        '1299' => [ 'D', 'GeForce 920A' ],
        '1299' => [ 'D', 'GeForce 920A' ],
        '1299' => [ 'D', 'GeForce 920A' ],
        '1299' => [ 'D', 'GeForce 920A' ],
        '1299' => [ 'D', 'GeForce 920A' ],
        '1299' => [ 'D', 'GeForce 920A' ],
        '1299' => [ 'D', 'GeForce 920A' ],
        '1299' => [ 'C', 'GeForce GT 730' ],
        '1340' => [ 'E', 'GeForce 830M' ],
        '1340' => [ 'E', 'GeForce 830A' ],
        '1341' => [ 'E', 'GeForce 840M' ],
        '1341' => [ 'E', 'GeForce 840A' ],
        '1341' => [ 'E', 'GeForce 840A' ],
        '1341' => [ 'E', 'GeForce 840A' ],
        '1341' => [ 'E', 'GeForce 840A' ],
        '1344' => [ 'E', 'GeForce 845M' ],
        '1346' => [ 'E', 'GeForce 930M' ],
        '1346' => [ 'E', 'GeForce 930A' ],
        '1346' => [ 'E', 'GeForce 930A' ],
        '1346' => [ 'E', 'GeForce 930A' ],
        '1346' => [ 'E', 'GeForce 930A' ],
        '1347' => [ 'E', 'GeForce 940M' ],
        '1347' => [ 'E', 'GeForce 940A' ],
        '1347' => [ 'E', 'GeForce 940A' ],
        '1348' => [ 'E', 'GeForce 945M' ],
        '1348' => [ 'E', 'GeForce 945A' ],
        '1349' => [ 'E', 'GeForce 930M' ],
        '1349' => [ 'E', 'GeForce 930A' ],
        '1349' => [ 'E', 'GeForce 930A' ],
        '1349' => [ 'E', 'GeForce 930A' ],
        '1349' => [ 'E', 'GeForce 930A' ],
        '1349' => [ 'E', 'GeForce 930A' ],
        '134B' => [ 'E', 'GeForce 940MX' ],
        '134B' => [ 'E', 'GeForce GPU' ],
        '134D' => [ 'E', 'GeForce 940MX' ],
        '134E' => [ 'E', 'GeForce 930MX' ],
        '134F' => [ 'E', 'GeForce 920MX' ],
        '137D' => [ 'E', 'GeForce 940A' ],
        '1380' => [ 'E', 'GeForce GTX 750 Ti' ],
        '1381' => [ 'E', 'GeForce GTX 750' ],
        '1382' => [ 'E', 'GeForce GTX 745' ],
        '1390' => [ 'E', 'GeForce 845M' ],
        '1391' => [ 'E', 'GeForce GTX 850M' ],
        '1391' => [ 'E', 'GeForce GTX 850A' ],
        '1392' => [ 'D', 'GeForce GTX 860M' ],
        '1392' => [ 'E', 'GeForce GPU' ],
        '1392' => [ 'E', 'GeForce GTX 750 Ti' ],
        '1392' => [ 'E', 'GeForce GTX 750 Ti' ],
        '1393' => [ 'E', 'GeForce 840M' ],
        '1398' => [ 'E', 'GeForce 845M' ],
        '1399' => [ 'E', 'GeForce 945M' ],
        '139A' => [ 'E', 'GeForce GTX 950M' ],
        '139A' => [ 'E', 'GeForce GTX 950A' ],
        '139A' => [ 'E', 'GeForce GTX 950A' ],
        '139A' => [ 'E', 'GeForce GTX 950A' ],
        '139A' => [ 'E', 'GeForce GTX 950A' ],
        '139A' => [ 'E', 'GeForce GTX 950A' ],
        '139A' => [ 'E', 'GeForce GTX 950A' ],
        '139B' => [ 'E', 'GeForce GTX 960M' ],
        '139B' => [ 'E', 'GeForce GTX 750 Ti' ],
        '139B' => [ 'D', 'GeForce GTX 860M' ],
        '139B' => [ 'E', 'GeForce GTX 960A' ],
        '139B' => [ 'E', 'GeForce GTX 750Ti' ],
        '139B' => [ 'E', 'GeForce GTX 960A' ],
        '139B' => [ 'E', 'GeForce GTX 750 Ti' ],
        '139B' => [ 'E', 'GeForce GTX 750Ti' ],
        '139C' => [ 'E', 'GeForce 940M' ],
        '139D' => [ 'E', 'GeForce GTX 750 Ti' ],
        '13C0' => [ 'E', 'GeForce GTX 980' ],
        '13C2' => [ 'E', 'GeForce GTX 970' ],
        '13D7' => [ 'E', 'GeForce GTX 980M' ],
        '13D8' => [ 'E', 'GeForce GTX 970M' ],
        '13D8' => [ 'E', 'GeForce GTX 960' ],
        '13D8' => [ 'E', 'GeForce GTX 960' ],
        '13D8' => [ 'E', 'GeForce GTX 960' ],
        '13D8' => [ 'E', 'GeForce GTX 960' ],
        '13D8' => [ 'E', 'GeForce GTX 960' ],
        '13D9' => [ 'E', 'GeForce GTX 965M' ],
        '13DA' => [ 'E', 'GeForce GTX 980' ],
        '1401' => [ 'F', 'GeForce GTX 960' ],
        '1402' => [ 'F', 'GeForce GTX 950' ],
        '1406' => [ 'F', 'GeForce GTX 960' ],
        '1407' => [ 'E', 'GeForce GTX 750' ],
        '1427' => [ 'E', 'GeForce GTX 965M' ],
        '1427' => [ 'F', 'GeForce GTX 950' ],
        '1617' => [ 'E', 'GeForce GTX 980M' ],
        '1618' => [ 'E', 'GeForce GTX 970M' ],
        '1619' => [ 'E', 'GeForce GTX 965M' ],
        '161A' => [ 'E', 'GeForce GTX 980' ],
        '1667' => [ 'E', 'GeForce GTX 965M' ],
        '174D' => [ 'E', 'GeForce MX130' ],
        '174E' => [ 'E', 'GeForce MX110' ],
        '179C' => [ 'E', 'GeForce 940MX' ],
        '17C2' => [ 'E', 'GeForce GTX TITAN X' ],
        '17C8' => [ 'E', 'GeForce GTX 980 Ti' ],
        '1B00' => [ 'H', 'TITAN X (Pascal)' ],
        '1B02' => [ 'H', 'TITAN Xp' ],
        '1B02' => [ 'H', 'TITAN Xp COLLECTORS EDITION' ],
        '1B02' => [ 'H', 'TITAN Xp COLLECTORS EDITION' ],
        '1B06' => [ 'H', 'GeForce GTX 1080 Ti' ],
        '1B80' => [ 'H', 'GeForce GTX 1080' ],
        '1B81' => [ 'H', 'GeForce GTX 1070' ],
        '1B82' => [ 'H', 'GeForce GTX 1070 Ti' ],
        '1B83' => [ 'H', 'GeForce GTX 1060 6GB' ],
        '1B84' => [ 'H', 'GeForce GTX 1060 3GB' ],
        '1B87' => [ 'H', 'P104-100' ],
        '1BA0' => [ 'H', 'GeForce GTX 1080' ],
        '1BA0' => [ 'H', 'GeForce GTX 1080 with Max-Q Design' ],
        '1BA1' => [ 'H', 'GeForce GTX 1070' ],
        '1BA1' => [ 'H', 'GeForce GTX 1070 with Max-Q Design' ],
        '1BA1' => [ 'H', 'GeForce GTX 1070 with Max-Q Design' ],
        '1BA1' => [ 'H', 'GeForce GTX 1070 with Max-Q Design' ],
        '1BA1' => [ 'H', 'GeForce GTX 1070 with Max-Q Design' ],
        '1BA1' => [ 'H', 'GeForce GTX 1070 with Max-Q Design' ],
        '1BA1' => [ 'H', 'GeForce GTX 1070 with Max-Q Design' ],
        '1BA1' => [ 'H', 'GeForce GTX 1070 with Max-Q Design' ],
        '1BA1' => [ 'H', 'GeForce GTX 1070 with Max-Q Design' ],
        '1BA1' => [ 'H', 'GeForce GTX 1070 with Max-Q Design' ],
        '1BA1' => [ 'H', 'GeForce GTX 1070 with Max-Q Design' ],
        '1BA1' => [ 'H', 'GeForce GTX 1070 with Max-Q Design' ],
        '1BA1' => [ 'H', 'GeForce GTX 1070 with Max-Q Design' ],
        '1BA1' => [ 'H', 'GeForce GTX 1070 with Max-Q Design' ],
        '1BA1' => [ 'H', 'GeForce GTX 1070 with Max-Q Design' ],
        '1BA2' => [ 'H', 'GeForce GTX 1070' ],
        '1BC7' => [ 'H', 'P104-101' ],
        '1BE0' => [ 'H', 'GeForce GTX 1080' ],
        '1BE0' => [ 'H', 'GeForce GTX 1080 with Max-Q Design' ],
        '1BE0' => [ 'H', 'GeForce GTX 1080 with Max-Q Design' ],
        '1BE0' => [ 'H', 'GeForce GTX 1080 with Max-Q Design' ],
        '1BE0' => [ 'H', 'GeForce GTX 1080 with Max-Q Design' ],
        '1BE0' => [ 'H', 'GeForce GTX 1080 with Max-Q Design' ],
        '1BE0' => [ 'H', 'GeForce GTX 1080 with Max-Q Design' ],
        '1BE0' => [ 'H', 'GeForce GTX 1080 with Max-Q Design' ],
        '1BE0' => [ 'H', 'GeForce GTX 1080 with Max-Q Design' ],
        '1BE1' => [ 'H', 'GeForce GTX 1070' ],
        '1BE1' => [ 'H', 'GeForce GTX 1070 with Max-Q Design' ],
        '1BE1' => [ 'H', 'GeForce GTX 1070 with Max-Q Design' ],
        '1BE1' => [ 'H', 'GeForce GTX 1070 with Max-Q Design' ],
        '1C02' => [ 'H', 'GeForce GTX 1060 3GB' ],
        '1C03' => [ 'H', 'GeForce GTX 1060 6GB' ],
        '1C04' => [ 'H', 'GeForce GTX 1060 5GB' ],
        '1C06' => [ 'H', 'GeForce GTX 1060 6GB' ],
        '1C07' => [ 'H', 'P106-100' ],
        '1C09' => [ 'H', 'P106-090' ],
        '1C20' => [ 'H', 'GeForce GTX 1060' ],
        '1C20' => [ 'H', 'GeForce GTX 1060 with Max-Q Design' ],
        '1C20' => [ 'H', 'GeForce GTX 1060 with Max-Q Design' ],
        '1C20' => [ 'H', 'GeForce GTX 1060 with Max-Q Design' ],
        '1C20' => [ 'H', 'GeForce GTX 1060 with Max-Q Design' ],
        '1C20' => [ 'H', 'GeForce GTX 1060 with Max-Q Design' ],
        '1C20' => [ 'H', 'GeForce GTX 1060 with Max-Q Design' ],
        '1C20' => [ 'H', 'GeForce GTX 1060 with Max-Q Design' ],
        '1C20' => [ 'H', 'GeForce GTX 1060 with Max-Q Design' ],
        '1C20' => [ 'H', 'GeForce GTX 1060 with Max-Q Design' ],
        '1C20' => [ 'H', 'GeForce GTX 1060 with Max-Q Design' ],
        '1C20' => [ 'H', 'GeForce GTX 1060 with Max-Q Design' ],
        '1C20' => [ 'H', 'GeForce GTX 1060 with Max-Q Design' ],
        '1C20' => [ 'H', 'GeForce GTX 1060 with Max-Q Design' ],
        '1C20' => [ 'H', 'GeForce GTX 1060 with Max-Q Design' ],
        '1C20' => [ 'H', 'GeForce GTX 1060 with Max-Q Design' ],
        '1C21' => [ 'H', 'GeForce GTX 1050 Ti' ],
        '1C22' => [ 'H', 'GeForce GTX 1050' ],
        '1C23' => [ 'H', 'GeForce GTX 1060' ],
        '1C60' => [ 'H', 'GeForce GTX 1060' ],
        '1C60' => [ 'H', 'GeForce GTX 1060 with Max-Q Design' ],
        '1C60' => [ 'H', 'GeForce GTX 1060 with Max-Q Design' ],
        '1C61' => [ 'H', 'GeForce GTX 1050 Ti' ],
        '1C62' => [ 'H', 'GeForce GTX 1050' ],
        '1C81' => [ 'H', 'GeForce GTX 1050' ],
        '1C82' => [ 'H', 'GeForce GTX 1050 Ti' ],
        '1C83' => [ 'H', 'GeForce GTX 1050' ],
        '1C8C' => [ 'H', 'GeForce GTX 1050 Ti' ],
        '1C8C' => [ 'H', 'GeForce GTX 1050 Ti with Max-Q Design' ],
        '1C8C' => [ 'H', 'GeForce GTX 1050 Ti with Max-Q Design' ],
        '1C8C' => [ 'H', 'GeForce GTX 1050 Ti with Max-Q Design' ],
        '1C8C' => [ 'H', 'GeForce GTX 1050 Ti with Max-Q Design' ],
        '1C8C' => [ 'H', 'GeForce GTX 1050 Ti with Max-Q Design' ],
        '1C8C' => [ 'H', 'GeForce GTX 1050 Ti with Max-Q Design' ],
        '1C8C' => [ 'H', 'GeForce GTX 1050 Ti with Max-Q Design' ],
        '1C8C' => [ 'H', 'GeForce GTX 1050 Ti with Max-Q Design' ],
        '1C8D' => [ 'H', 'GeForce GTX 1050' ],
        '1C8D' => [ 'H', 'GeForce GTX 1050 with Max-Q Design' ],
        '1C8D' => [ 'H', 'GeForce GTX 1050 with Max-Q Design' ],
        '1C8D' => [ 'H', 'GeForce GTX 1050 with Max-Q Design' ],
        '1C8D' => [ 'H', 'GeForce GTX 1050 with Max-Q Design' ],
        '1C8D' => [ 'H', 'GeForce GTX 1050 with Max-Q Design' ],
        '1C8D' => [ 'H', 'GeForce GTX 1050 with Max-Q Design' ],
        '1C8D' => [ 'H', 'GeForce GTX 1050 with Max-Q Design' ],
        '1C8D' => [ 'H', 'GeForce GTX 1050 with Max-Q Design' ],
        '1C8D' => [ 'H', 'GeForce GTX 1050 with Max-Q Design' ],
        '1C8D' => [ 'H', 'GeForce GTX 1050 with Max-Q Design' ],
        '1C8D' => [ 'H', 'GeForce GTX 1050 with Max-Q Design' ],
        '1C8D' => [ 'H', 'GeForce GTX 1050 with Max-Q Design' ],
        '1C8D' => [ 'H', 'GeForce GTX 1050 with Max-Q Design' ],
        '1C8F' => [ 'H', 'GeForce GTX 1050 Ti' ],
        '1C8F' => [ 'H', 'GeForce GTX 1050 Ti with Max-Q Design' ],
        '1C8F' => [ 'H', 'GeForce GTX 1050 Ti with Max-Q Design' ],
        '1C8F' => [ 'H', 'GeForce GTX 1050 Ti with Max-Q Design' ],
        '1C8F' => [ 'H', 'GeForce GTX 1050 Ti with Max-Q Design' ],
        '1C8F' => [ 'H', 'GeForce GTX 1050 Ti with Max-Q Design' ],
        '1C90' => [ 'H', 'GeForce MX150' ],
        '1C90' => [ 'H', 'GeForce MX250' ],
        '1C91' => [ 'H', 'GeForce GTX 1050' ],
        '1C91' => [ 'H', 'GeForce GTX 1050 with Max-Q Design' ],
        '1C91' => [ 'H', 'GeForce GTX 1050 with Max-Q Design' ],
        '1C91' => [ 'H', 'GeForce GTX 1050 with Max-Q Design' ],
        '1C92' => [ 'H', 'GeForce GTX 1050' ],
        '1C92' => [ 'H', 'GeForce GTX 1050 with Max-Q Design' ],
        '1C92' => [ 'H', 'GeForce GTX 1050 with Max-Q Design' ],
        '1C92' => [ 'H', 'GeForce GTX 1050 with Max-Q Design' ],
        '1C92' => [ 'H', 'GeForce GTX 1050 with Max-Q Design' ],
        '1C94' => [ 'H', 'GeForce MX350' ],
        '1C96' => [ 'H', 'GeForce MX350' ],
        '1D01' => [ 'H', 'GeForce GT 1030' ],
        '1D02' => [ 'H', 'GeForce GT 1010' ],
        '1D10' => [ 'H', 'GeForce MX150' ],
        '1D11' => [ 'H', 'GeForce MX230' ],
        '1D12' => [ 'H', 'GeForce MX150' ],
        '1D13' => [ 'H', 'GeForce MX250' ],
        '1D16' => [ 'H', 'GeForce MX330' ],
        '1D52' => [ 'H', 'GeForce MX250' ],
        '1D81' => [ 'I', 'TITAN V' ],
        '1DBA' => [ 'I', 'TITAN V JHH Special Edition' ],
        '1E02' => [ 'J', 'TITAN RTX' ],
        '1E04' => [ 'J', 'GeForce RTX 2080 Ti' ],
        '1E07' => [ 'J', 'GeForce RTX 2080 Ti' ],
        '1E81' => [ 'J', 'GeForce RTX 2080 SUPER' ],
        '1E82' => [ 'J', 'GeForce RTX 2080' ],
        '1E84' => [ 'J', 'GeForce RTX 2070 SUPER' ],
        '1E87' => [ 'J', 'GeForce RTX 2080' ],
        '1E89' => [ 'J', 'GeForce RTX 2060' ],
        '1E90' => [ 'J', 'GeForce RTX 2080' ],
        '1E90' => [ 'J', 'GeForce RTX 2080 with Max-Q Design' ],
        '1E90' => [ 'J', 'GeForce RTX 2080 with Max-Q Design' ],
        '1E90' => [ 'J', 'GeForce RTX 2080 with Max-Q Design' ],
        '1E90' => [ 'J', 'GeForce RTX 2080 with Max-Q Design' ],
        '1E90' => [ 'J', 'GeForce RTX 2080 with Max-Q Design' ],
        '1E90' => [ 'J', 'GeForce RTX 2080 with Max-Q Design' ],
        '1E90' => [ 'J', 'GeForce RTX 2080 with Max-Q Design' ],
        '1E90' => [ 'J', 'GeForce RTX 2080 with Max-Q Design' ],
        '1E90' => [ 'J', 'GeForce RTX 2080 with Max-Q Design' ],
        '1E90' => [ 'J', 'GeForce RTX 2080 with Max-Q Design' ],
        '1E90' => [ 'J', 'GeForce RTX 2080 with Max-Q Design' ],
        '1E90' => [ 'J', 'GeForce RTX 2080 with Max-Q Design' ],
        '1E90' => [ 'J', 'GeForce RTX 2080 with Max-Q Design' ],
        '1E90' => [ 'J', 'GeForce RTX 2080 with Max-Q Design' ],
        '1E90' => [ 'J', 'GeForce RTX 2080 with Max-Q Design' ],
        '1E90' => [ 'J', 'GeForce RTX 2080 with Max-Q Design' ],
        '1E90' => [ 'J', 'GeForce RTX 2080 with Max-Q Design' ],
        '1E90' => [ 'J', 'GeForce RTX 2080 with Max-Q Design' ],
        '1E90' => [ 'J', 'GeForce RTX 2080 with Max-Q Design' ],
        '1E90' => [ 'J', 'GeForce RTX 2080 with Max-Q Design' ],
        '1E90' => [ 'J', 'GeForce RTX 2080 with Max-Q Design' ],
        '1E90' => [ 'J', 'GeForce RTX 2080 with Max-Q Design' ],
        '1E90' => [ 'J', 'GeForce RTX 2080 with Max-Q Design' ],
        '1E90' => [ 'J', 'GeForce RTX 2080 with Max-Q Design' ],
        '1E90' => [ 'J', 'GeForce RTX 2080 with Max-Q Design' ],
        '1E90' => [ 'J', 'GeForce RTX 2080 with Max-Q Design' ],
        '1E90' => [ 'J', 'GeForce RTX 2080 with Max-Q Design' ],
        '1E90' => [ 'J', 'GeForce RTX 2080 with Max-Q Design' ],
        '1E90' => [ 'J', 'GeForce RTX 2080 with Max-Q Design' ],
        '1E90' => [ 'J', 'GeForce RTX 2080 with Max-Q Design' ],
        '1E90' => [ 'J', 'GeForce RTX 2080 with Max-Q Design' ],
        '1E90' => [ 'J', 'GeForce RTX 2080 with Max-Q Design' ],
        '1E90' => [ 'J', 'GeForce RTX 2080 with Max-Q Design' ],
        '1E90' => [ 'J', 'GeForce RTX 2080 with Max-Q Design' ],
        '1E90' => [ 'J', 'GeForce RTX 2080 with Max-Q Design' ],
        '1E90' => [ 'J', 'GeForce RTX 2080 with Max-Q Design' ],
        '1E90' => [ 'J', 'GeForce RTX 2080 with Max-Q Design' ],
        '1E90' => [ 'J', 'GeForce RTX 2080 with Max-Q Design' ],
        '1E90' => [ 'J', 'GeForce RTX 2080 with Max-Q Design' ],
        '1E90' => [ 'J', 'GeForce RTX 2080 with Max-Q Design' ],
        '1E90' => [ 'J', 'GeForce RTX 2080 with Max-Q Design' ],
        '1E91' => [ 'J', 'GeForce RTX 2070 Super' ],
        '1E93' => [ 'J', 'GeForce RTX 2080 Super' ],
        '1EC2' => [ 'J', 'GeForce RTX 2070 SUPER' ],
        '1EC7' => [ 'J', 'GeForce RTX 2070 SUPER' ],
        '1ED0' => [ 'J', 'GeForce RTX 2080' ],
        '1ED0' => [ 'J', 'GeForce RTX 2080 with Max-Q Design' ],
        '1ED0' => [ 'J', 'GeForce RTX 2080 with Max-Q Design' ],
        '1ED0' => [ 'J', 'GeForce RTX 2080 with Max-Q Design' ],
        '1ED0' => [ 'J', 'GeForce RTX 2080 with Max-Q Design' ],
        '1ED0' => [ 'J', 'GeForce RTX 2080 with Max-Q Design' ],
        '1ED0' => [ 'J', 'GeForce RTX 2080 with Max-Q Design' ],
        '1ED0' => [ 'J', 'GeForce RTX 2080 with Max-Q Design' ],
        '1ED0' => [ 'J', 'GeForce RTX 2080 with Max-Q Design' ],
        '1ED0' => [ 'J', 'GeForce RTX 2080 with Max-Q Design' ],
        '1ED0' => [ 'J', 'GeForce RTX 2080 with Max-Q Design' ],
        '1ED0' => [ 'J', 'GeForce RTX 2080 with Max-Q Design' ],
        '1ED0' => [ 'J', 'GeForce RTX 2080 with Max-Q Design' ],
        '1ED1' => [ 'J', 'GeForce RTX 2070 Super' ],
        '1ED3' => [ 'J', 'GeForce RTX 2080 Super' ],
        '1F02' => [ 'J', 'GeForce RTX 2070' ],
        '1F06' => [ 'J', 'GeForce RTX 2060 SUPER' ],
        '1F07' => [ 'J', 'GeForce RTX 2070' ],
        '1F08' => [ 'J', 'GeForce RTX 2060' ],
        '1F09' => [ 'J', 'GeForce GTX 1660 SUPER' ],
        '1F0A' => [ 'J', 'GeForce GTX 1650' ],
        '1F0B' => [ '-', 'CMP 40HX' ],
        '1F10' => [ 'J', 'GeForce RTX 2070' ],
        '1F10' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F10' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F10' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F10' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F10' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F10' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F10' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F10' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F10' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F10' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F10' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F10' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F10' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F10' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F10' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F10' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F10' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F10' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F10' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F10' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F10' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F10' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F10' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F10' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F10' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F10' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F10' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F10' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F10' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F10' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F10' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F10' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F10' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F10' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F10' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F10' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F10' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F10' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F10' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F10' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F11' => [ 'J', 'GeForce RTX 2060' ],
        '1F12' => [ 'J', 'GeForce RTX 2060' ],
        '1F12' => [ 'J', 'GeForce RTX 2060 with Max-Q Design' ],
        '1F12' => [ 'J', 'GeForce RTX 2060 with Max-Q Design' ],
        '1F12' => [ 'J', 'GeForce RTX 2060 with Max-Q Design' ],
        '1F12' => [ 'J', 'GeForce RTX 2060 with Max-Q Design' ],
        '1F12' => [ 'J', 'GeForce RTX 2060 with Max-Q Design' ],
        '1F12' => [ 'J', 'GeForce RTX 2060 with Max-Q Design' ],
        '1F12' => [ 'J', 'GeForce RTX 2060 with Max-Q Design' ],
        '1F12' => [ 'J', 'GeForce RTX 2060 with Max-Q Design' ],
        '1F12' => [ 'J', 'GeForce RTX 2060 with Max-Q Design' ],
        '1F12' => [ 'J', 'GeForce RTX 2060 with Max-Q Design' ],
        '1F12' => [ 'J', 'GeForce RTX 2060 with Max-Q Design' ],
        '1F12' => [ 'J', 'GeForce RTX 2060 with Max-Q Design' ],
        '1F14' => [ 'J', 'GeForce RTX 2070' ],
        '1F14' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F14' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F14' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F14' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F14' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F14' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F14' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F14' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F14' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F14' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F14' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F14' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F14' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F14' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F14' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F14' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F14' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F14' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F14' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F14' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F14' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F14' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F14' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F14' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F14' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F14' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F14' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F14' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F14' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F14' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F14' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F14' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F14' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F14' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F14' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F14' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F15' => [ 'J', 'GeForce RTX 2060' ],
        '1F42' => [ 'J', 'GeForce RTX 2060 SUPER' ],
        '1F47' => [ 'J', 'GeForce RTX 2060 SUPER' ],
        '1F50' => [ 'J', 'GeForce RTX 2070' ],
        '1F50' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F50' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F50' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F50' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F50' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F50' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F50' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F50' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F50' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F50' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F51' => [ 'J', 'GeForce RTX 2060' ],
        '1F54' => [ 'J', 'GeForce RTX 2070' ],
        '1F54' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F54' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F54' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F54' => [ 'J', 'GeForce RTX 2070 with Max-Q Design' ],
        '1F55' => [ 'J', 'GeForce RTX 2060' ],
        '1F82' => [ 'J', 'GeForce GTX 1650' ],
        '1F91' => [ 'J', 'GeForce GTX 1650' ],
        '1F91' => [ 'J', 'GeForce GTX 1650 with Max-Q Design' ],
        '1F91' => [ 'J', 'GeForce GTX 1650 with Max-Q Design' ],
        '1F91' => [ 'J', 'GeForce GTX 1650 with Max-Q Design' ],
        '1F91' => [ 'J', 'GeForce GTX 1650 with Max-Q Design' ],
        '1F91' => [ 'J', 'GeForce GTX 1650 with Max-Q Design' ],
        '1F91' => [ 'J', 'GeForce GTX 1650 with Max-Q Design' ],
        '1F91' => [ 'J', 'GeForce GTX 1650 with Max-Q Design' ],
        '1F91' => [ 'J', 'GeForce GTX 1650 with Max-Q Design' ],
        '1F91' => [ 'J', 'GeForce GTX 1650 with Max-Q Design' ],
        '1F91' => [ 'J', 'GeForce GTX 1650 with Max-Q Design' ],
        '1F91' => [ 'J', 'GeForce GTX 1650 with Max-Q Design' ],
        '1F91' => [ 'J', 'GeForce GTX 1650 with Max-Q Design' ],
        '1F91' => [ 'J', 'GeForce GTX 1650 with Max-Q Design' ],
        '1F91' => [ 'J', 'GeForce GTX 1650 with Max-Q Design' ],
        '1F91' => [ 'J', 'GeForce GTX 1650 with Max-Q Design' ],
        '1F91' => [ 'J', 'GeForce GTX 1650 with Max-Q Design' ],
        '1F91' => [ 'J', 'GeForce GTX 1650 with Max-Q Design' ],
        '1F95' => [ 'J', 'GeForce GTX 1650 Ti' ],
        '1F95' => [ 'J', 'GeForce GTX 1650 Ti with Max-Q Design' ],
        '1F95' => [ 'J', 'GeForce GTX 1650 Ti with Max-Q Design' ],
        '1F95' => [ 'J', 'GeForce GTX 1650 Ti with Max-Q Design' ],
        '1F95' => [ 'J', 'GeForce GTX 1650 Ti with Max-Q Design' ],
        '1F95' => [ 'J', 'GeForce GTX 1650 Ti with Max-Q Design' ],
        '1F95' => [ 'J', 'GeForce GTX 1650 Ti with Max-Q Design' ],
        '1F95' => [ 'J', 'GeForce GTX 1650 Ti with Max-Q Design' ],
        '1F95' => [ 'J', 'GeForce GTX 1650 Ti with Max-Q Design' ],
        '1F95' => [ 'J', 'GeForce GTX 1650 Ti with Max-Q Design' ],
        '1F95' => [ 'J', 'GeForce GTX 1650 Ti with Max-Q Design' ],
        '1F95' => [ 'J', 'GeForce GTX 1650 Ti with Max-Q Design' ],
        '1F95' => [ 'J', 'GeForce GTX 1650 Ti with Max-Q Design' ],
        '1F95' => [ 'J', 'GeForce GTX 1650 Ti with Max-Q Design' ],
        '1F95' => [ 'J', 'GeForce GTX 1650 Ti with Max-Q Design' ],
        '1F95' => [ 'J', 'GeForce GTX 1650 Ti with Max-Q Design' ],
        '1F95' => [ 'J', 'GeForce GTX 1650 Ti with Max-Q Design' ],
        '1F95' => [ 'J', 'GeForce GTX 1650 Ti with Max-Q Design' ],
        '1F95' => [ 'J', 'GeForce GTX 1650 Ti with Max-Q Design' ],
        '1F95' => [ 'J', 'GeForce GTX 1650 Ti with Max-Q Design' ],
        '1F95' => [ 'J', 'GeForce GTX 1650 Ti with Max-Q Design' ],
        '1F95' => [ 'J', 'GeForce GTX 1650 Ti with Max-Q Design' ],
        '1F96' => [ 'J', 'GeForce GTX 1650' ],
        '1F96' => [ 'J', 'GeForce GTX 1650 with Max-Q Design' ],
        '1F97' => [ 'J', 'GeForce MX450' ],
        '1F98' => [ 'J', 'GeForce MX450' ],
        '1F99' => [ 'J', 'GeForce GTX 1650' ],
        '1F99' => [ 'J', 'GeForce GTX 1650 with Max-Q Design' ],
        '1F99' => [ 'J', 'GeForce GTX 1650 with Max-Q Design' ],
        '1F99' => [ 'J', 'GeForce GTX 1650 with Max-Q Design' ],
        '1F99' => [ 'J', 'GeForce GTX 1650 with Max-Q Design' ],
        '1F99' => [ 'J', 'GeForce GTX 1650 with Max-Q Design' ],
        '1F99' => [ 'J', 'GeForce GTX 1650 with Max-Q Design' ],
        '1F99' => [ 'J', 'GeForce GTX 1650 with Max-Q Design' ],
        '1F99' => [ 'J', 'GeForce GTX 1650 with Max-Q Design' ],
        '1F99' => [ 'J', 'GeForce GTX 1650 with Max-Q Design' ],
        '1F99' => [ 'J', 'GeForce GTX 1650 with Max-Q Design' ],
        '1F99' => [ 'J', 'GeForce GTX 1650 with Max-Q Design' ],
        '1F99' => [ 'J', 'GeForce GTX 1650 with Max-Q Design' ],
        '1F99' => [ 'J', 'GeForce GTX 1650 with Max-Q Design' ],
        '1F9C' => [ 'J', 'GeForce MX450' ],
        '1F9D' => [ 'J', 'GeForce GTX 1650' ],
        '1F9D' => [ 'J', 'GeForce GTX 1650 with Max-Q Design' ],
        '1FDD' => [ 'J', 'GeForce GTX 1650' ],
        '2182' => [ 'J', 'GeForce GTX 1660 Ti' ],
        '2184' => [ 'J', 'GeForce GTX 1660' ],
        '2187' => [ 'J', 'GeForce GTX 1650 SUPER' ],
        '2188' => [ 'J', 'GeForce GTX 1650' ],
        '2189' => [ '-', 'CMP 30HX' ],
        '2191' => [ 'J', 'GeForce GTX 1660 Ti' ],
        '2191' => [ 'J', 'GeForce GTX 1660 Ti with Max-Q Design' ],
        '2191' => [ 'J', 'GeForce GTX 1660 Ti with Max-Q Design' ],
        '2191' => [ 'J', 'GeForce GTX 1660 Ti with Max-Q Design' ],
        '2191' => [ 'J', 'GeForce GTX 1660 Ti with Max-Q Design' ],
        '2191' => [ 'J', 'GeForce GTX 1660 Ti with Max-Q Design' ],
        '2191' => [ 'J', 'GeForce GTX 1660 Ti with Max-Q Design' ],
        '2191' => [ 'J', 'GeForce GTX 1660 Ti with Max-Q Design' ],
        '2191' => [ 'J', 'GeForce GTX 1660 Ti with Max-Q Design' ],
        '2191' => [ 'J', 'GeForce GTX 1660 Ti with Max-Q Design' ],
        '2191' => [ 'J', 'GeForce GTX 1660 Ti with Max-Q Design' ],
        '2191' => [ 'J', 'GeForce GTX 1660 Ti with Max-Q Design' ],
        '2191' => [ 'J', 'GeForce GTX 1660 Ti with Max-Q Design' ],
        '2191' => [ 'J', 'GeForce GTX 1660 Ti with Max-Q Design' ],
        '2191' => [ 'J', 'GeForce GTX 1660 Ti with Max-Q Design' ],
        '2191' => [ 'J', 'GeForce GTX 1660 Ti with Max-Q Design' ],
        '2191' => [ 'J', 'GeForce GTX 1660 Ti with Max-Q Design' ],
        '2191' => [ 'J', 'GeForce GTX 1660 Ti with Max-Q Design' ],
        '2191' => [ 'J', 'GeForce GTX 1660 Ti with Max-Q Design' ],
        '2191' => [ 'J', 'GeForce GTX 1660 Ti with Max-Q Design' ],
        '2191' => [ 'J', 'GeForce GTX 1660 Ti with Max-Q Design' ],
        '2191' => [ 'J', 'GeForce GTX 1660 Ti with Max-Q Design' ],
        '2191' => [ 'J', 'GeForce GTX 1660 Ti with Max-Q Design' ],
        '2192' => [ 'J', 'GeForce GTX 1650 Ti' ],
        '21C4' => [ 'J', 'GeForce GTX 1660 SUPER' ],
        '21D1' => [ 'J', 'GeForce GTX 1660 Ti' ],
        '2204' => [ 'K', 'GeForce RTX 3090' ],
        '2206' => [ 'K', 'GeForce RTX 3080' ],
        '2484' => [ 'K', 'GeForce RTX 3070' ],
        '2486' => [ 'K', 'GeForce RTX 3060 Ti' ],
        '249C' => [ 'K', 'GeForce RTX 3080 Laptop GPU' ],
        '249D' => [ 'K', 'GeForce RTX 3070 Laptop GPU' ],
        '24DC' => [ 'K', 'GeForce RTX 3080 Laptop GPU' ],
        '24DD' => [ 'K', 'GeForce RTX 3070 Laptop GPU' ],
        '2503' => [ 'K', 'GeForce RTX 3060' ],
        '2520' => [ 'K', 'GeForce RTX 3060 Laptop GPU' ],
        '2560' => [ 'K', 'GeForce RTX 3060 Laptop GPU' ],
        '0FF3' => [ 'D', 'Quadro K420' ],
        '0FF9' => [ 'D', 'Quadro K2000D' ],
        '0FFA' => [ 'D', 'Quadro K600' ],
        '0FFE' => [ 'D', 'Quadro K2000' ],
        '0FFF' => [ 'D', 'Quadro 410' ],
        '103A' => [ 'D', 'Quadro K6000' ],
        '103C' => [ 'D', 'Quadro K5200' ],
        '11B4' => [ 'D', 'Quadro K4200' ],
        '11BA' => [ 'D', 'Quadro K5000' ],
        '11FA' => [ 'D', 'Quadro K4000' ],
        '137A' => [ 'E', 'Quadro K620M' ],
        '137A' => [ 'E', 'Quadro M500M' ],
        '137A' => [ 'E', 'Quadro M500M' ],
        '137B' => [ 'E', 'Quadro M520' ],
        '13B0' => [ 'E', 'Quadro M2000M' ],
        '13B1' => [ 'E', 'Quadro M1000M' ],
        '13B2' => [ 'E', 'Quadro M600M' ],
        '13B3' => [ 'E', 'Quadro K2200M' ],
        '13B4' => [ 'E', 'Quadro M620' ],
        '13B6' => [ 'E', 'Quadro M1200' ],
        '13BA' => [ 'E', 'Quadro K2200' ],
        '13BB' => [ 'E', 'Quadro K620' ],
        '13BC' => [ 'E', 'Quadro K1200' ],
        '13F0' => [ 'E', 'Quadro M5000' ],
        '13F1' => [ 'E', 'Quadro M4000' ],
        '13F8' => [ 'E', 'Quadro M5000M' ],
        '13F8' => [ 'E', 'Quadro M5000 SE' ],
        '13F9' => [ 'E', 'Quadro M4000M' ],
        '13FA' => [ 'E', 'Quadro M3000M' ],
        '13FA' => [ 'E', 'Quadro M3000 SE' ],
        '13FB' => [ 'E', 'Quadro M5500' ],
        '1430' => [ 'F', 'Quadro M2000' ],
        '1436' => [ 'F', 'Quadro M2200' ],
        '15F0' => [ 'G', 'Quadro GP100' ],
        '17F0' => [ 'E', 'Quadro M6000' ],
        '17F1' => [ 'E', 'Quadro M6000 24GB' ],
        '1B30' => [ 'H', 'Quadro P6000' ],
        '1BB0' => [ 'H', 'Quadro P5000' ],
        '1BB1' => [ 'H', 'Quadro P4000' ],
        '1BB5' => [ 'H', 'Quadro P5200' ],
        '1BB5' => [ 'H', 'Quadro P5200 with Max-Q Design' ],
        '1BB5' => [ 'H', 'Quadro P5200 with Max-Q Design' ],
        '1BB6' => [ 'H', 'Quadro P5000' ],
        '1BB7' => [ 'H', 'Quadro P4000' ],
        '1BB7' => [ 'H', 'Quadro P4000 with Max-Q Design' ],
        '1BB7' => [ 'H', 'Quadro P4000 with Max-Q Design' ],
        '1BB8' => [ 'H', 'Quadro P3000' ],
        '1BB9' => [ 'H', 'Quadro P4200' ],
        '1BB9' => [ 'H', 'Quadro P4200 with Max-Q Design' ],
        '1BB9' => [ 'H', 'Quadro P4200 with Max-Q Design' ],
        '1BB9' => [ 'H', 'Quadro P4200 with Max-Q Design' ],
        '1BBB' => [ 'H', 'Quadro P3200' ],
        '1BBB' => [ 'H', 'Quadro P3200 with Max-Q Design' ],
        '1BBB' => [ 'H', 'Quadro P3200 with Max-Q Design' ],
        '1C30' => [ 'H', 'Quadro P2000' ],
        '1C31' => [ 'H', 'Quadro P2200' ],
        '1CB1' => [ 'H', 'Quadro P1000' ],
        '1CB2' => [ 'H', 'Quadro P600' ],
        '1CB3' => [ 'H', 'Quadro P400' ],
        '1CB6' => [ 'H', 'Quadro P620' ],
        '1CBA' => [ 'H', 'Quadro P2000' ],
        '1CBA' => [ 'H', 'Quadro P2000 with Max-Q Design' ],
        '1CBA' => [ 'H', 'Quadro P2000 with Max-Q Design' ],
        '1CBB' => [ 'H', 'Quadro P1000' ],
        '1CBC' => [ 'H', 'Quadro P600' ],
        '1CBD' => [ 'H', 'Quadro P620' ],
        '1CFA' => [ 'H', 'Quadro P2000' ],
        '1CFB' => [ 'H', 'Quadro P1000' ],
        '1CFB' => [ 'H', 'Matrox D-Series D1480' ],
        '1CFB' => [ 'H', 'Matrox D-Series D1450' ],
        '1D33' => [ 'H', 'Quadro P500' ],
        '1D34' => [ 'H', 'Quadro P520' ],
        '1DBA' => [ 'I', 'Quadro GV100' ],
        '1E30' => [ 'J', 'Quadro RTX 6000' ],
        '1E30' => [ 'J', 'Quadro RTX 8000' ],
        '1E30' => [ 'J', 'Quadro RTX 8000' ],
        '1E30' => [ 'J', 'Quadro RTX 8000' ],
        '1E36' => [ 'J', 'Quadro RTX 6000' ],
        '1E78' => [ 'J', 'Quadro RTX 8000' ],
        '1E78' => [ 'J', 'Quadro RTX 6000' ],
        '1EB0' => [ 'J', 'Quadro RTX 5000' ],
        '1EB1' => [ 'J', 'Quadro RTX 4000' ],
        '1EB5' => [ 'J', 'Quadro RTX 5000' ],
        '1EB5' => [ 'J', 'Quadro RTX 5000 with Max-Q Design' ],
        '1EB5' => [ 'J', 'Quadro RTX 5000 with Max-Q Design' ],
        '1EB5' => [ 'J', 'Quadro RTX 5000 with Max-Q Design' ],
        '1EB5' => [ 'J', 'Quadro RTX 5000 with Max-Q Design' ],
        '1EB5' => [ 'J', 'Quadro RTX 5000 with Max-Q Design' ],
        '1EB5' => [ 'J', 'Quadro RTX 5000 with Max-Q Design' ],
        '1EB5' => [ 'J', 'Quadro RTX 5000 with Max-Q Design' ],
        '1EB5' => [ 'J', 'Quadro RTX 5000 with Max-Q Design' ],
        '1EB5' => [ 'J', 'Quadro RTX 5000 with Max-Q Design' ],
        '1EB5' => [ 'J', 'Quadro RTX 5000 with Max-Q Design' ],
        '1EB5' => [ 'J', 'Quadro RTX 5000 with Max-Q Design' ],
        '1EB5' => [ 'J', 'Quadro RTX 5000 with Max-Q Design' ],
        '1EB5' => [ 'J', 'Quadro RTX 5000 with Max-Q Design' ],
        '1EB5' => [ 'J', 'Quadro RTX 5000 with Max-Q Design' ],
        '1EB5' => [ 'J', 'Quadro RTX 5000 with Max-Q Design' ],
        '1EB5' => [ 'J', 'Quadro RTX 5000 with Max-Q Design' ],
        '1EB5' => [ 'J', 'Quadro RTX 5000 with Max-Q Design' ],
        '1EB5' => [ 'J', 'Quadro RTX 5000 with Max-Q Design' ],
        '1EB5' => [ 'J', 'Quadro RTX 5000 with Max-Q Design' ],
        '1EB5' => [ 'J', 'Quadro RTX 5000 with Max-Q Design' ],
        '1EB5' => [ 'J', 'Quadro RTX 5000 with Max-Q Design' ],
        '1EB5' => [ 'J', 'Quadro RTX 5000 with Max-Q Design' ],
        '1EB6' => [ 'J', 'Quadro RTX 4000' ],
        '1EB6' => [ 'J', 'Quadro RTX 4000 with Max-Q Design' ],
        '1EB6' => [ 'J', 'Quadro RTX 4000 with Max-Q Design' ],
        '1EB6' => [ 'J', 'Quadro RTX 4000 with Max-Q Design' ],
        '1EB6' => [ 'J', 'Quadro RTX 4000 with Max-Q Design' ],
        '1EB6' => [ 'J', 'Quadro RTX 4000 with Max-Q Design' ],
        '1EB6' => [ 'J', 'Quadro RTX 4000 with Max-Q Design' ],
        '1EB6' => [ 'J', 'Quadro RTX 4000 with Max-Q Design' ],
        '1EB6' => [ 'J', 'Quadro RTX 4000 with Max-Q Design' ],
        '1EB6' => [ 'J', 'Quadro RTX 4000 with Max-Q Design' ],
        '1EB6' => [ 'J', 'Quadro RTX 4000 with Max-Q Design' ],
        '1EB6' => [ 'J', 'Quadro RTX 4000 with Max-Q Design' ],
        '1EB6' => [ 'J', 'Quadro RTX 4000 with Max-Q Design' ],
        '1EB6' => [ 'J', 'Quadro RTX 4000 with Max-Q Design' ],
        '1EB6' => [ 'J', 'Quadro RTX 4000 with Max-Q Design' ],
        '1EF5' => [ 'J', 'Quadro RTX 5000' ],
        '1F36' => [ 'J', 'Quadro RTX 3000' ],
        '1F36' => [ 'J', 'Quadro RTX 3000 with Max-Q Design' ],
        '1F36' => [ 'J', 'Quadro RTX 3000 with Max-Q Design' ],
        '1F36' => [ 'J', 'Quadro RTX 3000 with Max-Q Design' ],
        '1F36' => [ 'J', 'Quadro RTX 3000 with Max-Q Design' ],
        '1F36' => [ 'J', 'Quadro RTX 3000 with Max-Q Design' ],
        '1F36' => [ 'J', 'Quadro RTX 3000 with Max-Q Design' ],
        '1F76' => [ 'J', 'Quadro RTX 3000' ],
        '1FB0' => [ 'J', 'DGX Display' ],
        '1FB8' => [ 'J', 'Quadro T2000' ],
        '1FB8' => [ 'J', 'Quadro T2000 with Max-Q Design' ],
        '1FB8' => [ 'J', 'Quadro T2000 with Max-Q Design' ],
        '1FB8' => [ 'J', 'Quadro T2000 with Max-Q Design' ],
        '1FB8' => [ 'J', 'Quadro T2000 with Max-Q Design' ],
        '1FB8' => [ 'J', 'Quadro T2000 with Max-Q Design' ],
        '1FB8' => [ 'J', 'Quadro T2000 with Max-Q Design' ],
        '1FB8' => [ 'J', 'Quadro T2000 with Max-Q Design' ],
        '1FB8' => [ 'J', 'Quadro T2000 with Max-Q Design' ],
        '1FB8' => [ 'J', 'Quadro T2000 with Max-Q Design' ],
        '1FB8' => [ 'J', 'Quadro T2000 with Max-Q Design' ],
        '1FB8' => [ 'J', 'Quadro T2000 with Max-Q Design' ],
        '1FB8' => [ 'J', 'Quadro T2000 with Max-Q Design' ],
        '1FB8' => [ 'J', 'Quadro T2000 with Max-Q Design' ],
        '1FB9' => [ 'J', 'Quadro T1000' ],
        '1FB9' => [ 'J', 'Quadro T1000 with Max-Q Design' ],
        '1FB9' => [ 'J', 'Quadro T1000 with Max-Q Design' ],
        '1FB9' => [ 'J', 'Quadro T1000 with Max-Q Design' ],
        '1FB9' => [ 'J', 'Quadro T1000 with Max-Q Design' ],
        '1FB9' => [ 'J', 'Quadro T1000 with Max-Q Design' ],
        '1FB9' => [ 'J', 'Quadro T1000 with Max-Q Design' ],
        '1FB9' => [ 'J', 'Quadro T1000 with Max-Q Design' ],
        '1FB9' => [ 'J', 'Quadro T1000 with Max-Q Design' ],
        '1FB9' => [ 'J', 'Quadro T1000 with Max-Q Design' ],
        '1FB9' => [ 'J', 'Quadro T1000 with Max-Q Design' ],
        '1FB9' => [ 'J', 'Quadro T1000 with Max-Q Design' ],
        '1FB9' => [ 'J', 'Quadro T1000 with Max-Q Design' ],
        '1FB9' => [ 'J', 'Quadro T1000 with Max-Q Design' ],
        '1FB9' => [ 'J', 'Quadro T1000 with Max-Q Design' ],
        '1FB9' => [ 'J', 'Quadro T1000 with Max-Q Design' ],
        '1FBB' => [ 'J', 'T500' ],
        '1FF9' => [ 'J', 'Quadro T1000' ],
        '2230' => [ 'K', 'RTX A6000' ],
        '2235' => [ 'K', 'A40' ],
        '0FFD' => [ 'D', 'NVS 510' ],
        '13B9' => [ 'E', 'NVS 810' ],
        '1021' => [ 'D', 'Tesla K20Xm' ],
        '1022' => [ 'D', 'Tesla K20c' ],
        '1023' => [ 'D', 'Tesla K40m' ],
        '1024' => [ 'D', 'Tesla K40c' ],
        '1026' => [ 'D', 'Tesla K20s' ],
        '1027' => [ 'D', 'Tesla K40st' ],
        '1028' => [ 'D', 'Tesla K20m' ],
        '1029' => [ 'D', 'Tesla K40s' ],
        '102A' => [ 'D', 'Tesla K40t' ],
        '102D' => [ 'D', 'Tesla K80' ],
        '118F' => [ 'D', 'Tesla K10' ],
        '1194' => [ 'D', 'Tesla K8' ],
        '13F2' => [ 'E', 'Tesla M60' ],
        '13F3' => [ 'E', 'Tesla M6' ],
        '1431' => [ 'F', 'Tesla M4' ],
        '15F7' => [ 'G', 'Tesla P100-PCIE-12GB' ],
        '15F8' => [ 'G', 'Tesla P100-PCIE-16GB' ],
        '15F9' => [ 'G', 'Tesla P100-SXM2-16GB' ],
        '17FD' => [ 'E', 'Tesla M40' ],
        '17FD' => [ 'E', 'Tesla M40 24GB' ],
        '1B38' => [ 'H', 'Tesla P40' ],
        '1BB3' => [ 'H', 'Tesla P4' ],
        '1BB4' => [ 'H', 'Tesla P6' ],
        '1DB1' => [ 'I', 'Tesla V100-SXM2-16GB' ],
        '1DB1' => [ 'I', 'Tesla V100-SXM2-16GB-LS' ],
        '1DB3' => [ 'I', 'Tesla V100-FHHL-16GB' ],
        '1DB4' => [ 'I', 'Tesla V100-PCIE-16GB' ],
        '1DB4' => [ 'I', 'Tesla V100-PCIE-16GB-LS' ],
        '1DB5' => [ 'I', 'Tesla V100-SXM2-32GB' ],
        '1DB5' => [ 'I', 'Tesla V100-SXM2-32GB-LS' ],
        '1DB6' => [ 'I', 'Tesla V100-PCIE-32GB' ],
        '1DB7' => [ 'I', 'Tesla V100-DGXS-32GB' ],
        '1DB8' => [ 'I', 'Tesla V100-SXM3-32GB' ],
        '1DB8' => [ 'I', 'Tesla V100-SXM3-32GB-H' ],
        '1DF0' => [ 'I', 'Tesla PG500-216' ],
        '1DF2' => [ 'I', 'Tesla PG503-216' ],
        '1DF5' => [ 'I', 'Tesla V100-SXM2-16GB' ],
        '1DF6' => [ 'I', 'Tesla V100S-PCIE-32GB' ],
        '1EB8' => [ 'J', 'Tesla T4' ],
        '20B0' => [ 'J', 'A100-SXM4-40GB' ],
        '20B0' => [ 'J', 'A100-PG509-200' ],
        '20B1' => [ 'J', 'A100-PCIE-40GB' ],
        '20B2' => [ 'J', 'A100-SXM-80GB' ],
        '20B2' => [ 'J', 'A100-SXM-80GB' ],
        '20F1' => [ 'J', 'A100-PCIE-40GB' ],
        '118A' => [ 'D', 'GRID K520' ],
    },
    'nvidia-driver-390' => {
        '06C0' => [ 'C', 'GeForce GTX 480' ],
        '06C4' => [ 'C', 'GeForce GTX 465' ],
        '06CA' => [ 'C', 'GeForce GTX 480M' ],
        '06CD' => [ 'C', 'GeForce GTX 470' ],
        '0DC0' => [ 'C', 'GeForce GT 440' ],
        '0DC4' => [ 'C', 'GeForce GTS 450' ],
        '0DC5' => [ 'C', 'GeForce GTS 450' ],
        '0DC6' => [ 'C', 'GeForce GTS 450' ],
        '0DCD' => [ 'C', 'GeForce GT 555M' ],
        '0DCE' => [ 'C', 'GeForce GT 555M' ],
        '0DD1' => [ 'C', 'GeForce GTX 460M' ],
        '0DD2' => [ 'C', 'GeForce GT 445M' ],
        '0DD3' => [ 'C', 'GeForce GT 435M' ],
        '0DD6' => [ 'C', 'GeForce GT 550M' ],
        '0DE0' => [ 'C', 'GeForce GT 440' ],
        '0DE1' => [ 'C', 'GeForce GT 430' ],
        '0DE2' => [ 'C', 'GeForce GT 420' ],
        '0DE3' => [ 'C', 'GeForce GT 635M' ],
        '0DE4' => [ 'C', 'GeForce GT 520' ],
        '0DE5' => [ 'C', 'GeForce GT 530' ],
        '0DE7' => [ 'C', 'GeForce GT 610' ],
        '0DE8' => [ 'C', 'GeForce GT 620M' ],
        '0DE9' => [ 'C', 'GeForce GT 630M' ],
        '0DE9' => [ 'C', 'GeForce GT 620M' ],
        '0DE9' => [ 'C', 'GeForce GT 620M' ],
        '0DE9' => [ 'C', 'GeForce GT 620M' ],
        '0DE9' => [ 'C', 'GeForce GT 620M' ],
        '0DE9' => [ 'C', 'GeForce GT 620M' ],
        '0DE9' => [ 'C', 'GeForce GT 620M' ],
        '0DE9' => [ 'C', 'GeForce GT 620M' ],
        '0DE9' => [ 'C', 'GeForce GT 640M LE' ],
        '0DE9' => [ 'C', 'GeForce GT 635M' ],
        '0DEA' => [ 'C', 'GeForce 610M' ],
        '0DEA' => [ 'C', 'GeForce 615' ],
        '0DEA' => [ 'C', 'GeForce 615' ],
        '0DEA' => [ 'C', 'GeForce 615' ],
        '0DEA' => [ 'C', 'GeForce 615' ],
        '0DEA' => [ 'C', 'GeForce 615' ],
        '0DEB' => [ 'C', 'GeForce GT 555M' ],
        '0DEC' => [ 'C', 'GeForce GT 525M' ],
        '0DED' => [ 'C', 'GeForce GT 520M' ],
        '0DEE' => [ 'C', 'GeForce GT 415M' ],
        '0DF0' => [ 'C', 'GeForce GT 425M' ],
        '0DF1' => [ 'C', 'GeForce GT 420M' ],
        '0DF2' => [ 'C', 'GeForce GT 435M' ],
        '0DF3' => [ 'C', 'GeForce GT 420M' ],
        '0DF4' => [ 'C', 'GeForce GT 540M' ],
        '0DF4' => [ 'C', 'GeForce GT 630M' ],
        '0DF4' => [ 'C', 'GeForce GT 630M' ],
        '0DF5' => [ 'C', 'GeForce GT 525M' ],
        '0DF6' => [ 'C', 'GeForce GT 550M' ],
        '0DF7' => [ 'C', 'GeForce GT 520M' ],
        '0E22' => [ 'C', 'GeForce GTX 460' ],
        '0E23' => [ 'C', 'GeForce GTX 460 SE' ],
        '0E24' => [ 'C', 'GeForce GTX 460' ],
        '0E30' => [ 'C', 'GeForce GTX 470M' ],
        '0E31' => [ 'C', 'GeForce GTX 485M' ],
        '0F00' => [ 'C', 'GeForce GT 630' ],
        '0F01' => [ 'C', 'GeForce GT 620' ],
        '0F02' => [ 'C', 'GeForce GT 730' ],
        '0F03' => [ 'C', 'GeForce GT 610' ],
        '0FC0' => [ 'C', 'GeForce GT 640' ],
        '0FC1' => [ 'C', 'GeForce GT 640' ],
        '0FC2' => [ 'C', 'GeForce GT 630' ],
        '0FC6' => [ 'D', 'GeForce GTX 650' ],
        '0FC8' => [ 'D', 'GeForce GT 740' ],
        '0FC9' => [ 'C', 'GeForce GT 730' ],
        '0FCD' => [ 'D', 'GeForce GT 755M' ],
        '0FCE' => [ 'C', 'GeForce GT 640M LE' ],
        '0FD1' => [ 'D', 'GeForce GT 650M' ],
        '0FD2' => [ 'D', 'GeForce GT 640M' ],
        '0FD2' => [ 'C', 'GeForce GT 640M LE' ],
        '0FD2' => [ 'C', 'GeForce GT 640M LE' ],
        '0FD3' => [ 'C', 'GeForce GT 640M LE' ],
        '0FD4' => [ 'D', 'GeForce GTX 660M' ],
        '0FD5' => [ 'D', 'GeForce GT 650M' ],
        '0FD8' => [ 'D', 'GeForce GT 640M' ],
        '0FD9' => [ 'D', 'GeForce GT 645M' ],
        '0FDF' => [ 'D', 'GeForce GT 740M' ],
        '0FE0' => [ 'D', 'GeForce GTX 660M' ],
        '0FE1' => [ 'D', 'GeForce GT 730M' ],
        '0FE2' => [ 'D', 'GeForce GT 745M' ],
        '0FE3' => [ 'D', 'GeForce GT 745M' ],
        '0FE3' => [ 'D', 'GeForce GT 745A' ],
        '0FE3' => [ 'D', 'GeForce GT 745A' ],
        '0FE4' => [ 'D', 'GeForce GT 750M' ],
        '0FE9' => [ 'D', 'GeForce GT 750M' ],
        '0FEA' => [ 'D', 'GeForce GT 755M' ],
        '0FEC' => [ 'C', 'GeForce 710A' ],
        '0FED' => [ 'C', 'GeForce 820M' ],
        '0FEE' => [ 'C', 'GeForce 810M' ],
        '1001' => [ 'D', 'GeForce GTX TITAN Z' ],
        '1004' => [ 'D', 'GeForce GTX 780' ],
        '1005' => [ 'D', 'GeForce GTX TITAN' ],
        '1007' => [ 'D', 'GeForce GTX 780' ],
        '1008' => [ 'D', 'GeForce GTX 780 Ti' ],
        '100A' => [ 'D', 'GeForce GTX 780 Ti' ],
        '100C' => [ 'D', 'GeForce GTX TITAN Black' ],
        '1040' => [ 'C', 'GeForce GT 520' ],
        '1042' => [ 'D', 'GeForce 510' ],
        '1048' => [ 'D', 'GeForce 605' ],
        '1049' => [ 'C', 'GeForce GT 620' ],
        '104A' => [ 'C', 'GeForce GT 610' ],
        '104B' => [ 'D', 'GeForce GT 625 (OEM)' ],
        '104B' => [ 'D', 'GeForce GT 625' ],
        '104B' => [ 'D', 'GeForce GT 625' ],
        '104B' => [ 'D', 'GeForce GT 625' ],
        '104B' => [ 'D', 'GeForce GT 625' ],
        '104B' => [ 'D', 'GeForce GT 625' ],
        '104C' => [ 'D', 'GeForce GT 705' ],
        '1050' => [ 'C', 'GeForce GT 520M' ],
        '1051' => [ 'D', 'GeForce GT 520MX' ],
        '1052' => [ 'C', 'GeForce GT 520M' ],
        '1054' => [ 'D', 'GeForce 410M' ],
        '1055' => [ 'D', 'GeForce 410M' ],
        '1058' => [ 'C', 'GeForce 610M' ],
        '1058' => [ 'D', 'GeForce 610' ],
        '1058' => [ 'D', 'GeForce 800A' ],
        '1058' => [ 'C', 'GeForce  705A' ],
        '1058' => [ 'D', 'GeForce 800A' ],
        '1058' => [ 'D', 'GeForce 800A' ],
        '1058' => [ 'D', 'GeForce 800A' ],
        '1058' => [ 'D', 'GeForce 800A' ],
        '1058' => [ 'D', 'GeForce 800A' ],
        '1059' => [ 'C', 'GeForce 610M' ],
        '105A' => [ 'C', 'GeForce 610M' ],
        '105B' => [ 'C', 'GeForce 705M' ],
        '105B' => [ 'C', 'GeForce 705A' ],
        '105B' => [ 'D', 'GeForce 800A' ],
        '105B' => [ 'C', 'GeForce 705A' ],
        '105B' => [ 'D', 'GeForce 800A' ],
        '1080' => [ 'C', 'GeForce GTX 580' ],
        '1081' => [ 'C', 'GeForce GTX 570' ],
        '1082' => [ 'C', 'GeForce GTX 560 Ti' ],
        '1084' => [ 'C', 'GeForce GTX 560' ],
        '1086' => [ 'C', 'GeForce GTX 570' ],
        '1087' => [ 'C', 'GeForce GTX 560 Ti' ],
        '1088' => [ 'C', 'GeForce GTX 590' ],
        '1089' => [ 'C', 'GeForce GTX 580' ],
        '108B' => [ 'C', 'GeForce GTX 580' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 620M' ],
        '1140' => [ 'C', 'GeForce GT 620M' ],
        '1140' => [ 'C', 'GeForce GT 620M' ],
        '1140' => [ 'C', 'GeForce GT 620M' ],
        '1140' => [ 'C', 'GeForce GT 620M' ],
        '1140' => [ 'C', 'GeForce GT 620M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce GT 620M' ],
        '1140' => [ 'C', 'GeForce GT 620M' ],
        '1140' => [ 'C', 'GeForce GT 620M' ],
        '1140' => [ 'C', 'GeForce GT 620M' ],
        '1140' => [ 'C', 'GeForce GT 620M' ],
        '1140' => [ 'C', 'GeForce GT 620M' ],
        '1140' => [ 'C', 'GeForce GT 620M' ],
        '1140' => [ 'C', 'GeForce GT 620M' ],
        '1140' => [ 'C', 'GeForce GT 620M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 810M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 810M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce GT 630M' ],
        '1140' => [ 'C', 'GeForce GT 630M' ],
        '1140' => [ 'C', 'GeForce GT 620M' ],
        '1140' => [ 'C', 'GeForce GT 620M' ],
        '1140' => [ 'C', 'GeForce GT 625M' ],
        '1140' => [ 'C', 'GeForce GT 630M' ],
        '1140' => [ 'C', 'GeForce GT 630M' ],
        '1140' => [ 'C', 'GeForce GT 630M' ],
        '1140' => [ 'C', 'GeForce GT 625M' ],
        '1140' => [ 'C', 'GeForce GT 625M' ],
        '1140' => [ 'C', 'GeForce GT 625M' ],
        '1140' => [ 'C', 'GeForce GT 625M' ],
        '1140' => [ 'C', 'GeForce GT 625M' ],
        '1140' => [ 'C', 'GeForce GT 625M' ],
        '1140' => [ 'C', 'GeForce GT 630M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 630M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce GT 630M' ],
        '1140' => [ 'C', 'GeForce GT 630M' ],
        '1140' => [ 'C', 'GeForce GT 630M' ],
        '1140' => [ 'C', 'GeForce GT 630M' ],
        '1140' => [ 'C', 'GeForce GT 630M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce GT 720A' ],
        '1140' => [ 'C', 'GeForce 710A' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 620M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce GT 620M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 710M' ],
        '1140' => [ 'C', 'GeForce GT 710M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce GT 620M' ],
        '1140' => [ 'C', 'GeForce GT 630M' ],
        '1140' => [ 'C', 'GeForce GT 620M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce GT 620M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce GT 710M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 620M' ],
        '1140' => [ 'C', 'GeForce GT 630M' ],
        '1140' => [ 'C', 'GeForce GT 630M' ],
        '1140' => [ 'C', 'GeForce GT 820M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce GT 630M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720A' ],
        '1140' => [ 'C', 'GeForce 820A' ],
        '1140' => [ 'C', 'GeForce 720A' ],
        '1140' => [ 'C', 'GeForce 820A' ],
        '1140' => [ 'C', 'GeForce 820A' ],
        '1140' => [ 'C', 'GeForce 820A' ],
        '1140' => [ 'C', 'GeForce 820A' ],
        '1140' => [ 'C', 'GeForce GT 620M' ],
        '1140' => [ 'C', 'GeForce 705M' ],
        '1140' => [ 'C', 'GeForce 800M' ],
        '1140' => [ 'C', 'GeForce 820A' ],
        '1140' => [ 'C', 'GeForce 800M' ],
        '1140' => [ 'C', 'GeForce 800M' ],
        '1140' => [ 'C', 'GeForce 800M' ],
        '1140' => [ 'C', 'GeForce 705A' ],
        '1140' => [ 'C', 'GeForce 820A' ],
        '1140' => [ 'C', 'GeForce 820A' ],
        '1140' => [ 'C', 'GeForce 820A' ],
        '1140' => [ 'C', 'GeForce 820A' ],
        '1140' => [ 'C', 'GeForce 820A' ],
        '1140' => [ 'C', 'GeForce 820A' ],
        '1140' => [ 'C', 'GeForce 820A' ],
        '1140' => [ 'C', 'GeForce 820A' ],
        '1140' => [ 'C', 'GeForce 820A' ],
        '1140' => [ 'C', 'GeForce 820A' ],
        '1140' => [ 'C', 'GeForce 820A' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 820M' ],
        '1140' => [ 'C', 'GeForce GT 820M' ],
        '1140' => [ 'C', 'GeForce GT 820M' ],
        '1140' => [ 'C', 'GeForce GT 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 610M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce GT 625M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 610M' ],
        '1140' => [ 'C', 'GeForce 610M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce 705M' ],
        '1140' => [ 'C', 'GeForce GT 620M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce 705M' ],
        '1140' => [ 'C', 'GeForce 705M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce GT 620M' ],
        '1140' => [ 'C', 'GeForce GT 620M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 810M' ],
        '1180' => [ 'D', 'GeForce GTX 680' ],
        '1183' => [ 'D', 'GeForce GTX 660 Ti' ],
        '1184' => [ 'D', 'GeForce GTX 770' ],
        '1185' => [ 'D', 'GeForce GTX 660' ],
        '1185' => [ 'D', 'GeForce GTX 760' ],
        '1187' => [ 'D', 'GeForce GTX 760' ],
        '1188' => [ 'D', 'GeForce GTX 690' ],
        '1189' => [ 'D', 'GeForce GTX 670' ],
        '1189' => [ 'D', 'GeForce GTX 760 Ti OEM' ],
        '118E' => [ 'D', 'GeForce GTX 760 (192-bit)' ],
        '1193' => [ 'D', 'GeForce GTX 760 Ti OEM' ],
        '1195' => [ 'D', 'GeForce GTX 660' ],
        '1198' => [ 'D', 'GeForce GTX 880M' ],
        '1199' => [ 'D', 'GeForce GTX 870M' ],
        '1199' => [ 'D', 'GeForce GTX 760' ],
        '119A' => [ 'D', 'GeForce GTX 860M' ],
        '119D' => [ 'D', 'GeForce GTX 775M' ],
        '119E' => [ 'D', 'GeForce GTX 780M' ],
        '119F' => [ 'D', 'GeForce GTX 780M' ],
        '11A0' => [ 'D', 'GeForce GTX 680M' ],
        '11A1' => [ 'D', 'GeForce GTX 670MX' ],
        '11A2' => [ 'D', 'GeForce GTX 675MX' ],
        '11A3' => [ 'D', 'GeForce GTX 680MX' ],
        '11A7' => [ 'D', 'GeForce GTX 675MX' ],
        '11C0' => [ 'D', 'GeForce GTX 660' ],
        '11C2' => [ 'D', 'GeForce GTX 650 Ti BOOST' ],
        '11C3' => [ 'D', 'GeForce GTX 650 Ti' ],
        '11C4' => [ 'D', 'GeForce GTX 645' ],
        '11C5' => [ 'D', 'GeForce GT 740' ],
        '11C6' => [ 'D', 'GeForce GTX 650 Ti' ],
        '11C8' => [ 'D', 'GeForce GTX 650' ],
        '11CB' => [ 'D', 'GeForce GT 740' ],
        '11E0' => [ 'D', 'GeForce GTX 770M' ],
        '11E1' => [ 'D', 'GeForce GTX 765M' ],
        '11E2' => [ 'D', 'GeForce GTX 765M' ],
        '11E3' => [ 'D', 'GeForce GTX 760M' ],
        '11E3' => [ 'D', 'GeForce GTX 760A' ],
        '1200' => [ 'C', 'GeForce GTX 560 Ti' ],
        '1201' => [ 'C', 'GeForce GTX 560' ],
        '1203' => [ 'C', 'GeForce GTX 460 SE v2' ],
        '1205' => [ 'C', 'GeForce GTX 460 v2' ],
        '1206' => [ 'C', 'GeForce GTX 555' ],
        '1207' => [ 'C', 'GeForce GT 645' ],
        '1208' => [ 'C', 'GeForce GTX 560 SE' ],
        '1210' => [ 'C', 'GeForce GTX 570M' ],
        '1211' => [ 'C', 'GeForce GTX 580M' ],
        '1212' => [ 'C', 'GeForce GTX 675M' ],
        '1213' => [ 'C', 'GeForce GTX 670M' ],
        '1241' => [ 'C', 'GeForce GT 545' ],
        '1243' => [ 'C', 'GeForce GT 545' ],
        '1244' => [ 'C', 'GeForce GTX 550 Ti' ],
        '1245' => [ 'C', 'GeForce GTS 450' ],
        '1246' => [ 'C', 'GeForce GT 550M' ],
        '1247' => [ 'C', 'GeForce GT 555M' ],
        '1247' => [ 'C', 'GeForce GT 635M' ],
        '1247' => [ 'C', 'GeForce GT 635M' ],
        '1247' => [ 'C', 'GeForce GT 635M' ],
        '1248' => [ 'C', 'GeForce GT 555M' ],
        '1249' => [ 'C', 'GeForce GTS 450' ],
        '124B' => [ 'C', 'GeForce GT 640' ],
        '124D' => [ 'C', 'GeForce GT 555M' ],
        '124D' => [ 'C', 'GeForce GT 635M' ],
        '1251' => [ 'C', 'GeForce GTX 560M' ],
        '1280' => [ 'D', 'GeForce GT 635' ],
        '1281' => [ 'D', 'GeForce GT 710' ],
        '1282' => [ 'C', 'GeForce GT 640' ],
        '1284' => [ 'C', 'GeForce GT 630' ],
        '1286' => [ 'D', 'GeForce GT 720' ],
        '1287' => [ 'C', 'GeForce GT 730' ],
        '1288' => [ 'D', 'GeForce GT 720' ],
        '1289' => [ 'D', 'GeForce GT 710' ],
        '128B' => [ 'D', 'GeForce GT 710' ],
        '1290' => [ 'D', 'GeForce GT 730M' ],
        '1290' => [ 'D', 'GeForce 730A' ],
        '1291' => [ 'D', 'GeForce GT 735M' ],
        '1292' => [ 'D', 'GeForce GT 740M' ],
        '1292' => [ 'D', 'GeForce GT 740A' ],
        '1292' => [ 'D', 'GeForce GT 740A' ],
        '1292' => [ 'D', 'GeForce GT 740A' ],
        '1293' => [ 'D', 'GeForce GT 730M' ],
        '1295' => [ 'D', 'GeForce 710M' ],
        '1295' => [ 'C', 'GeForce 710A' ],
        '1295' => [ 'C', 'GeForce 710A' ],
        '1295' => [ 'D', 'GeForce 810A' ],
        '1295' => [ 'D', 'GeForce 810A' ],
        '1295' => [ 'D', 'GeForce 805A' ],
        '1295' => [ 'D', 'GeForce 710A' ],
        '1296' => [ 'D', 'GeForce 825M' ],
        '1298' => [ 'C', 'GeForce GT 720M' ],
        '1299' => [ 'D', 'GeForce 920M' ],
        '1299' => [ 'D', 'GeForce 920A' ],
        '1299' => [ 'D', 'GeForce 920A' ],
        '1299' => [ 'D', 'GeForce 920A' ],
        '1299' => [ 'D', 'GeForce 920A' ],
        '1299' => [ 'D', 'GeForce 920A' ],
        '1299' => [ 'D', 'GeForce 920A' ],
        '1299' => [ 'D', 'GeForce 920A' ],
        '1299' => [ 'D', 'GeForce 920A' ],
        '1299' => [ 'D', 'GeForce 920A' ],
        '1299' => [ 'D', 'GeForce 920A' ],
        '1299' => [ 'D', 'GeForce 920A' ],
        '1299' => [ 'D', 'GeForce 920A' ],
        '1299' => [ 'D', 'GeForce 920A' ],
        '1299' => [ 'D', 'GeForce 920A' ],
        '1299' => [ 'D', 'GeForce 920A' ],
        '1299' => [ 'C', 'GeForce GT 730' ],
        '129A' => [ 'D', 'GeForce 910M' ],
        '1340' => [ 'E', 'GeForce 830M' ],
        '1340' => [ 'E', 'GeForce 830A' ],
        '1341' => [ 'E', 'GeForce 840M' ],
        '1341' => [ 'E', 'GeForce 840A' ],
        '1341' => [ 'E', 'GeForce 840A' ],
        '1341' => [ 'E', 'GeForce 840A' ],
        '1341' => [ 'E', 'GeForce 840A' ],
        '1344' => [ 'E', 'GeForce 845M' ],
        '1346' => [ 'E', 'GeForce 930M' ],
        '1346' => [ 'E', 'GeForce 930A' ],
        '1346' => [ 'E', 'GeForce 930A' ],
        '1346' => [ 'E', 'GeForce 930A' ],
        '1346' => [ 'E', 'GeForce 930A' ],
        '1347' => [ 'E', 'GeForce 940M' ],
        '1347' => [ 'E', 'GeForce 940A' ],
        '1347' => [ 'E', 'GeForce 940A' ],
        '1348' => [ 'E', 'GeForce 945M' ],
        '1348' => [ 'E', 'GeForce 945A' ],
        '1349' => [ 'E', 'GeForce 930M' ],
        '1349' => [ 'E', 'GeForce 930A' ],
        '1349' => [ 'E', 'GeForce 930A' ],
        '1349' => [ 'E', 'GeForce 930A' ],
        '1349' => [ 'E', 'GeForce 930A' ],
        '1349' => [ 'E', 'GeForce 930A' ],
        '134B' => [ 'E', 'GeForce 940MX' ],
        '134B' => [ 'E', 'GeForce GPU' ],
        '134D' => [ 'E', 'GeForce 940MX' ],
        '134E' => [ 'E', 'GeForce 930MX' ],
        '134F' => [ 'E', 'GeForce 920MX' ],
        '137D' => [ 'E', 'GeForce 940A' ],
        '1380' => [ 'E', 'GeForce GTX 750 Ti' ],
        '1381' => [ 'E', 'GeForce GTX 750' ],
        '1382' => [ 'E', 'GeForce GTX 745' ],
        '1390' => [ 'E', 'GeForce 845M' ],
        '1391' => [ 'E', 'GeForce GTX 850M' ],
        '1391' => [ 'E', 'GeForce GTX 850A' ],
        '1392' => [ 'D', 'GeForce GTX 860M' ],
        '1392' => [ 'E', 'GeForce GPU' ],
        '1392' => [ 'E', 'GeForce GTX 750 Ti' ],
        '1392' => [ 'E', 'GeForce GTX 750 Ti' ],
        '1393' => [ 'E', 'GeForce 840M' ],
        '1398' => [ 'E', 'GeForce 845M' ],
        '1399' => [ 'E', 'GeForce 945M' ],
        '139A' => [ 'E', 'GeForce GTX 950M' ],
        '139A' => [ 'E', 'GeForce GTX 950A' ],
        '139A' => [ 'E', 'GeForce GTX 950A' ],
        '139A' => [ 'E', 'GeForce GTX 950A' ],
        '139A' => [ 'E', 'GeForce GTX 950A' ],
        '139A' => [ 'E', 'GeForce GTX 950A' ],
        '139A' => [ 'E', 'GeForce GTX 950A' ],
        '139B' => [ 'E', 'GeForce GTX 960M' ],
        '139B' => [ 'E', 'GeForce GTX 750 Ti' ],
        '139B' => [ 'D', 'GeForce GTX 860M' ],
        '139B' => [ 'E', 'GeForce GTX 960A' ],
        '139B' => [ 'E', 'GeForce GTX 750Ti' ],
        '139B' => [ 'E', 'GeForce GTX 960A' ],
        '139B' => [ 'E', 'GeForce GTX 750 Ti' ],
        '139B' => [ 'E', 'GeForce GTX 750Ti' ],
        '139C' => [ 'E', 'GeForce 940M' ],
        '139D' => [ 'E', 'GeForce GTX 750 Ti' ],
        '13C0' => [ 'E', 'GeForce GTX 980' ],
        '13C2' => [ 'E', 'GeForce GTX 970' ],
        '13D7' => [ 'E', 'GeForce GTX 980M' ],
        '13D8' => [ 'E', 'GeForce GTX 970M' ],
        '13D8' => [ 'E', 'GeForce GTX 960' ],
        '13D8' => [ 'E', 'GeForce GTX 960' ],
        '13D8' => [ 'E', 'GeForce GTX 960' ],
        '13D8' => [ 'E', 'GeForce GTX 960' ],
        '13D8' => [ 'E', 'GeForce GTX 960' ],
        '13D9' => [ 'E', 'GeForce GTX 965M' ],
        '13DA' => [ 'E', 'GeForce GTX 980' ],
        '1401' => [ 'F', 'GeForce GTX 960' ],
        '1402' => [ 'F', 'GeForce GTX 950' ],
        '1406' => [ 'F', 'GeForce GTX 960' ],
        '1407' => [ 'E', 'GeForce GTX 750' ],
        '1427' => [ 'E', 'GeForce GTX 965M' ],
        '1427' => [ 'F', 'GeForce GTX 950' ],
        '1617' => [ 'E', 'GeForce GTX 980M' ],
        '1618' => [ 'E', 'GeForce GTX 970M' ],
        '1619' => [ 'E', 'GeForce GTX 965M' ],
        '161A' => [ 'E', 'GeForce GTX 980' ],
        '1667' => [ 'E', 'GeForce GTX 965M' ],
        '174D' => [ 'E', 'GeForce MX130' ],
        '174E' => [ 'E', 'GeForce MX110' ],
        '179C' => [ 'E', 'GeForce 940MX' ],
        '17C2' => [ 'E', 'GeForce GTX TITAN X' ],
        '17C8' => [ 'E', 'GeForce GTX 980 Ti' ],
        '1B00' => [ 'H', 'TITAN X (Pascal)' ],
        '1B02' => [ 'H', 'TITAN Xp' ],
        '1B02' => [ 'H', 'TITAN Xp COLLECTORS EDITION' ],
        '1B02' => [ 'H', 'TITAN Xp COLLECTORS EDITION' ],
        '1B06' => [ 'H', 'GeForce GTX 1080 Ti' ],
        '1B80' => [ 'H', 'GeForce GTX 1080' ],
        '1B81' => [ 'H', 'GeForce GTX 1070' ],
        '1B82' => [ 'H', 'GeForce GTX 1070 Ti' ],
        '1B83' => [ 'H', 'GeForce GTX 1060 6GB' ],
        '1B84' => [ 'H', 'GeForce GTX 1060 3GB' ],
        '1B87' => [ 'H', 'P104-100' ],
        '1BA0' => [ 'H', 'GeForce GTX 1080' ],
        '1BA0' => [ 'H', 'GeForce GTX 1080 with Max-Q Design' ],
        '1BA1' => [ 'H', 'GeForce GTX 1070' ],
        '1BA1' => [ 'H', 'GeForce GTX 1070 with Max-Q Design' ],
        '1BA1' => [ 'H', 'GeForce GTX 1070 with Max-Q Design' ],
        '1BA1' => [ 'H', 'GeForce GTX 1070 with Max-Q Design' ],
        '1BA1' => [ 'H', 'GeForce GTX 1070 with Max-Q Design' ],
        '1BA1' => [ 'H', 'GeForce GTX 1070 with Max-Q Design' ],
        '1BA1' => [ 'H', 'GeForce GTX 1070 with Max-Q Design' ],
        '1BA1' => [ 'H', 'GeForce GTX 1070 with Max-Q Design' ],
        '1BA1' => [ 'H', 'GeForce GTX 1070 with Max-Q Design' ],
        '1BA1' => [ 'H', 'GeForce GTX 1070 with Max-Q Design' ],
        '1BA1' => [ 'H', 'GeForce GTX 1070 with Max-Q Design' ],
        '1BA1' => [ 'H', 'GeForce GTX 1070 with Max-Q Design' ],
        '1BC7' => [ 'H', 'P104-101' ],
        '1BE0' => [ 'H', 'GeForce GTX 1080' ],
        '1BE0' => [ 'H', 'GeForce GTX 1080 with Max-Q Design' ],
        '1BE0' => [ 'H', 'GeForce GTX 1080 with Max-Q Design' ],
        '1BE0' => [ 'H', 'GeForce GTX 1080 with Max-Q Design' ],
        '1BE0' => [ 'H', 'GeForce GTX 1080 with Max-Q Design' ],
        '1BE0' => [ 'H', 'GeForce GTX 1080 with Max-Q Design' ],
        '1BE0' => [ 'H', 'GeForce GTX 1080 with Max-Q Design' ],
        '1BE0' => [ 'H', 'GeForce GTX 1080 with Max-Q Design' ],
        '1BE0' => [ 'H', 'GeForce GTX 1080 with Max-Q Design' ],
        '1BE1' => [ 'H', 'GeForce GTX 1070' ],
        '1BE1' => [ 'H', 'GeForce GTX 1070 with Max-Q Design' ],
        '1BE1' => [ 'H', 'GeForce GTX 1070 with Max-Q Design' ],
        '1BE1' => [ 'H', 'GeForce GTX 1070 with Max-Q Design' ],
        '1C02' => [ 'H', 'GeForce GTX 1060 3GB' ],
        '1C03' => [ 'H', 'GeForce GTX 1060 6GB' ],
        '1C04' => [ 'H', 'GeForce GTX 1060 5GB' ],
        '1C06' => [ 'H', 'GeForce GTX 1060 6GB' ],
        '1C07' => [ 'H', 'P106-100' ],
        '1C09' => [ 'H', 'P106-090' ],
        '1C20' => [ 'H', 'GeForce GTX 1060' ],
        '1C20' => [ 'H', 'GeForce GTX 1060 with Max-Q Design' ],
        '1C20' => [ 'H', 'GeForce GTX 1060 with Max-Q Design' ],
        '1C20' => [ 'H', 'GeForce GTX 1060 with Max-Q Design' ],
        '1C20' => [ 'H', 'GeForce GTX 1060 with Max-Q Design' ],
        '1C20' => [ 'H', 'GeForce GTX 1060 with Max-Q Design' ],
        '1C20' => [ 'H', 'GeForce GTX 1060 with Max-Q Design' ],
        '1C20' => [ 'H', 'GeForce GTX 1060 with Max-Q Design' ],
        '1C20' => [ 'H', 'GeForce GTX 1060 with Max-Q Design' ],
        '1C20' => [ 'H', 'GeForce GTX 1060 with Max-Q Design' ],
        '1C20' => [ 'H', 'GeForce GTX 1060 with Max-Q Design' ],
        '1C21' => [ 'H', 'GeForce GTX 1050 Ti' ],
        '1C22' => [ 'H', 'GeForce GTX 1050' ],
        '1C60' => [ 'H', 'GeForce GTX 1060' ],
        '1C60' => [ 'H', 'GeForce GTX 1060 with Max-Q Design' ],
        '1C60' => [ 'H', 'GeForce GTX 1060 with Max-Q Design' ],
        '1C61' => [ 'H', 'GeForce GTX 1050 Ti' ],
        '1C62' => [ 'H', 'GeForce GTX 1050' ],
        '1C81' => [ 'H', 'GeForce GTX 1050' ],
        '1C82' => [ 'H', 'GeForce GTX 1050 Ti' ],
        '1C83' => [ 'H', 'GeForce GTX 1050' ],
        '1C8C' => [ 'H', 'GeForce GTX 1050 Ti' ],
        '1C8C' => [ 'H', 'GeForce GTX 1050 Ti with Max-Q Design' ],
        '1C8C' => [ 'H', 'GeForce GTX 1050 Ti with Max-Q Design' ],
        '1C8C' => [ 'H', 'GeForce GTX 1050 Ti with Max-Q Design' ],
        '1C8D' => [ 'H', 'GeForce GTX 1050' ],
        '1C8D' => [ 'H', 'GeForce GTX 1050 with Max-Q Design' ],
        '1C8D' => [ 'H', 'GeForce GTX 1050 with Max-Q Design' ],
        '1C8D' => [ 'H', 'GeForce GTX 1050 with Max-Q Design' ],
        '1C8F' => [ 'H', 'GeForce GTX 1050 Ti' ],
        '1D01' => [ 'H', 'GeForce GT 1030' ],
        '1D10' => [ 'H', 'GeForce MX150' ],
        '1D12' => [ 'H', 'GeForce MX150' ],
        '1D81' => [ 'I', 'TITAN V' ],
        '06D8' => [ 'C', 'Quadro 6000' ],
        '06D9' => [ 'C', 'Quadro 5000' ],
        '06DA' => [ 'C', 'Quadro 5000M' ],
        '06DC' => [ 'C', 'Quadro 6000' ],
        '06DD' => [ 'C', 'Quadro 4000' ],
        '0DD8' => [ 'C', 'Quadro 2000' ],
        '0DD8' => [ 'C', 'Quadro 2000D' ],
        '0DDA' => [ 'C', 'Quadro 2000M' ],
        '0DF8' => [ 'C', 'Quadro 600' ],
        '0DF9' => [ 'C', 'Quadro 500M' ],
        '0DFA' => [ 'C', 'Quadro 1000M' ],
        '0E3A' => [ 'C', 'Quadro 3000M' ],
        '0E3B' => [ 'C', 'Quadro 4000M' ],
        '0FF3' => [ 'D', 'Quadro K420' ],
        '0FF6' => [ 'D', 'Quadro K1100M' ],
        '0FF8' => [ 'D', 'Quadro K500M' ],
        '0FF9' => [ 'D', 'Quadro K2000D' ],
        '0FFA' => [ 'D', 'Quadro K600' ],
        '0FFB' => [ 'D', 'Quadro K2000M' ],
        '0FFC' => [ 'D', 'Quadro K1000M' ],
        '0FFE' => [ 'D', 'Quadro K2000' ],
        '0FFF' => [ 'D', 'Quadro 410' ],
        '103A' => [ 'D', 'Quadro K6000' ],
        '103C' => [ 'D', 'Quadro K5200' ],
        '109A' => [ 'C', 'Quadro 5010M' ],
        '109B' => [ 'C', 'Quadro 7000' ],
        '11B4' => [ 'D', 'Quadro K4200' ],
        '11B6' => [ 'D', 'Quadro K3100M' ],
        '11B7' => [ 'D', 'Quadro K4100M' ],
        '11B8' => [ 'D', 'Quadro K5100M' ],
        '11BA' => [ 'D', 'Quadro K5000' ],
        '11BC' => [ 'D', 'Quadro K5000M' ],
        '11BD' => [ 'D', 'Quadro K4000M' ],
        '11BE' => [ 'D', 'Quadro K3000M' ],
        '11FA' => [ 'D', 'Quadro K4000' ],
        '11FC' => [ 'D', 'Quadro K2100M' ],
        '12B9' => [ 'D', 'Quadro K610M' ],
        '12BA' => [ 'D', 'Quadro K510M' ],
        '137A' => [ 'E', 'Quadro K620M' ],
        '137A' => [ 'E', 'Quadro M500M' ],
        '137A' => [ 'E', 'Quadro M500M' ],
        '137B' => [ 'E', 'Quadro M520' ],
        '13B0' => [ 'E', 'Quadro M2000M' ],
        '13B1' => [ 'E', 'Quadro M1000M' ],
        '13B2' => [ 'E', 'Quadro M600M' ],
        '13B3' => [ 'E', 'Quadro K2200M' ],
        '13B4' => [ 'E', 'Quadro M620' ],
        '13B6' => [ 'E', 'Quadro M1200' ],
        '13BA' => [ 'E', 'Quadro K2200' ],
        '13BB' => [ 'E', 'Quadro K620' ],
        '13BC' => [ 'E', 'Quadro K1200' ],
        '13F0' => [ 'E', 'Quadro M5000' ],
        '13F1' => [ 'E', 'Quadro M4000' ],
        '13F8' => [ 'E', 'Quadro M5000M' ],
        '13F8' => [ 'E', 'Quadro M5000 SE' ],
        '13F9' => [ 'E', 'Quadro M4000M' ],
        '13FA' => [ 'E', 'Quadro M3000M' ],
        '13FA' => [ 'E', 'Quadro M3000 SE' ],
        '13FB' => [ 'E', 'Quadro M5500' ],
        '1430' => [ 'F', 'Quadro M2000' ],
        '15F0' => [ 'G', 'Quadro GP100' ],
        '17F0' => [ 'E', 'Quadro M6000' ],
        '17F1' => [ 'E', 'Quadro M6000 24GB' ],
        '1B30' => [ 'H', 'Quadro P6000' ],
        '1BB0' => [ 'H', 'Quadro P5000' ],
        '1BB1' => [ 'H', 'Quadro P4000' ],
        '1BB5' => [ 'H', 'Quadro P5200' ],
        '1BB6' => [ 'H', 'Quadro P5000' ],
        '1BB7' => [ 'H', 'Quadro P4000' ],
        '1BB7' => [ 'H', 'Quadro P4000 with Max-Q Design' ],
        '1BB7' => [ 'H', 'Quadro P4000 with Max-Q Design' ],
        '1BB8' => [ 'H', 'Quadro P3000' ],
        '1BB9' => [ 'H', 'Quadro P4200' ],
        '1BBB' => [ 'H', 'Quadro P3200' ],
        '1C30' => [ 'H', 'Quadro P2000' ],
        '1CB1' => [ 'H', 'Quadro P1000' ],
        '1CB2' => [ 'H', 'Quadro P600' ],
        '1CB3' => [ 'H', 'Quadro P400' ],
        '1CB6' => [ 'H', 'Quadro P620' ],
        '1CBA' => [ 'H', 'Quadro P2000' ],
        '1CBB' => [ 'H', 'Quadro P1000' ],
        '1CBC' => [ 'H', 'Quadro P600' ],
        '1D33' => [ 'H', 'Quadro P500' ],
        '1DBA' => [ 'I', 'Quadro GV100' ],
        '0DEF' => [ 'C', 'NVS 5400M' ],
        '0DFC' => [ 'C', 'NVS 5200M' ],
        '0FFD' => [ 'D', 'NVS 510' ],
        '1056' => [ 'D', 'NVS 4200M' ],
        '1057' => [ 'D', 'NVS 4200M' ],
        '107C' => [ 'D', 'NVS 315' ],
        '107D' => [ 'D', 'NVS 310' ],
        '1140' => [ 'C', 'NVS 5200M' ],
        '1140' => [ 'C', 'NVS 5200M' ],
        '1140' => [ 'C', 'NVS 5200M' ],
        '1140' => [ 'C', 'NVS 5200M' ],
        '1140' => [ 'C', 'NVS 5200M' ],
        '1140' => [ 'C', 'NVS 5200M' ],
        '1140' => [ 'C', 'NVS 5200M' ],
        '13B9' => [ 'E', 'NVS 810' ],
        '06D1' => [ 'C', 'Tesla C2050 / C2070' ],
        '06D1' => [ 'C', 'Tesla C2050' ],
        '06D1' => [ 'C', 'Tesla C2070' ],
        '06D2' => [ 'C', 'Tesla M2070' ],
        '06D2' => [ 'C', 'Tesla X2070' ],
        '06DE' => [ 'C', 'Tesla T20 Processor' ],
        '06DE' => [ 'C', 'Tesla S2050' ],
        '06DE' => [ 'C', 'Tesla M2050' ],
        '06DE' => [ 'C', 'Tesla X2070' ],
        '06DE' => [ 'C', 'Tesla M2050' ],
        '06DE' => [ 'C', 'Tesla M2050' ],
        '06DE' => [ 'C', 'Tesla M2050' ],
        '06DE' => [ 'C', 'Tesla M2050' ],
        '06DE' => [ 'C', 'Tesla M2050' ],
        '06DF' => [ 'C', 'Tesla M2070-Q' ],
        '1021' => [ 'D', 'Tesla K20Xm' ],
        '1022' => [ 'D', 'Tesla K20c' ],
        '1023' => [ 'D', 'Tesla K40m' ],
        '1024' => [ 'D', 'Tesla K40c' ],
        '1026' => [ 'D', 'Tesla K20s' ],
        '1027' => [ 'D', 'Tesla K40st' ],
        '1028' => [ 'D', 'Tesla K20m' ],
        '1029' => [ 'D', 'Tesla K40s' ],
        '102A' => [ 'D', 'Tesla K40t' ],
        '102D' => [ 'D', 'Tesla K80' ],
        '1091' => [ 'C', 'Tesla M2090' ],
        '1091' => [ 'C', 'Tesla X2090' ],
        '1091' => [ 'C', 'Tesla X2090' ],
        '1091' => [ 'C', 'Tesla X2090' ],
        '1091' => [ 'C', 'Tesla X2090' ],
        '1094' => [ 'C', 'Tesla M2075' ],
        '1096' => [ 'C', 'Tesla C2075' ],
        '1096' => [ 'C', 'Tesla C2050' ],
        '118F' => [ 'D', 'Tesla K10' ],
        '1194' => [ 'D', 'Tesla K8' ],
        '13F2' => [ 'E', 'Tesla M60' ],
        '13F3' => [ 'E', 'Tesla M6' ],
        '1431' => [ 'F', 'Tesla M4' ],
        '1436' => [ 'F', 'Quadro M2200' ],
        '15F7' => [ 'G', 'Tesla P100-PCIE-12GB' ],
        '15F8' => [ 'G', 'Tesla P100-PCIE-16GB' ],
        '15F9' => [ 'G', 'Tesla P100-SXM2-16GB' ],
        '17FD' => [ 'E', 'Tesla M40' ],
        '17FD' => [ 'E', 'Tesla M40 24GB' ],
        '1B38' => [ 'H', 'Tesla P40' ],
        '1BB3' => [ 'H', 'Tesla P4' ],
        '1BB4' => [ 'H', 'Tesla P6' ],
        '1DB1' => [ 'I', 'Tesla V100-SXM2-16GB' ],
        '1DB3' => [ 'I', 'Tesla V100-FHHL-16GB' ],
        '1DB4' => [ 'I', 'Tesla V100-PCIE-16GB' ],
        '1DB5' => [ 'I', 'Tesla V100-SXM2-32GB' ],
        '1DB6' => [ 'I', 'Tesla V100-PCIE-32GB' ],
        '1DB7' => [ 'I', 'Tesla V100-DGXS-32GB' ],
        '118A' => [ 'D', 'GRID K520' ],
    },
    'nvidia-driver-340' => {
        '0191' => [ '-', 'GeForce 8800 GTX' ],
        '0193' => [ '-', 'GeForce 8800 GTS' ],
        '0194' => [ '-', 'GeForce 8800 Ultra' ],
        '0400' => [ 'A', 'GeForce 8600 GTS' ],
        '0401' => [ 'A', 'GeForce 8600 GT' ],
        '0402' => [ 'A', 'GeForce 8600 GT' ],
        '0403' => [ 'A', 'GeForce 8600 GS' ],
        '0404' => [ 'A', 'GeForce 8400 GS' ],
        '0405' => [ 'A', 'GeForce 9500M GS' ],
        '0406' => [ '-', 'GeForce 8300 GS' ],
        '0407' => [ 'A', 'GeForce 8600M GT' ],
        '0408' => [ 'A', 'GeForce 9650M GS' ],
        '0409' => [ 'A', 'GeForce 8700M GT' ],
        '0410' => [ 'A', 'GeForce GT 330' ],
        '0420' => [ '-', 'GeForce 8400 SE' ],
        '0421' => [ 'A', 'GeForce 8500 GT' ],
        '0422' => [ 'A', 'GeForce 8400 GS' ],
        '0423' => [ '-', 'GeForce 8300 GS' ],
        '0424' => [ 'A', 'GeForce 8400 GS' ],
        '0425' => [ 'A', 'GeForce 8600M GS' ],
        '0426' => [ 'A', 'GeForce 8400M GT' ],
        '0427' => [ 'A', 'GeForce 8400M GS' ],
        '0428' => [ 'A', 'GeForce 8400M G' ],
        '042C' => [ 'A', 'GeForce 9400 GT' ],
        '042E' => [ 'A', 'GeForce 9300M G' ],
        '05E0' => [ 'A', 'GeForce GTX 295' ],
        '05E1' => [ 'A', 'GeForce GTX 280' ],
        '05E2' => [ 'A', 'GeForce GTX 260' ],
        '05E3' => [ 'A', 'GeForce GTX 285' ],
        '05E6' => [ 'A', 'GeForce GTX 275' ],
        '05EA' => [ 'A', 'GeForce GTX 260' ],
        '05EB' => [ 'A', 'GeForce GTX 295' ],
        '0600' => [ 'A', 'GeForce 8800 GTS 512' ],
        '0601' => [ 'A', 'GeForce 9800 GT' ],
        '0602' => [ 'A', 'GeForce 8800 GT' ],
        '0603' => [ 'A', 'GeForce GT 230' ],
        '0604' => [ 'A', 'GeForce 9800 GX2' ],
        '0605' => [ 'A', 'GeForce 9800 GT' ],
        '0606' => [ 'A', 'GeForce 8800 GS' ],
        '0607' => [ 'A', 'GeForce GTS 240' ],
        '0608' => [ 'A', 'GeForce 9800M GTX' ],
        '0609' => [ 'A', 'GeForce 8800M GTS' ],
        '0609' => [ 'A', 'GeForce 8800 GS' ],
        '060A' => [ 'A', 'GeForce GTX 280M' ],
        '060B' => [ 'A', 'GeForce 9800M GT' ],
        '060C' => [ 'A', 'GeForce 8800M GTX' ],
        '060D' => [ 'A', 'GeForce 8800 GS' ],
        '060F' => [ 'A', 'GeForce GTX 285M' ],
        '0610' => [ 'A', 'GeForce 9600 GSO' ],
        '0611' => [ 'A', 'GeForce 8800 GT' ],
        '0612' => [ 'A', 'GeForce 9800 GTX/9800 GTX+' ],
        '0613' => [ 'A', 'GeForce 9800 GTX+' ],
        '0614' => [ 'A', 'GeForce 9800 GT' ],
        '0615' => [ 'A', 'GeForce GTS 250' ],
        '0617' => [ 'A', 'GeForce 9800M GTX' ],
        '0618' => [ 'A', 'GeForce GTX 260M' ],
        '0621' => [ 'A', 'GeForce GT 230' ],
        '0622' => [ 'A', 'GeForce 9600 GT' ],
        '0623' => [ 'A', 'GeForce 9600 GS' ],
        '0625' => [ 'A', 'GeForce 9600 GSO 512' ],
        '0626' => [ 'A', 'GeForce GT 130' ],
        '0627' => [ 'A', 'GeForce GT 140' ],
        '0628' => [ 'A', 'GeForce 9800M GTS' ],
        '062A' => [ 'A', 'GeForce 9700M GTS' ],
        '062B' => [ 'A', 'GeForce 9800M GS' ],
        '062C' => [ 'A', 'GeForce 9800M GTS' ],
        '062D' => [ 'A', 'GeForce 9600 GT' ],
        '062E' => [ 'A', 'GeForce 9600 GT' ],
        '062E' => [ 'A', 'GeForce GT 130' ],
        '0630' => [ 'A', 'GeForce 9700 S' ],
        '0631' => [ 'A', 'GeForce GTS 160M' ],
        '0632' => [ 'A', 'GeForce GTS 150M' ],
        '0635' => [ 'A', 'GeForce 9600 GSO' ],
        '0637' => [ 'A', 'GeForce 9600 GT' ],
        '0640' => [ 'A', 'GeForce 9500 GT' ],
        '0641' => [ 'A', 'GeForce 9400 GT' ],
        '0643' => [ 'A', 'GeForce 9500 GT' ],
        '0644' => [ 'A', 'GeForce 9500 GS' ],
        '0645' => [ 'A', 'GeForce 9500 GS' ],
        '0646' => [ 'A', 'GeForce GT 120' ],
        '0647' => [ 'A', 'GeForce 9600M GT' ],
        '0648' => [ 'A', 'GeForce 9600M GS' ],
        '0649' => [ 'A', 'GeForce 9600M GT' ],
        '0649' => [ 'A', 'GeForce GT 220M' ],
        '064A' => [ 'A', 'GeForce 9700M GT' ],
        '064B' => [ 'A', 'GeForce 9500M G' ],
        '064C' => [ 'A', 'GeForce 9650M GT' ],
        '0651' => [ 'A', 'GeForce G 110M' ],
        '0652' => [ 'A', 'GeForce GT 130M' ],
        '0652' => [ 'A', 'GeForce GT 240M LE' ],
        '0653' => [ 'A', 'GeForce GT 120M' ],
        '0654' => [ 'A', 'GeForce GT 220M' ],
        '0654' => [ 'A', 'GeForce GT 320M' ],
        '0654' => [ 'A', 'GeForce GT 320M' ],
        '0655' => [ 'A', 'GeForce GT 120' ],
        '0656' => [ 'A', 'GeForce GT 120' ],
        '065B' => [ 'A', 'GeForce 9400 GT' ],
        '06C0' => [ 'C', 'GeForce GTX 480' ],
        '06C4' => [ 'C', 'GeForce GTX 465' ],
        '06CA' => [ 'C', 'GeForce GTX 480M' ],
        '06CD' => [ 'C', 'GeForce GTX 470' ],
        '06E0' => [ 'B', 'GeForce 9300 GE' ],
        '06E1' => [ 'B', 'GeForce 9300 GS' ],
        '06E2' => [ 'B', 'GeForce 8400' ],
        '06E3' => [ '-', 'GeForce 8400 SE' ],
        '06E4' => [ 'A', 'GeForce 8400 GS' ],
        '06E5' => [ 'B', 'GeForce 9300M GS' ],
        '06E6' => [ 'B', 'GeForce G100' ],
        '06E7' => [ '-', 'GeForce 9300 SE' ],
        '06E8' => [ 'B', 'GeForce 9200M GS' ],
        '06E8' => [ 'B', 'GeForce 9200M GE' ],
        '06E9' => [ 'B', 'GeForce 9300M GS' ],
        '06EC' => [ 'B', 'GeForce G 105M' ],
        '06EF' => [ 'B', 'GeForce G 103M' ],
        '06F1' => [ 'B', 'GeForce G105M' ],
        '0840' => [ 'B', 'GeForce 8200M' ],
        '0844' => [ 'B', 'GeForce 9100M G' ],
        '0845' => [ 'B', 'GeForce 8200M G' ],
        '0846' => [ 'B', 'GeForce 9200' ],
        '0847' => [ 'B', 'GeForce 9100' ],
        '0848' => [ 'B', 'GeForce 8300' ],
        '0849' => [ 'B', 'GeForce 8200' ],
        '084A' => [ 'B', 'nForce 730a' ],
        '084B' => [ 'B', 'GeForce 9200' ],
        '084C' => [ 'B', 'nForce 980a/780a SLI' ],
        '084D' => [ 'B', 'nForce 750a SLI' ],
        '084F' => [ '-', 'GeForce 8100 / nForce 720a' ],
        '0860' => [ 'B', 'GeForce 9400' ],
        '0861' => [ 'B', 'GeForce 9400' ],
        '0862' => [ 'B', 'GeForce 9400M G' ],
        '0863' => [ 'B', 'GeForce 9400M' ],
        '0864' => [ 'B', 'GeForce 9300' ],
        '0865' => [ 'B', 'ION' ],
        '0866' => [ 'B', 'GeForce 9400M G' ],
        '0866' => [ 'B', 'GeForce 9400M' ],
        '0867' => [ 'B', 'GeForce 9400' ],
        '0868' => [ 'B', 'nForce 760i SLI' ],
        '0869' => [ 'B', 'GeForce 9400' ],
        '086A' => [ 'B', 'GeForce 9400' ],
        '086C' => [ 'B', 'GeForce 9300 / nForce 730i' ],
        '086D' => [ 'B', 'GeForce 9200' ],
        '086E' => [ 'B', 'GeForce 9100M G' ],
        '086F' => [ 'B', 'GeForce 8200M G' ],
        '0870' => [ 'B', 'GeForce 9400M' ],
        '0871' => [ 'B', 'GeForce 9200' ],
        '0872' => [ 'B', 'GeForce G102M' ],
        '0872' => [ 'B', 'GeForce G205M' ],
        '0873' => [ 'B', 'GeForce G102M' ],
        '0873' => [ 'B', 'GeForce G205M' ],
        '0874' => [ 'B', 'ION' ],
        '0876' => [ 'B', 'ION' ],
        '087A' => [ 'B', 'GeForce 9400' ],
        '087D' => [ 'B', 'ION' ],
        '087E' => [ 'B', 'ION LE' ],
        '087F' => [ 'B', 'ION LE' ],
        '08A0' => [ 'C', 'GeForce 320M' ],
        '08A2' => [ 'C', 'GeForce 320M' ],
        '08A3' => [ 'C', 'GeForce 320M' ],
        '08A4' => [ 'C', 'GeForce 320M' ],
        '08A5' => [ 'C', 'GeForce 320M' ],
        '0A20' => [ 'C', 'GeForce GT 220' ],
        '0A22' => [ '-', 'GeForce 315' ],
        '0A23' => [ 'C', 'GeForce 210' ],
        '0A26' => [ 'C', 'GeForce 405' ],
        '0A27' => [ 'C', 'GeForce 405' ],
        '0A28' => [ 'C', 'GeForce GT 230M' ],
        '0A29' => [ 'C', 'GeForce GT 330M' ],
        '0A2A' => [ 'C', 'GeForce GT 230M' ],
        '0A2B' => [ 'C', 'GeForce GT 330M' ],
        '0A2D' => [ 'A', 'GeForce GT 320M' ],
        '0A32' => [ 'C', 'GeForce GT 415' ],
        '0A34' => [ 'C', 'GeForce GT 240M' ],
        '0A35' => [ 'C', 'GeForce GT 325M' ],
        '0A60' => [ 'C', 'GeForce G210' ],
        '0A62' => [ 'C', 'GeForce 205' ],
        '0A63' => [ 'C', 'GeForce 310' ],
        '0A64' => [ 'C', 'Second Generation ION' ],
        '0A65' => [ 'C', 'GeForce 210' ],
        '0A66' => [ 'C', 'GeForce 310' ],
        '0A67' => [ '-', 'GeForce 315' ],
        '0A68' => [ 'B', 'GeForce G105M' ],
        '0A69' => [ 'B', 'GeForce G105M' ],
        '0A6E' => [ 'C', 'GeForce 305M' ],
        '0A6E' => [ 'C', 'Second Generation ION' ],
        '0A6F' => [ 'C', 'Second Generation ION' ],
        '0A70' => [ 'C', 'GeForce 310M' ],
        '0A70' => [ 'C', 'Second Generation ION' ],
        '0A70' => [ 'C', 'Second Generation ION' ],
        '0A71' => [ 'C', 'GeForce 305M' ],
        '0A72' => [ 'C', 'GeForce 310M' ],
        '0A73' => [ 'C', 'GeForce 305M' ],
        '0A73' => [ 'C', 'Second Generation ION' ],
        '0A73' => [ 'C', 'Second Generation ION' ],
        '0A74' => [ 'C', 'GeForce G210M' ],
        '0A74' => [ 'C', 'GeForce G210' ],
        '0A75' => [ 'C', 'GeForce 310M' ],
        '0A75' => [ 'C', 'Second Generation ION' ],
        '0A76' => [ 'C', 'Second Generation ION' ],
        '0A7A' => [ 'C', 'GeForce 315M' ],
        '0A7A' => [ 'C', 'GeForce 405' ],
        '0A7A' => [ 'C', 'GeForce 405M' ],
        '0A7A' => [ 'C', 'GeForce 405M' ],
        '0A7A' => [ 'C', 'GeForce 405' ],
        '0A7A' => [ 'C', 'GeForce 405' ],
        '0A7A' => [ 'C', 'GeForce 405' ],
        '0A7A' => [ 'C', 'GeForce 405' ],
        '0A7A' => [ 'C', 'GeForce 405' ],
        '0A7A' => [ 'C', 'GeForce 405' ],
        '0A7A' => [ 'C', 'GeForce 405' ],
        '0CA0' => [ 'A', 'GeForce GT 330' ],
        '0CA2' => [ 'C', 'GeForce GT 320' ],
        '0CA3' => [ 'C', 'GeForce GT 240' ],
        '0CA4' => [ 'C', 'GeForce GT 340' ],
        '0CA5' => [ 'C', 'GeForce GT 220' ],
        '0CA7' => [ 'A', 'GeForce GT 330' ],
        '0CA8' => [ 'C', 'GeForce GTS 260M' ],
        '0CA9' => [ 'C', 'GeForce GTS 250M' ],
        '0CAC' => [ 'C', 'GeForce GT 220' ],
        '0CAF' => [ 'C', 'GeForce GT 335M' ],
        '0CB0' => [ 'C', 'GeForce GTS 350M' ],
        '0CB1' => [ 'C', 'GeForce GTS 360M' ],
        '0DC0' => [ 'C', 'GeForce GT 440' ],
        '0DC4' => [ 'C', 'GeForce GTS 450' ],
        '0DC5' => [ 'C', 'GeForce GTS 450' ],
        '0DC6' => [ 'C', 'GeForce GTS 450' ],
        '0DCD' => [ 'C', 'GeForce GT 555M' ],
        '0DCE' => [ 'C', 'GeForce GT 555M' ],
        '0DD1' => [ 'C', 'GeForce GTX 460M' ],
        '0DD2' => [ 'C', 'GeForce GT 445M' ],
        '0DD3' => [ 'C', 'GeForce GT 435M' ],
        '0DD6' => [ 'C', 'GeForce GT 550M' ],
        '0DE0' => [ 'C', 'GeForce GT 440' ],
        '0DE1' => [ 'C', 'GeForce GT 430' ],
        '0DE2' => [ 'C', 'GeForce GT 420' ],
        '0DE3' => [ 'C', 'GeForce GT 635M' ],
        '0DE4' => [ 'C', 'GeForce GT 520' ],
        '0DE5' => [ 'C', 'GeForce GT 530' ],
        '0DE7' => [ 'C', 'GeForce GT 610' ],
        '0DE8' => [ 'C', 'GeForce GT 620M' ],
        '0DE9' => [ 'C', 'GeForce GT 630M' ],
        '0DE9' => [ 'C', 'GeForce GT 620M' ],
        '0DE9' => [ 'C', 'GeForce GT 620M' ],
        '0DE9' => [ 'C', 'GeForce GT 620M' ],
        '0DE9' => [ 'C', 'GeForce GT 620M' ],
        '0DE9' => [ 'C', 'GeForce GT 620M' ],
        '0DE9' => [ 'C', 'GeForce GT 620M' ],
        '0DE9' => [ 'C', 'GeForce GT 620M' ],
        '0DE9' => [ 'C', 'GeForce GT 635M' ],
        '0DE9' => [ 'C', 'GeForce GT 640M LE' ],
        '0DEA' => [ 'C', 'GeForce 610M' ],
        '0DEA' => [ 'C', 'GeForce 615' ],
        '0DEA' => [ 'C', 'GeForce 615' ],
        '0DEA' => [ 'C', 'GeForce 615' ],
        '0DEA' => [ 'C', 'GeForce 615' ],
        '0DEA' => [ 'C', 'GeForce 615' ],
        '0DEB' => [ 'C', 'GeForce GT 555M' ],
        '0DEC' => [ 'C', 'GeForce GT 525M' ],
        '0DED' => [ 'C', 'GeForce GT 520M' ],
        '0DEE' => [ 'C', 'GeForce GT 415M' ],
        '0DF0' => [ 'C', 'GeForce GT 425M' ],
        '0DF1' => [ 'C', 'GeForce GT 420M' ],
        '0DF2' => [ 'C', 'GeForce GT 435M' ],
        '0DF3' => [ 'C', 'GeForce GT 420M' ],
        '0DF4' => [ 'C', 'GeForce GT 540M' ],
        '0DF4' => [ 'C', 'GeForce GT 630M' ],
        '0DF4' => [ 'C', 'GeForce GT 630M' ],
        '0DF5' => [ 'C', 'GeForce GT 525M' ],
        '0DF6' => [ 'C', 'GeForce GT 550M' ],
        '0DF7' => [ 'C', 'GeForce GT 520M' ],
        '0E22' => [ 'C', 'GeForce GTX 460' ],
        '0E23' => [ 'C', 'GeForce GTX 460 SE' ],
        '0E24' => [ 'C', 'GeForce GTX 460' ],
        '0E30' => [ 'C', 'GeForce GTX 470M' ],
        '0E31' => [ 'C', 'GeForce GTX 485M' ],
        '0F00' => [ 'C', 'GeForce GT 630' ],
        '0F01' => [ 'C', 'GeForce GT 620' ],
        '0F02' => [ 'C', 'GeForce GT 730' ],
        '0FC0' => [ 'C', 'GeForce GT 640' ],
        '0FC1' => [ 'C', 'GeForce GT 640' ],
        '0FC2' => [ 'C', 'GeForce GT 630' ],
        '0FC6' => [ 'D', 'GeForce GTX 650' ],
        '0FC8' => [ 'D', 'GeForce GT 740' ],
        '0FCD' => [ 'D', 'GeForce GT 755M' ],
        '0FCE' => [ 'C', 'GeForce GT 640M LE' ],
        '0FD1' => [ 'D', 'GeForce GT 650M' ],
        '0FD2' => [ 'D', 'GeForce GT 640M' ],
        '0FD2' => [ 'C', 'GeForce GT 640M LE' ],
        '0FD2' => [ 'C', 'GeForce GT 640M LE' ],
        '0FD3' => [ 'C', 'GeForce GT 640M LE' ],
        '0FD4' => [ 'D', 'GeForce GTX 660M' ],
        '0FD5' => [ 'D', 'GeForce GT 650M' ],
        '0FD8' => [ 'D', 'GeForce GT 640M' ],
        '0FD9' => [ 'D', 'GeForce GT 645M' ],
        '0FDF' => [ 'D', 'GeForce GT 740M' ],
        '0FE0' => [ 'D', 'GeForce GTX 660M' ],
        '0FE1' => [ 'D', 'GeForce GT 730M' ],
        '0FE2' => [ 'D', 'GeForce GT 745M' ],
        '0FE3' => [ 'D', 'GeForce GT 745M' ],
        '0FE3' => [ 'D', 'GeForce GT 745A' ],
        '0FE4' => [ 'D', 'GeForce GT 750M' ],
        '0FE9' => [ 'D', 'GeForce GT 750M' ],
        '0FEA' => [ 'D', 'GeForce GT 755M' ],
        '0FEC' => [ 'C', 'GeForce 710A' ],
        '1001' => [ 'D', 'GeForce GTX TITAN Z' ],
        '1004' => [ 'D', 'GeForce GTX 780' ],
        '1005' => [ 'D', 'GeForce GTX TITAN' ],
        '1007' => [ 'D', 'GeForce GTX 780' ],
        '1008' => [ 'D', 'GeForce GTX 780 Ti' ],
        '100A' => [ 'D', 'GeForce GTX 780 Ti' ],
        '100C' => [ 'D', 'GeForce GTX TITAN Black' ],
        '1040' => [ 'C', 'GeForce GT 520' ],
        '1042' => [ 'D', 'GeForce 510' ],
        '1048' => [ 'D', 'GeForce 605' ],
        '1049' => [ 'C', 'GeForce GT 620' ],
        '104A' => [ 'C', 'GeForce GT 610' ],
        '104B' => [ 'D', 'GeForce GT 625 (OEM)' ],
        '104B' => [ 'D', 'GeForce GT 625' ],
        '104B' => [ 'D', 'GeForce GT 625' ],
        '104B' => [ 'D', 'GeForce GT 625' ],
        '104B' => [ 'D', 'GeForce GT 625' ],
        '104B' => [ 'D', 'GeForce GT 625' ],
        '104C' => [ 'D', 'GeForce GT 705' ],
        '1050' => [ 'C', 'GeForce GT 520M' ],
        '1051' => [ 'D', 'GeForce GT 520MX' ],
        '1052' => [ 'C', 'GeForce GT 520M' ],
        '1054' => [ 'D', 'GeForce 410M' ],
        '1055' => [ 'D', 'GeForce 410M' ],
        '1058' => [ 'C', 'GeForce 610M' ],
        '1058' => [ 'D', 'GeForce 610' ],
        '1059' => [ 'C', 'GeForce 610M' ],
        '105A' => [ 'C', 'GeForce 610M' ],
        '105B' => [ 'C', 'GeForce 705M' ],
        '105B' => [ 'D', 'GeForce 705A' ],
        '1080' => [ 'C', 'GeForce GTX 580' ],
        '1081' => [ 'C', 'GeForce GTX 570' ],
        '1082' => [ 'C', 'GeForce GTX 560 Ti' ],
        '1084' => [ 'C', 'GeForce GTX 560' ],
        '1086' => [ 'C', 'GeForce GTX 570' ],
        '1087' => [ 'C', 'GeForce GTX 560 Ti' ],
        '1088' => [ 'C', 'GeForce GTX 590' ],
        '1089' => [ 'C', 'GeForce GTX 580' ],
        '108B' => [ 'C', 'GeForce GTX 580' ],
        '10C0' => [ 'B', 'GeForce 9300 GS' ],
        '10C3' => [ 'A', 'GeForce 8400GS' ],
        '10C5' => [ 'C', 'GeForce 405' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 630M' ],
        '1140' => [ 'C', 'GeForce GT 630M' ],
        '1140' => [ 'C', 'GeForce GT 620M' ],
        '1140' => [ 'C', 'GeForce GT 620M' ],
        '1140' => [ 'C', 'GeForce GT625M' ],
        '1140' => [ 'C', 'GeForce GT 630M' ],
        '1140' => [ 'C', 'GeForce GT 630M' ],
        '1140' => [ 'C', 'GeForce GT 630M' ],
        '1140' => [ 'C', 'GeForce GT625M' ],
        '1140' => [ 'C', 'GeForce GT625M' ],
        '1140' => [ 'C', 'GeForce GT625M' ],
        '1140' => [ 'C', 'GeForce GT625M' ],
        '1140' => [ 'C', 'GeForce GT625M' ],
        '1140' => [ 'C', 'GeForce GT625M' ],
        '1140' => [ 'C', 'GeForce GT 630M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 630M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 620M' ],
        '1140' => [ 'C', 'GeForce GT 620M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 620M' ],
        '1140' => [ 'C', 'GeForce GT 620M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce GT 620M' ],
        '1140' => [ 'C', 'GeForce GT 620M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce GT 620M' ],
        '1140' => [ 'C', 'GeForce GT 620M' ],
        '1140' => [ 'C', 'GeForce GT 620M' ],
        '1140' => [ 'C', 'GeForce GT 620M' ],
        '1140' => [ 'C', 'GeForce GT 620M' ],
        '1140' => [ 'C', 'GeForce GT 620M' ],
        '1140' => [ 'C', 'GeForce GT 620M' ],
        '1140' => [ 'C', 'GeForce GT 620M' ],
        '1140' => [ 'C', 'GeForce GT 620M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 810M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 620M' ],
        '1140' => [ 'C', 'GeForce 810M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce GT 630M' ],
        '1140' => [ 'C', 'GeForce GT 630M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT820M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce GT 630M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce GT 710M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 620M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 630M' ],
        '1140' => [ 'C', 'GeForce GT 630M' ],
        '1140' => [ 'C', 'GeForce GT 630M' ],
        '1140' => [ 'C', 'GeForce GT 630M' ],
        '1140' => [ 'C', 'GeForce GT 630M' ],
        '1140' => [ 'C', 'GeForce GT 620M' ],
        '1140' => [ 'C', 'GeForce GT 620M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce GT 620M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 710M' ],
        '1140' => [ 'C', 'GeForce GT 710M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce GT 720A' ],
        '1140' => [ 'C', 'GeForce 710A' ],
        '1140' => [ 'C', 'GeForce GT620M' ],
        '1140' => [ 'C', 'GeForce 820A' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 610M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce GT 625M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 610M' ],
        '1140' => [ 'C', 'GeForce 610M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce 705M' ],
        '1140' => [ 'C', 'GeForce GT 620M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce 705M' ],
        '1140' => [ 'C', 'GeForce 705M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce 720M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce GT 720M' ],
        '1140' => [ 'C', 'GeForce GT 620M' ],
        '1140' => [ 'C', 'GeForce GT 630M' ],
        '1140' => [ 'C', 'GeForce GT 620M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce GT 620M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 820M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1140' => [ 'C', 'GeForce 710M' ],
        '1180' => [ 'D', 'GeForce GTX 680' ],
        '1183' => [ 'D', 'GeForce GTX 660 Ti' ],
        '1184' => [ 'D', 'GeForce GTX 770' ],
        '1185' => [ 'D', 'GeForce GTX 660' ],
        '1185' => [ 'D', 'GeForce GTX 760' ],
        '1187' => [ 'D', 'GeForce GTX 760' ],
        '1188' => [ 'D', 'GeForce GTX 690' ],
        '1189' => [ 'D', 'GeForce GTX 670' ],
        '1189' => [ 'D', 'GeForce GTX 760 Ti OEM' ],
        '118E' => [ 'D', 'GeForce GTX 760 (192-bit)' ],
        '1193' => [ 'D', 'GeForce GTX 760 Ti OEM' ],
        '1195' => [ 'D', 'GeForce GTX 660' ],
        '1198' => [ 'D', 'GeForce GTX 880M' ],
        '1199' => [ 'D', 'GeForce GTX 870M' ],
        '1199' => [ 'D', 'GeForce GTX 760' ],
        '119A' => [ 'D', 'GeForce GTX 860M' ],
        '119D' => [ 'D', 'GeForce GTX 775M' ],
        '119E' => [ 'D', 'GeForce GTX 780M' ],
        '119F' => [ 'D', 'GeForce GTX 780M' ],
        '11A0' => [ 'D', 'GeForce GTX 680M' ],
        '11A1' => [ 'D', 'GeForce GTX 670MX' ],
        '11A2' => [ 'D', 'GeForce GTX 675MX' ],
        '11A3' => [ 'D', 'GeForce GTX 680MX' ],
        '11A7' => [ 'D', 'GeForce GTX 675MX' ],
        '11C0' => [ 'D', 'GeForce GTX 660' ],
        '11C2' => [ 'D', 'GeForce GTX 650 Ti BOOST' ],
        '11C3' => [ 'D', 'GeForce GTX 650 Ti' ],
        '11C4' => [ 'D', 'GeForce GTX 645' ],
        '11C5' => [ 'D', 'GeForce GT 740' ],
        '11C6' => [ 'D', 'GeForce GTX 650 Ti' ],
        '11C8' => [ 'D', 'GeForce GTX 650' ],
        '11E0' => [ 'D', 'GeForce GTX 770M' ],
        '11E1' => [ 'D', 'GeForce GTX 765M' ],
        '11E2' => [ 'D', 'GeForce GTX 765M' ],
        '11E3' => [ 'D', 'GeForce GTX 760M' ],
        '11E3' => [ 'D', 'GeForce GTX 760A' ],
        '1200' => [ 'C', 'GeForce GTX 560 Ti' ],
        '1201' => [ 'C', 'GeForce GTX 560' ],
        '1203' => [ 'C', 'GeForce GTX 460 SE v2' ],
        '1205' => [ 'C', 'GeForce GTX 460 v2' ],
        '1206' => [ 'C', 'GeForce GTX 555' ],
        '1207' => [ 'C', 'GeForce GT 645' ],
        '1208' => [ 'C', 'GeForce GTX 560 SE' ],
        '1210' => [ 'C', 'GeForce GTX 570M' ],
        '1211' => [ 'C', 'GeForce GTX 580M' ],
        '1212' => [ 'C', 'GeForce GTX 675M' ],
        '1213' => [ 'C', 'GeForce GTX 670M' ],
        '1241' => [ 'C', 'GeForce GT 545' ],
        '1243' => [ 'C', 'GeForce GT 545' ],
        '1244' => [ 'C', 'GeForce GTX 550 Ti' ],
        '1245' => [ 'C', 'GeForce GTS 450' ],
        '1246' => [ 'C', 'GeForce GT 550M' ],
        '1247' => [ 'C', 'GeForce GT 555M' ],
        '1247' => [ 'C', 'GeForce GT 635M' ],
        '1247' => [ 'C', 'GeForce GT 635M' ],
        '1247' => [ 'C', 'GeForce GT 635M' ],
        '1248' => [ 'C', 'GeForce GT 555M' ],
        '1249' => [ 'C', 'GeForce GTS 450' ],
        '124B' => [ 'C', 'GeForce GT 640' ],
        '124D' => [ 'C', 'GeForce GT 555M' ],
        '124D' => [ 'C', 'GeForce GT 635M' ],
        '1251' => [ 'C', 'GeForce GTX 560M' ],
        '1280' => [ 'D', 'GeForce GT 635' ],
        '1281' => [ 'D', 'GeForce GT 710' ],
        '1282' => [ 'C', 'GeForce GT 640' ],
        '1284' => [ 'C', 'GeForce GT 630' ],
        '1286' => [ 'D', 'GeForce GT 720' ],
        '1287' => [ 'C', 'GeForce GT 730' ],
        '1288' => [ 'D', 'GeForce GT 720' ],
        '1290' => [ 'D', 'GeForce GT 730M' ],
        '1290' => [ 'D', 'GeForce 730A' ],
        '1291' => [ 'D', 'GeForce GT 735M' ],
        '1292' => [ 'D', 'GeForce GT 740M' ],
        '1292' => [ 'D', 'GeForce GT 740A' ],
        '1292' => [ 'D', 'GeForce GT 740A' ],
        '1293' => [ 'D', 'GeForce GT 730M' ],
        '1295' => [ 'D', 'GeForce 710M' ],
        '1295' => [ 'C', 'GeForce 710A' ],
        '1295' => [ 'C', 'GeForce 710A' ],
        '1295' => [ 'D', 'GeForce 810A' ],
        '1295' => [ 'D', 'GeForce 810A' ],
        '1296' => [ 'D', 'GeForce 825M' ],
        '1298' => [ 'C', 'GeForce GT 720M' ],
        '1340' => [ 'E', 'GeForce 830M' ],
        '1340' => [ 'E', 'GeForce 830A' ],
        '1341' => [ 'E', 'GeForce 840M' ],
        '1341' => [ 'E', 'GeForce 840A' ],
        '1341' => [ 'E', 'GeForce 840A' ],
        '1341' => [ 'E', 'GeForce 840A' ],
        '1380' => [ 'E', 'GeForce GTX 750 Ti' ],
        '1381' => [ 'E', 'GeForce GTX 750' ],
        '1382' => [ 'E', 'GeForce GTX 745' ],
        '1390' => [ 'E', 'GeForce 845M' ],
        '1391' => [ 'E', 'GeForce GTX 850M' ],
        '1391' => [ 'E', 'GeForce GTX 850A' ],
        '1392' => [ 'E', 'GeForce GTX 860M' ],
        '1392' => [ 'E', 'GeForce GTX 750 Ti' ],
        '1393' => [ 'E', 'GeForce 840M' ],
        '019D' => [ '-', 'Quadro FX 5600' ],
        '019E' => [ '-', 'Quadro FX 4600' ],
        '040A' => [ 'A', 'Quadro FX 370' ],
        '040C' => [ 'A', 'Quadro FX 570M' ],
        '040D' => [ 'A', 'Quadro FX 1600M' ],
        '040E' => [ 'A', 'Quadro FX 570' ],
        '040F' => [ 'A', 'Quadro FX 1700' ],
        '042D' => [ 'A', 'Quadro FX 360M' ],
        '05ED' => [ 'A', 'Quadroplex 2200 D2' ],
        '05F8' => [ 'A', 'Quadroplex 2200 S4' ],
        '05F9' => [ 'A', 'Quadro CX' ],
        '05FD' => [ 'A', 'Quadro FX 5800' ],
        '05FE' => [ 'A', 'Quadro FX 4800' ],
        '05FF' => [ 'A', 'Quadro FX 3800' ],
        '0619' => [ 'A', 'Quadro FX 4700 X2' ],
        '061A' => [ 'A', 'Quadro FX 3700' ],
        '061B' => [ 'A', 'Quadro VX 200' ],
        '061C' => [ 'A', 'Quadro FX 3600M' ],
        '061D' => [ 'A', 'Quadro FX 2800M' ],
        '061E' => [ 'A', 'Quadro FX 3700M' ],
        '061F' => [ 'A', 'Quadro FX 3800M' ],
        '0638' => [ 'A', 'Quadro FX 1800' ],
        '063A' => [ 'A', 'Quadro FX 2700M' ],
        '0658' => [ 'A', 'Quadro FX 380' ],
        '0659' => [ 'A', 'Quadro FX 580' ],
        '065A' => [ 'A', 'Quadro FX 1700M' ],
        '065C' => [ 'A', 'Quadro FX 770M' ],
        '06D8' => [ 'C', 'Quadro 6000' ],
        '06D9' => [ 'C', 'Quadro 5000' ],
        '06DA' => [ 'C', 'Quadro 5000M' ],
        '06DC' => [ 'C', 'Quadro 6000' ],
        '06DD' => [ 'C', 'Quadro 4000' ],
        '06F9' => [ 'B', 'Quadro FX 370 LP' ],
        '06F9' => [ 'B', 'Quadro FX 370 Low Profile' ],
        '06FB' => [ 'B', 'Quadro FX 370M' ],
        '06FF' => [ 'B', 'HICx16 + Graphics' ],
        '06FF' => [ 'B', 'HICx8 + Graphics' ],
        '0A38' => [ 'C', 'Quadro 400' ],
        '0A3C' => [ 'C', 'Quadro FX 880M' ],
        '0A78' => [ 'C', 'Quadro FX 380 LP' ],
        '0A7C' => [ 'C', 'Quadro FX 380M' ],
        '0CBC' => [ 'C', 'Quadro FX 1800M' ],
        '0DD8' => [ 'C', 'Quadro 2000' ],
        '0DD8' => [ 'C', 'Quadro 2000D' ],
        '0DDA' => [ 'C', 'Quadro 2000M' ],
        '0DF8' => [ 'C', 'Quadro 600' ],
        '0DF9' => [ 'C', 'Quadro 500M' ],
        '0DFA' => [ 'C', 'Quadro 1000M' ],
        '0E3A' => [ 'C', 'Quadro 3000M' ],
        '0E3B' => [ 'C', 'Quadro 4000M' ],
        '0FF3' => [ 'D', 'Quadro K420' ],
        '0FF6' => [ 'D', 'Quadro K1100M' ],
        '0FF8' => [ 'D', 'Quadro K500M' ],
        '0FF9' => [ 'D', 'Quadro K2000D' ],
        '0FFA' => [ 'D', 'Quadro K600' ],
        '0FFB' => [ 'D', 'Quadro K2000M' ],
        '0FFC' => [ 'D', 'Quadro K1000M' ],
        '0FFE' => [ 'D', 'Quadro K2000' ],
        '0FFF' => [ 'D', 'Quadro 410' ],
        '103A' => [ 'D', 'Quadro K6000' ],
        '103C' => [ 'D', 'Quadro K5200' ],
        '109A' => [ 'C', 'Quadro 5010M' ],
        '109B' => [ 'C', 'Quadro 7000' ],
        '11B4' => [ 'D', 'Quadro K4200' ],
        '11B6' => [ 'D', 'Quadro K3100M' ],
        '11B7' => [ 'D', 'Quadro K4100M' ],
        '11B8' => [ 'D', 'Quadro K5100M' ],
        '11BA' => [ 'D', 'Quadro K5000' ],
        '11BC' => [ 'D', 'Quadro K5000M' ],
        '11BD' => [ 'D', 'Quadro K4000M' ],
        '11BE' => [ 'D', 'Quadro K3000M' ],
        '11FA' => [ 'D', 'Quadro K4000' ],
        '11FC' => [ 'D', 'Quadro K2100M' ],
        '12B9' => [ 'D', 'Quadro K610M' ],
        '12BA' => [ 'D', 'Quadro K510M' ],
        '13BA' => [ 'E', 'Quadro K2200' ],
        '13BB' => [ 'E', 'Quadro K620' ],
        '040B' => [ 'A', 'Quadro NVS 320M' ],
        '0429' => [ 'A', 'Quadro NVS 140M' ],
        '042A' => [ 'A', 'Quadro NVS 130M' ],
        '042B' => [ 'A', 'Quadro NVS 135M' ],
        '042F' => [ 'A', 'Quadro NVS 290' ],
        '06EA' => [ 'B', 'Quadro NVS 150M' ],
        '06EB' => [ 'B', 'Quadro NVS 160M' ],
        '06F8' => [ 'B', 'Quadro NVS 420' ],
        '06FA' => [ 'B', 'Quadro NVS 450' ],
        '06FD' => [ 'B', 'Quadro NVS 295' ],
        '0A2C' => [ 'C', 'NVS 5100M' ],
        '0A6A' => [ 'C', 'NVS 2100M' ],
        '0A6C' => [ 'C', 'NVS 3100M' ],
        '0DEF' => [ 'C', 'NVS 5400M' ],
        '0DFC' => [ 'C', 'NVS 5200M' ],
        '0FFD' => [ 'D', 'NVS 510' ],
        '1056' => [ 'D', 'NVS 4200M' ],
        '1057' => [ 'D', 'NVS 4200M' ],
        '107C' => [ 'D', 'NVS 315' ],
        '107D' => [ 'D', 'NVS 310' ],
        '10D8' => [ 'C', 'NVS 300' ],
        '1140' => [ 'C', 'NVS 5200M' ],
        '1140' => [ 'C', 'NVS 5200M' ],
        '1140' => [ 'C', 'NVS 5200M' ],
        '1140' => [ 'C', 'NVS 5200M' ],
        '1140' => [ 'C', 'NVS 5200M' ],
        '1140' => [ 'C', 'NVS 5200M' ],
        '1140' => [ 'C', 'NVS 5200M' ],
        '0197' => [ '-', 'Tesla C870' ],
        '05E7' => [ 'A', 'Tesla C1060' ],
        '05E7' => [ 'A', 'Tesla T10 Processor' ],
        '05E7' => [ 'A', 'Tesla T10 Processor' ],
        '05E7' => [ 'A', 'Tesla M1060' ],
        '05E7' => [ 'A', 'Tesla M1060' ],
        '05E7' => [ 'A', 'Tesla M1060' ],
        '06D1' => [ 'C', 'Tesla C2050 / C2070' ],
        '06D1' => [ 'C', 'Tesla C2050' ],
        '06D1' => [ 'C', 'Tesla C2070' ],
        '06D2' => [ 'C', 'Tesla M2070' ],
        '06D2' => [ 'C', 'Tesla X2070' ],
        '06DE' => [ 'C', 'Tesla T20 Processor' ],
        '06DE' => [ 'C', 'Tesla S2050' ],
        '06DE' => [ 'C', 'Tesla M2050' ],
        '06DE' => [ 'C', 'Tesla X2070' ],
        '06DE' => [ 'C', 'Tesla M2050' ],
        '06DE' => [ 'C', 'Tesla M2050' ],
        '06DE' => [ 'C', 'Tesla M2050' ],
        '06DE' => [ 'C', 'Tesla M2050' ],
        '06DE' => [ 'C', 'Tesla M2050' ],
        '06DF' => [ 'C', 'Tesla M2070-Q' ],
        '1021' => [ 'D', 'Tesla K20Xm' ],
        '1022' => [ 'D', 'Tesla K20c' ],
        '1023' => [ 'D', 'Tesla K40m' ],
        '1024' => [ 'D', 'Tesla K40c' ],
        '1026' => [ 'D', 'Tesla K20s' ],
        '1027' => [ 'D', 'Tesla K40st' ],
        '1028' => [ 'D', 'Tesla K20m' ],
        '1029' => [ 'D', 'Tesla K40s' ],
        '1091' => [ 'C', 'Tesla M2090' ],
        '1091' => [ 'C', 'Tesla X2090' ],
        '1091' => [ 'C', 'Tesla X2090' ],
        '1091' => [ 'C', 'Tesla X2090' ],
        '1091' => [ 'C', 'Tesla X2090' ],
        '1094' => [ 'C', 'Tesla M2075' ],
        '1096' => [ 'C', 'Tesla C2075' ],
        '1096' => [ 'C', 'Tesla C2050' ],
        '118F' => [ 'D', 'Tesla K10' ],
        '1194' => [ 'D', 'Tesla K8' ],
        '0FEF' => [ 'D', 'GRID K340' ],
        '0FF2' => [ 'D', 'GRID K1' ],
        '118A' => [ 'D', 'GRID K520' ],
        '11BF' => [ 'D', 'GRID K2' ],
    },
    'nvidia-driver-304' => {
        '0040' => [ '-', 'GeForce 6800 Ultra' ],
        '0041' => [ '-', 'GeForce 6800' ],
        '0042' => [ '-', 'GeForce 6800 LE' ],
        '0043' => [ '-', 'GeForce 6800 XE' ],
        '0044' => [ '-', 'GeForce 6800 XT' ],
        '0045' => [ '-', 'GeForce 6800 GT' ],
        '0046' => [ '-', 'GeForce 6800 GT' ],
        '0047' => [ '-', 'GeForce 6800 GS' ],
        '0048' => [ '-', 'GeForce 6800 XT' ],
        '0090' => [ '-', 'GeForce 7800 GTX' ],
        '0091' => [ '-', 'GeForce 7800 GTX' ],
        '0092' => [ '-', 'GeForce 7800 GT' ],
        '0093' => [ '-', 'GeForce 7800 GS' ],
        '0095' => [ '-', 'GeForce 7800 SLI' ],
        '0098' => [ '-', 'GeForce Go 7800' ],
        '0099' => [ '-', 'GeForce Go 7800 GTX' ],
        '00C0' => [ '-', 'GeForce 6800 GS' ],
        '00C1' => [ '-', 'GeForce 6800' ],
        '00C2' => [ '-', 'GeForce 6800 LE' ],
        '00C3' => [ '-', 'GeForce 6800 XT' ],
        '00C8' => [ '-', 'GeForce Go 6800' ],
        '00C9' => [ '-', 'GeForce Go 6800 Ultra' ],
        '00F1' => [ '-', 'GeForce 6600 GT' ],
        '00F2' => [ '-', 'GeForce 6600' ],
        '00F3' => [ '-', 'GeForce 6200' ],
        '00F4' => [ '-', 'GeForce 6600 LE' ],
        '00F5' => [ '-', 'GeForce 7800 GS' ],
        '00F6' => [ '-', 'GeForce 6800 GS' ],
        '00F9' => [ '-', 'GeForce 6800 Ultra' ],
        '0140' => [ '-', 'GeForce 6600 GT' ],
        '0141' => [ '-', 'GeForce 6600' ],
        '0142' => [ '-', 'GeForce 6600 LE' ],
        '0143' => [ '-', 'GeForce 6600 VE' ],
        '0144' => [ '-', 'GeForce Go 6600' ],
        '0145' => [ '-', 'GeForce 6610 XL' ],
        '0146' => [ '-', 'GeForce Go 6600 TE/6200 TE' ],
        '0147' => [ '-', 'GeForce 6700 XL' ],
        '0148' => [ '-', 'GeForce Go 6600' ],
        '0149' => [ '-', 'GeForce Go 6600 GT' ],
        '014F' => [ '-', 'GeForce 6200' ],
        '0160' => [ '-', 'GeForce 6500' ],
        '0161' => [ '-', 'GeForce 6200 TurboCache(TM)' ],
        '0162' => [ '-', 'GeForce 6200SE TurboCache(TM)' ],
        '0163' => [ '-', 'GeForce 6200 LE' ],
        '0164' => [ '-', 'GeForce Go 6200' ],
        '0166' => [ '-', 'GeForce Go 6400' ],
        '0167' => [ '-', 'GeForce Go 6200' ],
        '0168' => [ '-', 'GeForce Go 6400' ],
        '0169' => [ '-', 'GeForce 6250' ],
        '016A' => [ '-', 'GeForce 7100 GS' ],
        '0191' => [ '-', 'GeForce 8800 GTX' ],
        '0193' => [ '-', 'GeForce 8800 GTS' ],
        '0194' => [ '-', 'GeForce 8800 Ultra' ],
        '01D0' => [ '-', 'GeForce 7350 LE' ],
        '01D1' => [ '-', 'GeForce 7300 LE' ],
        '01D2' => [ '-', 'GeForce 7550 LE' ],
        '01D3' => [ '-', 'GeForce 7300 SE/7200 GS' ],
        '01D6' => [ '-', 'GeForce Go 7200' ],
        '01D7' => [ '-', 'GeForce Go 7300' ],
        '01D8' => [ '-', 'GeForce Go 7400' ],
        '01DD' => [ '-', 'GeForce 7500 LE' ],
        '01DF' => [ '-', 'GeForce 7300 GS' ],
        '0221' => [ '-', 'GeForce 6200' ],
        '0222' => [ '-', 'GeForce 6200 A-LE' ],
        '0240' => [ '-', 'GeForce 6150' ],
        '0241' => [ '-', 'GeForce 6150 LE' ],
        '0242' => [ '-', 'GeForce 6100' ],
        '0244' => [ '-', 'GeForce Go 6150' ],
        '0247' => [ '-', 'GeForce Go 6100' ],
        '0290' => [ '-', 'GeForce 7900 GTX' ],
        '0291' => [ '-', 'GeForce 7900 GT/GTO' ],
        '0292' => [ '-', 'GeForce 7900 GS' ],
        '0293' => [ '-', 'GeForce 7950 GX2' ],
        '0294' => [ '-', 'GeForce 7950 GX2' ],
        '0295' => [ '-', 'GeForce 7950 GT' ],
        '0297' => [ '-', 'GeForce Go 7950 GTX' ],
        '0298' => [ '-', 'GeForce Go 7900 GS' ],
        '02E0' => [ '-', 'GeForce 7600 GT' ],
        '02E1' => [ '-', 'GeForce 7600 GS' ],
        '02E2' => [ '-', 'GeForce 7300 GT' ],
        '02E3' => [ '-', 'GeForce 7900 GS' ],
        '02E4' => [ '-', 'GeForce 7950 GT' ],
        '038B' => [ '-', 'GeForce 7650 GS' ],
        '0390' => [ '-', 'GeForce 7650 GS' ],
        '0391' => [ '-', 'GeForce 7600 GT' ],
        '0392' => [ '-', 'GeForce 7600 GS' ],
        '0393' => [ '-', 'GeForce 7300 GT' ],
        '0394' => [ '-', 'GeForce 7600 LE' ],
        '0395' => [ '-', 'GeForce 7300 GT' ],
        '0397' => [ '-', 'GeForce Go 7700' ],
        '0398' => [ '-', 'GeForce Go 7600' ],
        '0399' => [ '-', 'GeForce Go 7600 GT' ],
        '03D0' => [ '-', 'GeForce 6150SE nForce 430' ],
        '03D1' => [ '-', 'GeForce 6100 nForce 405' ],
        '03D2' => [ '-', 'GeForce 6100 nForce 400' ],
        '03D5' => [ '-', 'GeForce 6100 nForce 420' ],
        '03D6' => [ '-', 'GeForce 7025 / nForce 630a' ],
        '0400' => [ 'A', 'GeForce 8600 GTS' ],
        '0401' => [ 'A', 'GeForce 8600 GT' ],
        '0402' => [ 'A', 'GeForce 8600 GT' ],
        '0403' => [ 'A', 'GeForce 8600 GS' ],
        '0404' => [ 'A', 'GeForce 8400 GS' ],
        '0405' => [ 'A', 'GeForce 9500M GS' ],
        '0406' => [ '-', 'GeForce 8300 GS' ],
        '0407' => [ 'A', 'GeForce 8600M GT' ],
        '0408' => [ 'A', 'GeForce 9650M GS' ],
        '0409' => [ 'A', 'GeForce 8700M GT' ],
        '0410' => [ 'A', 'GeForce GT 330' ],
        '0420' => [ '-', 'GeForce 8400 SE' ],
        '0421' => [ 'A', 'GeForce 8500 GT' ],
        '0422' => [ 'A', 'GeForce 8400 GS' ],
        '0423' => [ '-', 'GeForce 8300 GS' ],
        '0424' => [ 'A', 'GeForce 8400 GS' ],
        '0425' => [ 'A', 'GeForce 8600M GS' ],
        '0426' => [ 'A', 'GeForce 8400M GT' ],
        '0427' => [ 'A', 'GeForce 8400M GS' ],
        '0428' => [ 'A', 'GeForce 8400M G' ],
        '042C' => [ 'A', 'GeForce 9400 GT' ],
        '042E' => [ 'A', 'GeForce 9300M G' ],
        '0531' => [ '-', 'GeForce 7150M / nForce 630M' ],
        '0533' => [ '-', 'GeForce 7000M / nForce 610M' ],
        '053A' => [ '-', 'GeForce 7050 PV / nForce 630a' ],
        '053B' => [ '-', 'GeForce 7050 PV / nForce 630a' ],
        '053E' => [ '-', 'GeForce 7025 / nForce 630a' ],
        '05E0' => [ 'A', 'GeForce GTX 295' ],
        '05E1' => [ 'A', 'GeForce GTX 280' ],
        '05E2' => [ 'A', 'GeForce GTX 260' ],
        '05E3' => [ 'A', 'GeForce GTX 285' ],
        '05E6' => [ 'A', 'GeForce GTX 275' ],
        '05EA' => [ 'A', 'GeForce GTX 260' ],
        '05EB' => [ 'A', 'GeForce GTX 295' ],
        '0600' => [ 'A', 'GeForce 8800 GTS 512' ],
        '0601' => [ 'A', 'GeForce 9800 GT' ],
        '0602' => [ 'A', 'GeForce 8800 GT' ],
        '0603' => [ 'A', 'GeForce GT 230' ],
        '0604' => [ 'A', 'GeForce 9800 GX2' ],
        '0605' => [ 'A', 'GeForce 9800 GT' ],
        '0606' => [ 'A', 'GeForce 8800 GS' ],
        '0607' => [ 'A', 'GeForce GTS 240' ],
        '0608' => [ 'A', 'GeForce 9800M GTX' ],
        '0609' => [ 'A', 'GeForce 8800M GTS' ],
        '060A' => [ 'A', 'GeForce GTX 280M' ],
        '060B' => [ 'A', 'GeForce 9800M GT' ],
        '060C' => [ 'A', 'GeForce 8800M GTX' ],
        '060D' => [ 'A', 'GeForce 8800 GS' ],
        '060F' => [ 'A', 'GeForce GTX 285M' ],
        '0610' => [ 'A', 'GeForce 9600 GSO' ],
        '0611' => [ 'A', 'GeForce 8800 GT' ],
        '0612' => [ 'A', 'GeForce 9800 GTX/9800 GTX+' ],
        '0613' => [ 'A', 'GeForce 9800 GTX+' ],
        '0614' => [ 'A', 'GeForce 9800 GT' ],
        '0615' => [ 'A', 'GeForce GTS 250' ],
        '0617' => [ 'A', 'GeForce 9800M GTX' ],
        '0618' => [ 'A', 'GeForce GTX 260M' ],
        '0621' => [ 'A', 'GeForce GT 230' ],
        '0622' => [ 'A', 'GeForce 9600 GT' ],
        '0623' => [ 'A', 'GeForce 9600 GS' ],
        '0625' => [ 'A', 'GeForce 9600 GSO 512' ],
        '0626' => [ 'A', 'GeForce GT 130' ],
        '0627' => [ 'A', 'GeForce GT 140' ],
        '0628' => [ 'A', 'GeForce 9800M GTS' ],
        '062A' => [ 'A', 'GeForce 9700M GTS' ],
        '062B' => [ 'A', 'GeForce 9800M GS' ],
        '062C' => [ 'A', 'GeForce 9800M GTS' ],
        '062D' => [ 'A', 'GeForce 9600 GT' ],
        '062E' => [ 'A', 'GeForce 9600 GT' ],
        '0630' => [ 'A', 'GeForce 9700 S' ],
        '0631' => [ 'A', 'GeForce GTS 160M' ],
        '0632' => [ 'A', 'GeForce GTS 150M' ],
        '0635' => [ 'A', 'GeForce 9600 GSO' ],
        '0637' => [ 'A', 'GeForce 9600 GT' ],
        '0640' => [ 'A', 'GeForce 9500 GT' ],
        '0641' => [ 'A', 'GeForce 9400 GT' ],
        '0643' => [ 'A', 'GeForce 9500 GT' ],
        '0644' => [ 'A', 'GeForce 9500 GS' ],
        '0645' => [ 'A', 'GeForce 9500 GS' ],
        '0646' => [ 'A', 'GeForce GT 120' ],
        '0647' => [ 'A', 'GeForce 9600M GT' ],
        '0648' => [ 'A', 'GeForce 9600M GS' ],
        '0649' => [ 'A', 'GeForce 9600M GT' ],
        '064A' => [ 'A', 'GeForce 9700M GT' ],
        '064B' => [ 'A', 'GeForce 9500M G' ],
        '064C' => [ 'A', 'GeForce 9650M GT' ],
        '0651' => [ 'A', 'GeForce G 110M' ],
        '0652' => [ 'A', 'GeForce GT 130M' ],
        '0653' => [ 'A', 'GeForce GT 120M' ],
        '0654' => [ 'A', 'GeForce GT 220M' ],
        '0655' => [ 'A', 'GeForce GT 120' ],
        '0656' => [ 'A', 'GeForce 9650 S' ],
        '065B' => [ 'A', 'GeForce 9400 GT' ],
        '06C0' => [ 'C', 'GeForce GTX 480' ],
        '06C4' => [ 'C', 'GeForce GTX 465' ],
        '06CA' => [ 'C', 'GeForce GTX 480M' ],
        '06CD' => [ 'C', 'GeForce GTX 470' ],
        '06E0' => [ 'B', 'GeForce 9300 GE' ],
        '06E1' => [ 'B', 'GeForce 9300 GS' ],
        '06E2' => [ 'B', 'GeForce 8400' ],
        '06E3' => [ '-', 'GeForce 8400 SE' ],
        '06E4' => [ 'A', 'GeForce 8400 GS' ],
        '06E5' => [ 'B', 'GeForce 9300M GS' ],
        '06E6' => [ 'B', 'GeForce G100' ],
        '06E7' => [ '-', 'GeForce 9300 SE' ],
        '06E8' => [ 'B', 'GeForce 9200M GS' ],
        '06E9' => [ 'B', 'GeForce 9300M GS' ],
        '06EC' => [ 'B', 'GeForce G 105M' ],
        '06EF' => [ 'B', 'GeForce G 103M' ],
        '06F1' => [ 'B', 'GeForce G105M' ],
        '07E0' => [ '-', 'GeForce 7150 / nForce 630i' ],
        '07E1' => [ '-', 'GeForce 7100 / nForce 630i' ],
        '07E2' => [ '-', 'GeForce 7050 / nForce 630i' ],
        '07E3' => [ '-', 'GeForce 7050 / nForce 610i' ],
        '07E5' => [ '-', 'GeForce 7050 / nForce 620i' ],
        '0840' => [ 'B', 'GeForce 8200M' ],
        '0844' => [ 'B', 'GeForce 9100M G' ],
        '0845' => [ 'B', 'GeForce 8200M G' ],
        '0846' => [ 'B', 'GeForce 9200' ],
        '0847' => [ 'B', 'GeForce 9100' ],
        '0848' => [ 'B', 'GeForce 8300' ],
        '0849' => [ 'B', 'GeForce 8200' ],
        '084A' => [ 'B', 'nForce 730a' ],
        '084B' => [ 'B', 'GeForce 9200' ],
        '084C' => [ 'B', 'nForce 980a/780a SLI' ],
        '084D' => [ 'B', 'nForce 750a SLI' ],
        '084F' => [ '-', 'GeForce 8100 / nForce 720a' ],
        '0860' => [ 'B', 'GeForce 9400' ],
        '0861' => [ 'B', 'GeForce 9400' ],
        '0862' => [ 'B', 'GeForce 9400M G' ],
        '0863' => [ 'B', 'GeForce 9400M' ],
        '0864' => [ 'B', 'GeForce 9300' ],
        '0865' => [ 'B', 'ION' ],
        '0866' => [ 'B', 'GeForce 9400M G' ],
        '0867' => [ 'B', 'GeForce 9400' ],
        '0868' => [ 'B', 'nForce 760i SLI' ],
        '0869' => [ 'B', 'GeForce 9400' ],
        '086A' => [ 'B', 'GeForce 9400' ],
        '086C' => [ 'B', 'GeForce 9300 / nForce 730i' ],
        '086D' => [ 'B', 'GeForce 9200' ],
        '086E' => [ 'B', 'GeForce 9100M G' ],
        '086F' => [ 'B', 'GeForce 8200M G' ],
        '0870' => [ 'B', 'GeForce 9400M' ],
        '0871' => [ 'B', 'GeForce 9200' ],
        '0872' => [ 'B', 'GeForce G102M' ],
        '0873' => [ 'B', 'GeForce G102M' ],
        '0874' => [ 'B', 'ION' ],
        '0876' => [ 'B', 'ION' ],
        '087A' => [ 'B', 'GeForce 9400' ],
        '087D' => [ 'B', 'ION' ],
        '087E' => [ 'B', 'ION LE' ],
        '087F' => [ 'B', 'ION LE' ],
        '08A0' => [ 'C', 'GeForce 320M' ],
        '08A2' => [ 'C', 'GeForce 320M' ],
        '08A3' => [ 'C', 'GeForce 320M' ],
        '08A4' => [ 'C', 'GeForce 320M' ],
        '08A5' => [ 'C', 'GeForce 320M' ],
        '0A20' => [ 'C', 'GeForce GT 220' ],
        '0A22' => [ '-', 'GeForce 315' ],
        '0A23' => [ 'C', 'GeForce 210' ],
        '0A26' => [ 'C', 'GeForce 405' ],
        '0A27' => [ 'C', 'GeForce 405' ],
        '0A28' => [ 'C', 'GeForce GT 230M' ],
        '0A29' => [ 'C', 'GeForce GT 330M' ],
        '0A2A' => [ 'C', 'GeForce GT 230M' ],
        '0A2B' => [ 'C', 'GeForce GT 330M' ],
        '0A2D' => [ 'C', 'GeForce GT 320M' ],
        '0A32' => [ 'C', 'GeForce GT 415' ],
        '0A34' => [ 'C', 'GeForce GT 240M' ],
        '0A35' => [ 'C', 'GeForce GT 325M' ],
        '0A60' => [ 'C', 'GeForce G210' ],
        '0A62' => [ 'C', 'GeForce 205' ],
        '0A63' => [ 'C', 'GeForce 310' ],
        '0A64' => [ 'C', 'Second Generation ION' ],
        '0A65' => [ 'C', 'GeForce 210' ],
        '0A66' => [ 'C', 'GeForce 310' ],
        '0A67' => [ '-', 'GeForce 315' ],
        '0A68' => [ 'B', 'GeForce G105M' ],
        '0A69' => [ 'B', 'GeForce G105M' ],
        '0A6E' => [ 'C', 'GeForce 305M' ],
        '0A6F' => [ 'C', 'Second Generation ION' ],
        '0A70' => [ 'C', 'GeForce 310M' ],
        '0A71' => [ 'C', 'GeForce 305M' ],
        '0A72' => [ 'C', 'GeForce 310M' ],
        '0A73' => [ 'C', 'GeForce 305M' ],
        '0A74' => [ 'C', 'GeForce G210M' ],
        '0A75' => [ 'C', 'GeForce 310M' ],
        '0A76' => [ 'C', 'Second Generation ION' ],
        '0A7A' => [ 'C', 'GeForce 315M' ],
        '0CA0' => [ 'A', 'GeForce GT 330' ],
        '0CA2' => [ 'C', 'GeForce GT 320' ],
        '0CA3' => [ 'C', 'GeForce GT 240' ],
        '0CA4' => [ 'C', 'GeForce GT 340' ],
        '0CA5' => [ 'C', 'GeForce GT 220' ],
        '0CA7' => [ 'A', 'GeForce GT 330' ],
        '0CA8' => [ 'C', 'GeForce GTS 260M' ],
        '0CA9' => [ 'C', 'GeForce GTS 250M' ],
        '0CAC' => [ '-', 'GeForce GT 220' ],
        '0CAF' => [ 'C', 'GeForce GT 335M' ],
        '0CB0' => [ 'C', 'GeForce GTS 350M' ],
        '0CB1' => [ 'C', 'GeForce GTS 360M' ],
        '0DC0' => [ 'C', 'GeForce GT 440' ],
        '0DC4' => [ 'C', 'GeForce GTS 450' ],
        '0DC5' => [ 'C', 'GeForce GTS 450' ],
        '0DC6' => [ 'C', 'GeForce GTS 450' ],
        '0DCD' => [ 'C', 'GeForce GT 555M' ],
        '0DCE' => [ 'C', 'GeForce GT 555M' ],
        '0DD1' => [ 'C', 'GeForce GTX 460M' ],
        '0DD2' => [ 'C', 'GeForce GT 445M' ],
        '0DD3' => [ 'C', 'GeForce GT 435M' ],
        '0DD6' => [ 'C', 'GeForce GT 550M' ],
        '0DE0' => [ 'C', 'GeForce GT 440' ],
        '0DE1' => [ 'C', 'GeForce GT 430' ],
        '0DE2' => [ 'C', 'GeForce GT 420' ],
        '0DE3' => [ 'C', 'GeForce GT 635M' ],
        '0DE4' => [ 'C', 'GeForce GT 520' ],
        '0DE5' => [ 'C', 'GeForce GT 530' ],
        '0DE8' => [ 'C', 'GeForce GT 620M' ],
        '0DE9' => [ 'C', 'GeForce GT 630M' ],
        '0DEA' => [ 'C', 'GeForce 610M' ],
        '0DEB' => [ 'C', 'GeForce GT 555M' ],
        '0DEC' => [ 'C', 'GeForce GT 525M' ],
        '0DED' => [ 'C', 'GeForce GT 520M' ],
        '0DEE' => [ 'C', 'GeForce GT 415M' ],
        '0DF0' => [ 'C', 'GeForce GT 425M' ],
        '0DF1' => [ 'C', 'GeForce GT 420M' ],
        '0DF2' => [ 'C', 'GeForce GT 435M' ],
        '0DF3' => [ 'C', 'GeForce GT 420M' ],
        '0DF4' => [ 'C', 'GeForce GT 540M' ],
        '0DF5' => [ 'C', 'GeForce GT 525M' ],
        '0DF6' => [ 'C', 'GeForce GT 550M' ],
        '0DF7' => [ 'C', 'GeForce GT 520M' ],
        '0E22' => [ 'C', 'GeForce GTX 460' ],
        '0E23' => [ 'C', 'GeForce GTX 460 SE' ],
        '0E24' => [ 'C', 'GeForce GTX 460' ],
        '0E30' => [ 'C', 'GeForce GTX 470M' ],
        '0E31' => [ 'C', 'GeForce GTX 485M' ],
        '0F00' => [ 'C', 'GeForce GT 630' ],
        '0F01' => [ 'C', 'GeForce GT 620' ],
        '0FC0' => [ 'C', 'GeForce GT 640' ],
        '0FC1' => [ 'C', 'GeForce GT 640' ],
        '0FC2' => [ 'C', 'GeForce GT 630' ],
        '0FC6' => [ 'D', 'GeForce GTX 650' ],
        '0FCE' => [ 'D', 'GeForce GT 640M LE' ],
        '0FD1' => [ 'D', 'GeForce GT 650M' ],
        '0FD2' => [ 'D', 'GeForce GT 640M' ],
        '0FD3' => [ 'D', 'GeForce GT 640M LE' ],
        '0FD4' => [ 'D', 'GeForce GTX 660M' ],
        '0FD5' => [ 'D', 'GeForce GT 650M' ],
        '0FD8' => [ 'D', 'GeForce GT 640M' ],
        '0FD9' => [ 'D', 'GeForce GT 645M' ],
        '0FE0' => [ 'D', 'GeForce GTX 660M' ],
        '1040' => [ 'C', 'GeForce GT 520' ],
        '1042' => [ 'D', 'GeForce 510' ],
        '1048' => [ 'D', 'GeForce 605' ],
        '1049' => [ 'C', 'GeForce GT 620' ],
        '104A' => [ 'D', 'GeForce GT 610' ],
        '1050' => [ 'C', 'GeForce GT 520M' ],
        '1051' => [ 'D', 'GeForce GT 520MX' ],
        '1052' => [ 'C', 'GeForce GT 520M' ],
        '1054' => [ 'D', 'GeForce 410M' ],
        '1055' => [ 'D', 'GeForce 410M' ],
        '1058' => [ 'C', 'GeForce 610M' ],
        '1059' => [ 'C', 'GeForce 610M' ],
        '105A' => [ 'C', 'GeForce 610M' ],
        '1080' => [ 'C', 'GeForce GTX 580' ],
        '1081' => [ 'C', 'GeForce GTX 570' ],
        '1082' => [ 'C', 'GeForce GTX 560 Ti' ],
        '1084' => [ 'C', 'GeForce GTX 560' ],
        '1086' => [ 'C', 'GeForce GTX 570' ],
        '1087' => [ 'C', 'GeForce GTX 560 Ti' ],
        '1088' => [ 'C', 'GeForce GTX 590' ],
        '1089' => [ 'C', 'GeForce GTX 580' ],
        '108B' => [ 'C', 'GeForce GTX 580' ],
        '10C0' => [ 'B', 'GeForce 9300 GS' ],
        '10C3' => [ 'A', 'GeForce 8400GS' ],
        '10C5' => [ 'C', 'GeForce 405' ],
        '1140' => [ 'C', 'GeForce GT 630M' ],
        '1140' => [ 'C', 'GeForce GT 630M' ],
        '1140' => [ 'C', 'GeForce GT 620M' ],
        '1140' => [ 'C', 'GeForce GT 620M' ],
        '1140' => [ 'C', 'GeForce GT 620M' ],
        '1180' => [ 'D', 'GeForce GTX 680' ],
        '1183' => [ 'D', 'GeForce GTX 660 Ti' ],
        '1185' => [ 'D', 'GeForce GTX 660' ],
        '1188' => [ 'D', 'GeForce GTX 690' ],
        '1189' => [ 'D', 'GeForce GTX 670' ],
        '11A0' => [ 'D', 'GeForce GTX 680M' ],
        '11A1' => [ 'D', 'GeForce GTX 670MX' ],
        '11A7' => [ 'D', 'GeForce GTX 675MX' ],
        '11C0' => [ 'D', 'GeForce GTX 660' ],
        '11C6' => [ 'D', 'GeForce GTX 650 Ti' ],
        '1200' => [ 'C', 'GeForce GTX 560 Ti' ],
        '1201' => [ 'C', 'GeForce GTX 560' ],
        '1203' => [ 'C', 'GeForce GTX 460 SE v2' ],
        '1205' => [ 'C', 'GeForce GTX 460 v2' ],
        '1206' => [ 'C', 'GeForce GTX 555' ],
        '1207' => [ 'C', 'GeForce GT 645' ],
        '1208' => [ 'C', 'GeForce GTX 560 SE' ],
        '1210' => [ 'C', 'GeForce GTX 570M' ],
        '1211' => [ 'C', 'GeForce GTX 580M' ],
        '1212' => [ 'C', 'GeForce GTX 675M' ],
        '1213' => [ 'C', 'GeForce GTX 670M' ],
        '1241' => [ 'C', 'GeForce GT 545' ],
        '1243' => [ 'C', 'GeForce GT 545' ],
        '1244' => [ 'C', 'GeForce GTX 550 Ti' ],
        '1245' => [ 'C', 'GeForce GTS 450' ],
        '1246' => [ 'C', 'GeForce GT 550M' ],
        '1247' => [ 'C', 'GeForce GT 555M' ],
        '1247' => [ 'C', 'GeForce GT 635M' ],
        '1247' => [ 'C', 'GeForce GT 635M' ],
        '1247' => [ 'C', 'GeForce GT 635M' ],
        '1248' => [ 'C', 'GeForce GT 555M' ],
        '1249' => [ 'C', 'GeForce GTS 450' ],
        '124B' => [ 'C', 'GeForce GT 640' ],
        '124D' => [ 'C', 'GeForce GT 555M' ],
        '124D' => [ 'C', 'GeForce GT 635M' ],
        '1251' => [ 'C', 'GeForce GTX 560M' ],
        '004E' => [ '-', 'Quadro FX 4000' ],
        '009D' => [ '-', 'Quadro FX 4500' ],
        '00CC' => [ '-', 'Quadro FX Go1400' ],
        '00CD' => [ '-', 'Quadro FX 3450/4000 SDI' ],
        '00CE' => [ '-', 'Quadro FX 1400' ],
        '00F8' => [ '-', 'Quadro FX 3400/Quadro FX 4000' ],
        '014C' => [ '-', 'Quadro FX 540M' ],
        '014D' => [ '-', 'Quadro FX 550' ],
        '014E' => [ '-', 'Quadro FX 540' ],
        '019D' => [ '-', 'Quadro FX 5600' ],
        '019E' => [ '-', 'Quadro FX 4600' ],
        '01DC' => [ '-', 'Quadro FX 350M' ],
        '01DE' => [ '-', 'Quadro FX 350' ],
        '029A' => [ '-', 'Quadro FX 2500M' ],
        '029B' => [ '-', 'Quadro FX 1500M' ],
        '029C' => [ '-', 'Quadro FX 5500' ],
        '029D' => [ '-', 'Quadro FX 3500' ],
        '029E' => [ '-', 'Quadro FX 1500' ],
        '029F' => [ '-', 'Quadro FX 4500 X2' ],
        '039C' => [ '-', 'Quadro FX 560M' ],
        '039E' => [ '-', 'Quadro FX 560' ],
        '040A' => [ 'A', 'Quadro FX 370' ],
        '040C' => [ 'A', 'Quadro FX 570M' ],
        '040D' => [ 'A', 'Quadro FX 1600M' ],
        '040E' => [ 'A', 'Quadro FX 570' ],
        '040F' => [ 'A', 'Quadro FX 1700' ],
        '042D' => [ 'A', 'Quadro FX 360M' ],
        '05ED' => [ 'A', 'Quadroplex 2200 D2' ],
        '05F8' => [ 'A', 'Quadroplex 2200 S4' ],
        '05F9' => [ 'A', 'Quadro CX' ],
        '05FD' => [ 'A', 'Quadro FX 5800' ],
        '05FE' => [ 'A', 'Quadro FX 4800' ],
        '05FF' => [ 'A', 'Quadro FX 3800' ],
        '0619' => [ 'A', 'Quadro FX 4700 X2' ],
        '061A' => [ 'A', 'Quadro FX 3700' ],
        '061B' => [ 'A', 'Quadro VX 200' ],
        '061C' => [ 'A', 'Quadro FX 3600M' ],
        '061D' => [ 'A', 'Quadro FX 2800M' ],
        '061E' => [ 'A', 'Quadro FX 3700M' ],
        '061F' => [ 'A', 'Quadro FX 3800M' ],
        '0638' => [ 'A', 'Quadro FX 1800' ],
        '063A' => [ 'A', 'Quadro FX 2700M' ],
        '0658' => [ 'A', 'Quadro FX 380' ],
        '0659' => [ 'A', 'Quadro FX 580' ],
        '065A' => [ 'A', 'Quadro FX 1700M' ],
        '065C' => [ 'A', 'Quadro FX 770M' ],
        '06D8' => [ 'C', 'Quadro 6000' ],
        '06D9' => [ 'C', 'Quadro 5000' ],
        '06DA' => [ 'C', 'Quadro 5000M' ],
        '06DC' => [ 'C', 'Quadro 6000' ],
        '06DD' => [ 'C', 'Quadro 4000' ],
        '06F9' => [ 'B', 'Quadro FX 370 LP' ],
        '06FB' => [ 'B', 'Quadro FX 370M' ],
        '06FF' => [ 'B', 'HICx16 + Graphics' ],
        '0A38' => [ 'C', 'Quadro 400' ],
        '0A3C' => [ 'C', 'Quadro FX 880M' ],
        '0A78' => [ 'C', 'Quadro FX 380 LP' ],
        '0A7C' => [ 'C', 'Quadro FX 380M' ],
        '0CBC' => [ 'C', 'Quadro FX 1800M' ],
        '0DD8' => [ 'C', 'Quadro 2000' ],
        '0DD8' => [ 'C', 'Quadro 2000D' ],
        '0DDA' => [ 'C', 'Quadro 2000M' ],
        '0DF8' => [ 'C', 'Quadro 600' ],
        '0DF9' => [ 'C', 'Quadro 500M' ],
        '0DFA' => [ 'C', 'Quadro 1000M' ],
        '0E3A' => [ 'C', 'Quadro 3000M' ],
        '0E3B' => [ 'C', 'Quadro 4000M' ],
        '0FFB' => [ 'D', 'Quadro K2000M' ],
        '0FFC' => [ 'D', 'Quadro K1000M' ],
        '0FFF' => [ 'D', 'Quadro 410' ],
        '109A' => [ 'C', 'Quadro 5010M' ],
        '109B' => [ 'C', 'Quadro 7000' ],
        '11BA' => [ 'D', 'Quadro K5000' ],
        '11BC' => [ 'D', 'Quadro K5000M' ],
        '11BD' => [ 'D', 'Quadro K4000M' ],
        '11BE' => [ 'D', 'Quadro K3000M' ],
        '014A' => [ '-', 'Quadro NVS 440' ],
        '0165' => [ '-', 'Quadro NVS 285' ],
        '01DA' => [ '-', 'Quadro NVS 110M' ],
        '01DB' => [ '-', 'Quadro NVS 120M' ],
        '0245' => [ '-', 'Quadro NVS 210S / GeForce 6150LE' ],
        '0299' => [ '-', 'Quadro NVS 510M' ],
        '040B' => [ 'A', 'Quadro NVS 320M' ],
        '0429' => [ 'A', 'Quadro NVS 140M' ],
        '042A' => [ 'A', 'Quadro NVS 130M' ],
        '042B' => [ 'A', 'Quadro NVS 135M' ],
        '042F' => [ 'A', 'Quadro NVS 290' ],
        '06EA' => [ 'B', 'Quadro NVS 150M' ],
        '06EB' => [ 'B', 'Quadro NVS 160M' ],
        '06F8' => [ 'B', 'Quadro NVS 420' ],
        '06FA' => [ 'B', 'Quadro NVS 450' ],
        '06FD' => [ 'B', 'Quadro NVS 295' ],
        '0A2C' => [ 'C', 'NVS 5100M' ],
        '0A6A' => [ 'C', 'NVS 2100M' ],
        '0A6C' => [ 'C', 'NVS 3100M' ],
        '0DEF' => [ 'C', 'NVS 5400M' ],
        '0DFC' => [ 'C', 'NVS 5200M' ],
        '0FFD' => [ 'D', 'NVS 510' ],
        '1056' => [ 'D', 'NVS 4200M' ],
        '1057' => [ 'D', 'NVS 4200M' ],
        '107D' => [ 'D', 'NVS 310' ],
        '10D8' => [ 'C', 'NVS 300' ],
        '0197' => [ '-', 'Tesla C870' ],
        '05E7' => [ 'A', 'Tesla C1060' ],
        '05E7' => [ 'A', 'Tesla T10 Processor' ],
        '05E7' => [ 'A', 'Tesla T10 Processor' ],
        '05E7' => [ 'A', 'Tesla M1060' ],
        '05E7' => [ 'A', 'Tesla M1060' ],
        '06D1' => [ 'C', 'Tesla C2050 / C2070' ],
        '06D1' => [ 'C', 'Tesla C2070' ],
        '06D2' => [ 'C', 'Tesla M2070' ],
        '06DE' => [ 'C', 'Tesla T20 Processor' ],
        '06DE' => [ 'C', 'Tesla M2050' ],
        '06DE' => [ 'C', 'Tesla M2050' ],
        '06DF' => [ 'C', 'Tesla M2070-Q' ],
        '1022' => [ 'D', 'Tesla K20c' ],
        '1028' => [ 'D', 'Tesla K20m' ],
        '1091' => [ 'C', 'Tesla M2090' ],
        '1091' => [ 'C', 'Tesla X2090' ],
        '1094' => [ 'C', 'Tesla M2075' ],
        '1096' => [ 'C', 'Tesla C2075' ],
        '118F' => [ 'D', 'Tesla K10' ],
        '0FF2' => [ 'D', 'GRID K1' ],
        '11BF' => [ 'D', 'GRID K2' ],
    },
};

    

# ATI AMD PCI IDS
# we need to differentiate between ati and amd.
# ati uses PCI ID 1002, we must use the subid 
my $ind_cardid    = 0;
my $ind_cardname  = 1;
my $ind_family    = 2;
my $ind_mobility  = 3;
my $ind_igp       = 4;
my $ind_core      = 5;

# userspace drivers
my $core_udriv_trans = {
    'MACH32',  =>  '',   
    'MACH64',  =>  'mach64',   
    'R128',    =>  'r128',     
    'OG13',    =>  'ati',
    'OG20',    =>  'ati',
    'RADEON',  =>  'ati',
    'TS1',     =>  'ati',   
    'TS2',     =>  'ati',   
    'TS3',     =>  'ati',    
    '_GCN',    =>  'amdgpu',   # or ati? the data in the web is contradictory TODO find out
    'GCN1',    =>  'amdgpu',   
    'GCN2',    =>  'amdgpu',   
    '_TSGCN',  =>  'ati',      # or amdgpu? the data in the web is contradictory TODO find out
};

my $core_udriv_trans_text = {
    'MACH32',  =>  '',   
    'MACH64',  =>  'Mach64',   
    'R128',    =>  'Rage 128',     
    'OG13',    =>  'legacy Discrete Vertex Shader',
    'OG20',    =>  'legacy Discrete Vertex Shader',
    'RADEON',  =>  'legacy Discrete Vertex Shader',
    'TS1',     =>  'Terascale 1',   
    'TS2',     =>  'Terascale 2',   
    'TS3',     =>  'Terascale 3',    
    '_GCN',     =>  'GCN 1 or 2 (?)',   
    'GCN1',    =>  'GCN1',   
    'GCN2',    =>  'GCN2',   
    '_TSGCN',  =>  'GCN 1 or Terascale 3',      # the data in the web is contradictory TODO find out
};

# kernel drivers
my $core_kdriv_trans = {
    'MACH32',  =>  '',   
    'MACH64',  =>  '',   
    'R128',    =>  '',     
    'OG13',    =>  'radeonkms',     
    'OG20',    =>  'radeonkms',     
    'RADEON',  =>  'radeonkms',    
    'TS1',     =>  'radeonkms',   
    'TS2',     =>  'radeonkms',   
    'TS3',     =>  'radeonkms',    
    '_GCN',    =>  'amdgpu',     # or radeonkms.ko? the data in the web is contradictory TODO find out
    'GCN1',    =>  'amdgpu',   
    'GCN2',    =>  'amdgpu',   
    '_TSGCN',  =>  'radeonkms',      # or radeonkms.ko? the data in the web is contradictory TODO find out
};

my @amdatiids = (    
    \['1304', 'KAVERI',                                   'KAVERI',       1, 1, 'GCN2',    ],
    \['1305', 'KAVERI',                                   'KAVERI',       0, 1, 'GCN2',    ],
    \['1306', 'KAVERI',                                   'KAVERI',       1, 1, 'GCN2',    ],
    \['1307', 'KAVERI',                                   'KAVERI',       0, 1, 'GCN2',    ],
    \['1309', 'KAVERI',                                   'KAVERI',       1, 1, 'GCN2',    ],
    \['130A', 'KAVERI',                                   'KAVERI',       1, 1, 'GCN2',    ],
    \['130B', 'KAVERI',                                   'KAVERI',       1, 1, 'GCN2',    ],
    \['130C', 'KAVERI',                                   'KAVERI',       1, 1, 'GCN2',    ],
    \['130D', 'KAVERI',                                   'KAVERI',       1, 1, 'GCN2',    ],
    \['130E', 'KAVERI',                                   'KAVERI',       1, 1, 'GCN2',    ],
    \['130F', 'KAVERI',                                   'KAVERI',       0, 1, 'GCN2',    ],
    \['1310', 'KAVERI',                                   'KAVERI',       0, 1, 'GCN2',    ],
    \['1311', 'KAVERI',                                   'KAVERI',       0, 1, 'GCN2',    ],
    \['1312', 'KAVERI',                                   'KAVERI',       0, 1, 'GCN2',    ],
    \['1313', 'KAVERI',                                   'KAVERI',       0, 1, 'GCN2',    ],
    \['1315', 'KAVERI',                                   'KAVERI',       0, 1, 'GCN2',    ],
    \['1316', 'KAVERI',                                   'KAVERI',       0, 1, 'GCN2',    ],
    \['1317', 'KAVERI',                                   'KAVERI',       1, 1, 'GCN2',    ],
    \['1318', 'KAVERI',                                   'KAVERI',       1, 1, 'GCN2',    ],
    \['131B', 'KAVERI',                                   'KAVERI',       0, 1, 'GCN2',    ],
    \['131C', 'KAVERI',                                   'KAVERI',       0, 1, 'GCN2',    ],
    \['131D', 'KAVERI',                                   'KAVERI',       0, 1, 'GCN2',    ],
    \['3150', 'ATI Radeon Mobility X600 (M24)',           'RV380',        1, 0, 'OG20',    ],
    \['3151', 'ATI FireMV 2400',                          'RV380',        0, 0, 'OG20',    ],
    \['3152', 'ATI Radeon Mobility X300 (M24)',           'RV380',        1, 0, 'OG20',    ],
    \['3154', 'ATI FireGL M24 GL',                        'RV380',        1, 0, 'OG20',    ],
    \['3155', 'ATI FireMV 2400',                          'RV380',        1, 0, 'OG20',    ],
    \['3E50', 'ATI Radeon X600 (RV380)',                  'RV380',        0, 0, 'OG20',    ],
    \['3E54', 'ATI FireGL V3200 (RV380)',                 'RV380',        0, 0, 'OG20',    ],
    \['4136', 'ATI Radeon IGP320 (A3)',                   'RS100',        0, 1, 'OG13',    ],
    \['4137', 'ATI Radeon IGP330/340/350 (A4)',           'RS200',        0, 1, 'OG13',    ],
    \['4144', 'ATI Radeon 9500',                          'R300',         0, 0, 'OG20',    ],
    \['4145', 'ATI Radeon 9500',                          'R300',         0, 0, 'OG20',    ],
    \['4146', 'ATI Radeon 9600TX',                        'R300',         0, 0, 'OG20',    ],
    \['4147', 'ATI FireGL Z1',                            'R300',         0, 0, 'OG20',    ],
    \['4148', 'ATI Radeon 9800SE',                        'R350',         0, 0, 'OG20',    ],
    \['4149', 'ATI Radeon 9800',                          'R350',         0, 0, 'OG20',    ],
    \['414A', 'ATI Radeon 9800',                          'R350',         0, 0, 'OG20',    ],
    \['414B', 'ATI FireGL X2',                            'R350',         0, 0, 'OG20',    ],
    \['4150', 'ATI Radeon 9600',                          'RV350',        0, 0, 'OG20',    ],
    \['4151', 'ATI Radeon 9600SE',                        'RV350',        0, 0, 'OG20',    ],
    \['4152', 'ATI Radeon 9600XT',                        'RV350',        0, 0, 'OG20',    ],
    \['4153', 'ATI Radeon 9600',                          'RV350',        0, 0, 'OG20',    ],
    \['4154', 'ATI FireGL T2',                            'RV350',        0, 0, 'OG20',    ],
    \['4155', 'ATI Radeon 9650',                          'RV350',        0, 0, 'OG20',    ],
    \['4156', 'ATI FireGL RV360',                         'RV350',        0, 0, 'OG20',    ],
    \['4158', '68800AX [Graphics Ultra Pro PCI]',         'MACH32',       0, 0, 'MACH32',  ],
    \['4237', 'ATI Radeon 7000 IGP (A4+)',                'RS200',        0, 1, 'OG13',    ],
    \['4242', 'ATI Radeon 8500 AIW',                      'R200',         0, 0, 'OG13',    ],
    \['4336', 'ATI Radeon IGP320M (U1)',                  'RS100',        1, 1, 'OG13',    ],
    \['4337', 'ATI Radeon IGP330M/340M/350M (U2)',        'RS200',        1, 1, 'OG13',    ],
    \['4354', '215CT [Mach64 CT PCI]',                    'MACH64',       0, 0, 'MACH64',  ],
    \['4358', 'Mach64 CX [Graphics Xpression]',           'MACH64',       0, 0, 'MACH64',  ],
    \['4437', 'ATI Radeon Mobility 7000 IGP',             'RS200',        1, 1, 'OG13',    ],
    \['4554', '210888ET [Mach64 ET]',                     'MACH64',       0, 0, 'MACH64',  ],
    \['4654', 'Mach64 VT',                                'MACH64',       0, 0, 'MACH64',  ],
    \['4742', 'Rage 3 [3D Rage PRO AGP 2X]',              'MACH64',       0, 0, 'MACH64',  ],
    \['4744', 'Rage 3 [3D Rage PRO AGP 1X]',              'MACH64',       0, 0, 'MACH64',  ],
    \['4749', '3D Rage Pro PCI',                          'MACH64',       0, 0, 'MACH64',  ],
    \['474C', 'Rage XC',                                  'MACH64',       0, 0, 'MACH64',  ],
    \['474D', 'Rage XL AGP 2X',                           'MACH64',       0, 0, 'MACH64',  ],
    \['474E', 'Rage XC AGP',                              'MACH64',       0, 0, 'MACH64',  ],
    \['474F', 'Rage XL',                                  'MACH64',       0, 0, 'MACH64',  ],
    \['4750', '3D Rage Pro 215GP PCI',                    'MACH64',       0, 0, 'MACH64',  ],
    \['4751', '3D Rage Pro 215GQ',                        'MACH64',       0, 0, 'MACH64',  ],
    \['4752', 'Rage 3 [Rage XL PCI]',                     'MACH64',       0, 0, 'MACH64',  ],
    \['4753', 'Rage XC',                                  'MACH64',       0, 0, 'MACH64',  ],
    \['4754', 'Mach64 GT/GT-B [3D Rage I/II]',            'MACH64',       0, 0, 'MACH64',  ],
    \['4755', 'Mach64 GT-B [3D Rage II+ DVD]',            'MACH64',       0, 0, 'MACH64',  ],
    \['4756', 'Rage 2 [3D Rage IIC PCI]',                 'MACH64',       0, 0, 'MACH64',  ],
    \['4757', 'Rage 2 [3D Rage IIC AGP]',                 'MACH64',       0, 0, 'MACH64',  ],
    \['4758', 'Mach64 GX [WinTurbo]',                     'MACH64',       0, 0, 'MACH64',  ],
    \['4759', 'Rage 3 [3D Rage IIC PCI]',                 'MACH64',       0, 0, 'MACH64',  ],
    \['475A', '3D Rage IIC AGP',                          'MACH64',       0, 0, 'MACH64',  ],
    \['4966', 'ATI Radeon 9000/PRO',                      'RV250',        0, 0, 'OG13',    ],
    \['4967', 'ATI Radeon 9000',                          'RV250',        0, 0, 'OG13',    ],
    \['4A48', 'ATI Radeon X800 (R420)',                   'R420',         0, 0, 'OG20',    ],
    \['4A49', 'ATI Radeon X800PRO (R420)',                'R420',         0, 0, 'OG20',    ],
    \['4A4A', 'ATI Radeon X800SE (R420)',                 'R420',         0, 0, 'OG20',    ],
    \['4A4B', 'ATI Radeon X800 (R420)',                   'R420',         0, 0, 'OG20',    ],
    \['4A4C', 'ATI Radeon X800 (R420)',                   'R420',         0, 0, 'OG20',    ],
    \['4A4D', 'ATI FireGL X3 (R420)',                     'R420',         0, 0, 'OG20',    ],
    \['4A4E', 'ATI Radeon Mobility 9800 (M18)',           'R420',         1, 0, 'OG20',    ],
    \['4A4F', 'ATI Radeon X800 SE (R420)',                'R420',         0, 0, 'OG20',    ],
    \['4A50', 'ATI Radeon X800XT (R420)',                 'R420',         0, 0, 'OG20',    ],
    \['4A54', 'ATI Radeon X800 VE (R420)',                'R420',         0, 0, 'OG20',    ],
    \['4B48', 'ATI Radeon X850 (R480)',                   'R420',         0, 0, 'OG20',    ],
    \['4B49', 'ATI Radeon X850 XT (R480)',                'R420',         0, 0, 'OG20',    ],
    \['4B4A', 'ATI Radeon X850 SE (R480)',                'R420',         0, 0, 'OG20',    ],
    \['4B4B', 'ATI Radeon X850 PRO (R480)',               'R420',         0, 0, 'OG20',    ],
    \['4B4C', 'ATI Radeon X850 XT PE (R480)',             'R420',         0, 0, 'OG20',    ],
    \['4C42', 'Mach64 LT [3D Rage LT PRO AGP-133]',       'MACH64',       0, 0, 'MACH64',  ],
    \['4C44', '3D Rage LT Pro AGP-66',                    'MACH64',       0, 0, 'MACH64',  ],
    \['4C45', 'ATI Rage 128 Mobility LE (PCI)',           'R128',         1, 0, 'R128',    ],
    \['4C46', 'ATI Rage 128 Mobility LF (AGP)',           'R128',         1, 0, 'R128',    ],
    \['4C47', '3D Rage IIC PCI ',                         'MACH64',       0, 0, 'MACH64',  ],
    \['4C49', '3D Rage LT Pro PCI',                       'MACH64',       0, 0, 'MACH64',  ],
    \['4C4D', 'Rage Mobility P/M AGP 2X',                 'MACH64',       1, 0, 'MACH64',  ],
    \['4C4E', 'Rage Mobility L AGP 2X',                   'MACH64',       1, 0, 'MACH64',  ],
    \['4C50', 'Rage 3 LT [3D Rage LT PRO PCI]',           'MACH64',       0, 0, 'MACH64',  ],
    \['4C51', '3D Rage LT Pro',                           'MACH64',       0, 0, 'MACH64',  ],
    \['4C52', 'M1 [Rage Mobility-M1 PCI]',                'MACH64',       1, 0, 'MACH64',  ],
    \['4C53', 'Rage Mobility L',                          'MACH64',       1, 0, 'MACH64',  ],
    \['4C54', '264LT [Mach64 LT]',                        'MACH64',       0, 0, 'MACH64',  ],
    \['4C57', 'ATI Radeon Mobility M7',                   'RV200',        1, 0, 'OG13',    ],
    \['4C58', 'ATI Mobility FireGL 7800 M7',              'RV200',        1, 0, 'OG13',    ],
    \['4C59', 'ATI Radeon Mobility M6',                   'RV100',        1, 0, 'OG13',    ],
    \['4C5A', 'ATI Radeon Mobility M6',                   'RV100',        1, 0, 'OG13',    ],
    \['4C64', 'ATI FireGL Mobility 9000 (M9)',            'RV250',        1, 0, 'OG13',    ],
    \['4C66', 'ATI Radeon Mobility 9000 (M9)',            'RV250',        1, 0, 'OG13',    ],
    \['4C67', 'ATI Radeon Mobility 9000 (M9)',            'RV250',        1, 0, 'OG13',    ],
    \['4C6E', 'ATI FireMV 2400',                          'RV280',        1, 0, 'OG13',    ],
    \['4D46', 'ATI Rage 128 Mobility MF (AGP)',           'R128',         1, 0, 'R128',    ],
    \['4D4C', 'ATI Rage 128 Mobility ML (AGP)',           'R128',         1, 0, 'R128',    ],
    \['4E44', 'ATI Radeon 9700 Pro',                      'R300',         0, 0, 'OG20',    ],
    \['4E45', 'ATI Radeon 9700/9500Pro',                  'R300',         0, 0, 'OG20',    ],
    \['4E46', 'ATI Radeon 9600TX',                        'R300',         0, 0, 'OG20',    ],
    \['4E47', 'ATI FireGL X1',                            'R300',         0, 0, 'OG20',    ],
    \['4E48', 'ATI Radeon 9800PRO',                       'R350',         0, 0, 'OG20',    ],
    \['4E49', 'ATI Radeon 9800',                          'R350',         0, 0, 'OG20',    ],
    \['4E4A', 'ATI FireGL X2',                            'R350',         0, 0, 'OG20',    ],
    \['4E4B', 'ATI Radeon 9800XT',                        'R350',         0, 0, 'OG20',    ],
    \['4E50', 'ATI Radeon Mobility 9600/9700 (M10/M11)',  'RV350',        1, 0, 'OG20',    ],
    \['4E51', 'ATI Radeon Mobility 9600 (M10)',           'RV350',        1, 0, 'OG20',    ],
    \['4E52', 'ATI Radeon Mobility 9600 (M11)',           'RV350',        1, 0, 'OG20',    ],
    \['4E53', 'ATI Radeon Mobility 9600 (M10)',           'RV350',        1, 0, 'OG20',    ],
    \['4E54', 'ATI FireGL Mobility T2 (M10)',             'RV350',        1, 0, 'OG20',    ],
    \['4E56', 'ATI FireGL Mobility T2e (M11)',            'RV350',        1, 0, 'OG20',    ],
    \['5041', 'ATI Rage 128 Pro PA (PCI)',                'R128',         0, 0, 'R128',    ],
    \['5042', 'ATI Rage 128 Pro PB (AGP)',                'R128',         0, 0, 'R128',    ],
    \['5043', 'ATI Rage 128 Pro PC (AGP)',                'R128',         0, 0, 'R128',    ],
    \['5044', 'ATI Rage 128 Pro PD (PCI)',                'R128',         0, 0, 'R128',    ],
    \['5045', 'ATI Rage 128 Pro PE (AGP)',                'R128',         0, 0, 'R128',    ],
    \['5046', 'ATI Rage 128 Pro PF (AGP)',                'R128',         0, 0, 'R128',    ],
    \['5047', 'ATI Rage 128 Pro PG (PCI)',                'R128',         0, 0, 'R128',    ],
    \['5048', 'ATI Rage 128 Pro PH (AGP)',                'R128',         0, 0, 'R128',    ],
    \['5049', 'ATI Rage 128 Pro PI (AGP)',                'R128',         0, 0, 'R128',    ],
    \['504A', 'ATI Rage 128 Pro PJ (PCI)',                'R128',         0, 0, 'R128',    ],
    \['504B', 'ATI Rage 128 Pro PK (AGP)',                'R128',         0, 0, 'R128',    ],
    \['504C', 'ATI Rage 128 Pro PL (AGP)',                'R128',         0, 0, 'R128',    ],
    \['504D', 'ATI Rage 128 Pro PM (PCI)',                'R128',         0, 0, 'R128',    ],
    \['504E', 'ATI Rage 128 Pro PN (AGP)',                'R128',         0, 0, 'R128',    ],
    \['504F', 'ATI Rage 128 Pro PO (AGP)',                'R128',         0, 0, 'R128',    ],
    \['5050', 'ATI Rage 128 Pro PP (PCI)',                'R128',         0, 0, 'R128',    ],
    \['5051', 'ATI Rage 128 Pro PQ (AGP)',                'R128',         0, 0, 'R128',    ],
    \['5052', 'ATI Rage 128 Pro PR (PCI)',                'R128',         0, 0, 'R128',    ],
    \['5053', 'ATI Rage 128 Pro PS (PCI)',                'R128',         0, 0, 'R128',    ],
    \['5054', 'ATI Rage 128 Pro PT (AGP)',                'R128',         0, 0, 'R128',    ],
    \['5055', 'ATI Rage 128 Pro PU (AGP)',                'R128',         0, 0, 'R128',    ],
    \['5056', 'ATI Rage 128 Pro PV (PCI)',                'R128',         0, 0, 'R128',    ],
    \['5057', 'ATI Rage 128 Pro PW (AGP)',                'R128',         0, 0, 'R128',    ],
    \['5058', 'ATI Rage 128 Pro PX (AGP)',                'R128',         0, 0, 'R128',    ],
    \['5144', 'ATI Radeon',                               'RADEON',       0, 0, 'RADEON',  ],
    \['5145', 'ATI Radeon',                               'RADEON',       0, 0, 'RADEON',  ],
    \['5146', 'ATI Radeon',                               'RADEON',       0, 0, 'RADEON',  ],
    \['5147', 'ATI Radeon',                               'RADEON',       0, 0, 'RADEON',  ],
    \['5148', 'ATI FireGL 8700/8800',                     'R200',         0, 0, 'OG13',    ],
    \['514C', 'ATI Radeon 8500',                          'R200',         0, 0, 'OG13',    ],
    \['514D', 'ATI Radeon 9100',                          'R200',         0, 0, 'OG13',    ],
    \['5157', 'ATI Radeon 7500',                          'RV200',        0, 0, 'OG13',    ],
    \['5158', 'ATI Radeon 7500',                          'RV200',        0, 0, 'OG13',    ],
    \['5159', 'ATI Radeon VE/7000',                       'RV100',        0, 0, 'OG13',    ],
    \['515A', 'ATI Radeon VE/7000',                       'RV100',        0, 0, 'OG13',    ],
    \['515E', 'ATI ES1000',                               'RV100',        0, 0, 'OG13',    ],
    \['5245', 'ATI Rage 128 RE (PCI)',                    'R128',         0, 0, 'R128',    ],
    \['5246', 'ATI Rage 128 RF (AGP)',                    'R128',         0, 0, 'R128',    ],
    \['5247', 'ATI Rage 128 RG (AGP)',                    'R128',         0, 0, 'R128',    ],
    \['524B', 'ATI Rage 128 RK (PCI)',                    'R128',         0, 0, 'R128',    ],
    \['524C', 'ATI Rage 128 RL (AGP)',                    'R128',         0, 0, 'R128',    ],
    \['5345', 'ATI Rage 128 SE',                          'R128',         0, 0, 'R128',    ],
    \['5346', 'ATI Rage 128 SF',                          'R128',         0, 0, 'R128',    ],
    \['5347', 'ATI Rage 128 SG',                          'R128',         0, 0, 'R128',    ],
    \['5348', 'ATI Rage 128 SH',                          'R128',         0, 0, 'R128',    ],
    \['534B', 'ATI Rage 128 SK',                          'R128',         0, 0, 'R128',    ],
    \['534C', 'ATI Rage 128 SL',                          'R128',         0, 0, 'R128',    ],
    \['534D', 'ATI Rage 128 SM (AGP)',                    'R128',         0, 0, 'R128',    ],
    \['534E', 'ATI Rage 128 SN',                          'R128',         0, 0, 'R128',    ],
    \['5354', 'Mach 64 VT',                               'MACH64',       0, 0, 'MACH64',  ],
    \['5446', 'ATI Rage 128 Pro Ultra TF (AGP)',          'R128',         0, 0, 'R128',    ],
    \['544C', 'ATI Rage 128 Pro Ultra TL (AGP)',          'R128',         0, 0, 'R128',    ],
    \['5452', 'ATI Rage 128 Pro Ultra TR (AGP)',          'R128',         0, 0, 'R128',    ],
    \['5453', 'ATI Rage 128 Pro Ultra TS',                'R128',         0, 0, 'R128',    ],
    \['5454', 'ATI Rage 128 Pro Ultra TT',                'R128',         0, 0, 'R128',    ],
    \['5455', 'ATI Rage 128 Pro Ultra TU',                'R128',         0, 0, 'R128',    ],
    \['5460', 'ATI Radeon Mobility X300 (M22)',           'RV380',        1, 0, 'OG20',    ],
    \['5462', 'ATI Radeon Mobility X600 SE (M24C)',       'RV380',        1, 0, 'OG20',    ],
    \['5464', 'ATI FireGL M22 GL',                        'RV380',        1, 0, 'OG20',    ],
    \['5548', 'ATI Radeon X800 (R423)',                   'R420',         0, 0, 'OG20',    ],
    \['5549', 'ATI Radeon X800PRO (R423)',                'R420',         0, 0, 'OG20',    ],
    \['554A', 'ATI Radeon X800LE (R423)',                 'R420',         0, 0, 'OG20',    ],
    \['554B', 'ATI Radeon X800SE (R423)',                 'R420',         0, 0, 'OG20',    ],
    \['554C', 'ATI Radeon X800 XTP (R430)',               'R420',         0, 0, 'OG20',    ],
    \['554D', 'ATI Radeon X800 XL (R430)',                'R420',         0, 0, 'OG20',    ],
    \['554E', 'ATI Radeon X800 SE (R430)',                'R420',         0, 0, 'OG20',    ],
    \['554F', 'ATI Radeon X800 (R430)',                   'R420',         0, 0, 'OG20',    ],
    \['5550', 'ATI FireGL V7100 (R423)',                  'R420',         0, 0, 'OG20',    ],
    \['5551', 'ATI FireGL V5100 (R423)',                  'R420',         0, 0, 'OG20',    ],
    \['5552', 'ATI FireGL unknown (R423)',                'R420',         0, 0, 'OG20',    ],
    \['5554', 'ATI FireGL unknown (R423)',                'R420',         0, 0, 'OG20',    ],
    \['564A', 'ATI Mobility FireGL V5000 (M26)',          'RV410',        1, 0, 'OG20',    ],
    \['564B', 'ATI Mobility FireGL V5000 (M26)',          'RV410',        1, 0, 'OG20',    ],
    \['564F', 'ATI Mobility Radeon X700 XL (M26)',        'RV410',        1, 0, 'OG20',    ],
    \['5652', 'ATI Mobility Radeon X700 (M26)',           'RV410',        1, 0, 'OG20',    ],
    \['5653', 'ATI Mobility Radeon X700 (M26)',           'RV410',        1, 0, 'OG20',    ],
    \['5654', 'Mach64 VT [Video Xpression]',              'MACH64',       0, 0, 'MACH64',  ],
    \['5655', '264VT3 [Mach64 VT3]',                      'MACH64',       0, 0, 'MACH64',  ],
    \['5656', 'Mach64 VT4 [Video Xpression+]',            'MACH64',       0, 0, 'MACH64',  ],
    \['5657', 'ATI Radeon X550XTX',                       'RV410',        0, 0, 'OG20',    ],
    \['5834', 'ATI Radeon 9100 IGP (A5)',                 'RS300',        0, 1, 'OG13',    ],
    \['5835', 'ATI Radeon Mobility 9100 IGP (U3)',        'RS300',        1, 1, 'OG13',    ],
    \['5954', 'ATI Radeon XPRESS 200',                    'RS480',        0, 1, 'OG20',    ],
    \['5955', 'ATI Radeon XPRESS 200M',                   'RS480',        1, 1, 'OG20',    ],
    \['5960', 'ATI Radeon 9250',                          'RV280',        0, 0, 'OG13',    ],
    \['5961', 'ATI Radeon 9200',                          'RV280',        0, 0, 'OG13',    ],
    \['5962', 'ATI Radeon 9200',                          'RV280',        0, 0, 'OG13',    ],
    \['5964', 'ATI Radeon 9200SE',                        'RV280',        0, 0, 'OG13',    ],
    \['5965', 'ATI FireMV 2200',                          'RV280',        0, 0, 'OG13',    ],
    \['5969', 'ATI ES1000',                               'RV100',        0, 0, 'OG13',    ],
    \['5974', 'ATI Radeon XPRESS 200',                    'RS480',        1, 1, 'OG20',    ],
    \['5975', 'ATI Radeon XPRESS 200M',                   'RS480',        1, 1, 'OG20',    ],
    \['5A41', 'ATI Radeon XPRESS 200',                    'RS400',        0, 1, 'OG20',    ],
    \['5A42', 'ATI Radeon XPRESS 200M',                   'RS400',        1, 1, 'OG20',    ],
    \['5A61', 'ATI Radeon XPRESS 200',                    'RS400',        0, 1, 'OG20',    ],
    \['5A62', 'ATI Radeon XPRESS 200M',                   'RS400',        1, 1, 'OG20',    ],
    \['5B60', 'ATI Radeon X300 (RV370)',                  'RV380',        0, 0, 'OG20',    ],
    \['5B62', 'ATI Radeon X600 (RV370)',                  'RV380',        0, 0, 'OG20',    ],
    \['5B63', 'ATI Radeon X550 (RV370)',                  'RV380',        0, 0, 'OG20',    ],
    \['5B64', 'ATI FireGL V3100 (RV370)',                 'RV380',        0, 0, 'OG20',    ],
    \['5B65', 'ATI FireMV 2200 PCIE (RV370)',             'RV380',        0, 0, 'OG20',    ],
    \['5C61', 'ATI Radeon Mobility 9200 (M9+)',           'RV280',        1, 0, 'OG13',    ],
    \['5C63', 'ATI Radeon Mobility 9200 (M9+)',           'RV280',        1, 0, 'OG13',    ],
    \['5D48', 'ATI Mobility Radeon X800 XT (M28)',        'R420',         1, 0, 'OG20',    ],
    \['5D49', 'ATI Mobility FireGL V5100 (M28)',          'R420',         1, 0, 'OG20',    ],
    \['5D4A', 'ATI Mobility Radeon X800 (M28)',           'R420',         1, 0, 'OG20',    ],
    \['5D4C', 'ATI Radeon X850',                          'R420',         0, 0, 'OG20',    ],
    \['5D4D', 'ATI Radeon X850 XT PE (R480)',             'R420',         0, 0, 'OG20',    ],
    \['5D4E', 'ATI Radeon X850 SE (R480)',                'R420',         0, 0, 'OG20',    ],
    \['5D4F', 'ATI Radeon X850 PRO (R480)',               'R420',         0, 0, 'OG20',    ],
    \['5D50', 'ATI unknown Radeon / FireGL (R480)',       'R420',         0, 0, 'OG20',    ],
    \['5D52', 'ATI Radeon X850 XT (R480)',                'R420',         0, 0, 'OG20',    ],
    \['5D57', 'ATI Radeon X800XT (R423)',                 'R420',         0, 0, 'OG20',    ],
    \['5E48', 'ATI FireGL V5000 (RV410)',                 'RV410',        0, 0, 'OG20',    ],
    \['5E4A', 'ATI Radeon X700 XT (RV410)',               'RV410',        0, 0, 'OG20',    ],
    \['5E4B', 'ATI Radeon X700 PRO (RV410)',              'RV410',        0, 0, 'OG20',    ],
    \['5E4C', 'ATI Radeon X700 SE (RV410)',               'RV410',        0, 0, 'OG20',    ],
    \['5E4D', 'ATI Radeon X700 (RV410)',                  'RV410',        0, 0, 'OG20',    ],
    \['5E4F', 'ATI Radeon X700 SE (RV410)',               'RV410',        0, 0, 'OG20',    ],
    \['6600', 'OLAND',                                    'OLAND',        1, 0, 'GCN1',    ],
    \['6601', 'OLAND',                                    'OLAND',        1, 0, 'GCN1',    ],
    \['6602', 'OLAND',                                    'OLAND',        1, 0, 'GCN1',    ],
    \['6603', 'OLAND',                                    'OLAND',        1, 0, 'GCN1',    ],
    \['6604', 'OLAND',                                    'OLAND',        1, 0, 'GCN1',    ],
    \['6605', 'OLAND',                                    'OLAND',        1, 0, 'GCN1',    ],
    \['6606', 'OLAND',                                    'OLAND',        1, 0, 'GCN1',    ],
    \['6607', 'OLAND',                                    'OLAND',        1, 0, 'GCN1',    ],
    \['6608', 'OLAND',                                    'OLAND',        0, 0, 'GCN1',    ],
    \['6610', 'OLAND',                                    'OLAND',        0, 0, 'GCN1',    ],
    \['6611', 'OLAND',                                    'OLAND',        0, 0, 'GCN1',    ],
    \['6613', 'OLAND',                                    'OLAND',        0, 0, 'GCN1',    ],
    \['6617', 'OLAND',                                    'OLAND',        1, 0, 'GCN1',    ],
    \['6620', 'OLAND',                                    'OLAND',        1, 0, 'GCN1',    ],
    \['6621', 'OLAND',                                    'OLAND',        1, 0, 'GCN1',    ],
    \['6623', 'OLAND',                                    'OLAND',        1, 0, 'GCN1',    ],
    \['6631', 'OLAND',                                    'OLAND',        0, 0, 'GCN1',    ],
    \['6640', 'BONAIRE',                                  'BONAIRE',      1, 0, 'GCN2',    ],
    \['6641', 'BONAIRE',                                  'BONAIRE',      1, 0, 'GCN2',    ],
    \['6646', 'BONAIRE',                                  'BONAIRE',      1, 0, 'GCN2',    ],
    \['6647', 'BONAIRE',                                  'BONAIRE',      1, 0, 'GCN2',    ],
    \['6649', 'BONAIRE',                                  'BONAIRE',      0, 0, 'GCN2',    ],
    \['6650', 'BONAIRE',                                  'BONAIRE',      0, 0, 'GCN2',    ],
    \['6651', 'BONAIRE',                                  'BONAIRE',      0, 0, 'GCN2',    ],
    \['6658', 'BONAIRE',                                  'BONAIRE',      0, 0, 'GCN2',    ],
    \['665C', 'BONAIRE',                                  'BONAIRE',      0, 0, 'GCN2',    ],
    \['665D', 'BONAIRE',                                  'BONAIRE',      0, 0, 'GCN2',    ],
    \['665F', 'BONAIRE',                                  'BONAIRE',      0, 0, 'GCN2',    ],
    \['6660', 'HAINAN',                                   'HAINAN',       1, 0, 'GCN1',    ],
    \['6663', 'HAINAN',                                   'HAINAN',       1, 0, 'GCN1',    ],
    \['6664', 'HAINAN',                                   'HAINAN',       1, 0, 'GCN1',    ],
    \['6665', 'HAINAN',                                   'HAINAN',       1, 0, 'GCN1',    ],
    \['6667', 'HAINAN',                                   'HAINAN',       1, 0, 'GCN1',    ],
    \['666F', 'HAINAN',                                   'HAINAN',       1, 0, 'GCN1',    ],
    \['6700', 'CAYMAN',                                   'CAYMAN',       0, 0, 'TS3',     ],
    \['6701', 'CAYMAN',                                   'CAYMAN',       0, 0, 'TS3',     ],
    \['6702', 'CAYMAN',                                   'CAYMAN',       0, 0, 'TS3',     ],
    \['6703', 'CAYMAN',                                   'CAYMAN',       0, 0, 'TS3',     ],
    \['6704', 'CAYMAN',                                   'CAYMAN',       0, 0, 'TS3',     ],
    \['6705', 'CAYMAN',                                   'CAYMAN',       0, 0, 'TS3',     ],
    \['6706', 'CAYMAN',                                   'CAYMAN',       0, 0, 'TS3',     ],
    \['6707', 'CAYMAN',                                   'CAYMAN',       0, 0, 'TS3',     ],
    \['6708', 'CAYMAN',                                   'CAYMAN',       0, 0, 'TS3',     ],
    \['6709', 'CAYMAN',                                   'CAYMAN',       0, 0, 'TS3',     ],
    \['6718', 'AMD Radeon HD 6900 Series',                'CAYMAN',       0, 0, 'TS3',     ],
    \['6719', 'AMD Radeon HD 6900 Series',                'CAYMAN',       0, 0, 'TS3',     ],
    \['671C', 'CAYMAN',                                   'CAYMAN',       0, 0, 'TS3',     ],
    \['671D', 'CAYMAN',                                   'CAYMAN',       0, 0, 'TS3',     ],
    \['671F', 'CAYMAN',                                   'CAYMAN',       0, 0, 'TS3',     ],
    \['6720', 'AMD Radeon HD 6900M Series',               'BARTS',        1, 0, 'TS2',     ],
    \['6721', 'Mobility Radeon HD 6000 Series',           'BARTS',        1, 0, 'TS2',     ],
    \['6722', 'BARTS',                                    'BARTS',        0, 0, 'TS2',     ],
    \['6723', 'BARTS',                                    'BARTS',        0, 0, 'TS2',     ],
    \['6724', 'Mobility Radeon HD 6000 Series',           'BARTS',        1, 0, 'TS2',     ],
    \['6725', 'Mobility Radeon HD 6000 Series',           'BARTS',        1, 0, 'TS2',     ],
    \['6726', 'BARTS',                                    'BARTS',        0, 0, 'TS2',     ],
    \['6727', 'BARTS',                                    'BARTS',        0, 0, 'TS2',     ],
    \['6728', 'BARTS',                                    'BARTS',        0, 0, 'TS2',     ],
    \['6729', 'BARTS',                                    'BARTS',        0, 0, 'TS2',     ],
    \['6738', 'AMD Radeon HD 6800 Series',                'BARTS',        0, 0, 'TS2',     ],
    \['6739', 'AMD Radeon HD 6800 Series',                'BARTS',        0, 0, 'TS2',     ],
    \['673E', 'AMD Radeon HD 6700 Series',                'BARTS',        0, 0, 'TS2',     ],
    \['6740', 'TURKS',                                    'TURKS',        1, 0, 'TS2',     ],
    \['6741', 'TURKS',                                    'TURKS',        1, 0, 'TS2',     ],
    \['6742', 'TURKS',                                    'TURKS',        1, 0, 'TS2',     ],
    \['6743', 'TURKS',                                    'TURKS',        1, 0, 'TS2',     ],
    \['6744', 'TURKS',                                    'TURKS',        1, 0, 'TS2',     ],
    \['6745', 'TURKS',                                    'TURKS',        1, 0, 'TS2',     ],
    \['6746', 'TURKS',                                    'TURKS',        0, 0, 'TS2',     ],
    \['6747', 'TURKS',                                    'TURKS',        0, 0, 'TS2',     ],
    \['6748', 'TURKS',                                    'TURKS',        0, 0, 'TS2',     ],
    \['6749', 'TURKS',                                    'TURKS',        0, 0, 'TS2',     ],
    \['674A', 'TURKS',                                    'TURKS',        0, 0, 'TS2',     ],
    \['6750', 'TURKS',                                    'TURKS',        0, 0, 'TS2',     ],
    \['6751', 'TURKS',                                    'TURKS',        0, 0, 'TS2',     ],
    \['6758', 'TURKS',                                    'TURKS',        0, 0, 'TS2',     ],
    \['6759', 'TURKS',                                    'TURKS',        0, 0, 'TS2',     ],
    \['675B', 'TURKS',                                    'TURKS',        0, 0, 'TS2',     ],
    \['675D', 'TURKS',                                    'TURKS',        0, 0, 'TS2',     ],
    \['675F', 'TURKS',                                    'TURKS',        0, 0, 'TS2',     ],
    \['6760', 'CAICOS',                                   'CAICOS',       1, 0, 'TS2',     ],
    \['6761', 'CAICOS',                                   'CAICOS',       1, 0, 'TS2',     ],
    \['6762', 'CAICOS',                                   'CAICOS',       0, 0, 'TS2',     ],
    \['6763', 'CAICOS',                                   'CAICOS',       0, 0, 'TS2',     ],
    \['6764', 'CAICOS',                                   'CAICOS',       1, 0, 'TS2',     ],
    \['6765', 'CAICOS',                                   'CAICOS',       1, 0, 'TS2',     ],
    \['6766', 'CAICOS',                                   'CAICOS',       0, 0, 'TS2',     ],
    \['6767', 'CAICOS',                                   'CAICOS',       0, 0, 'TS2',     ],
    \['6768', 'CAICOS',                                   'CAICOS',       0, 0, 'TS2',     ],
    \['6770', 'CAICOS',                                   'CAICOS',       0, 0, 'TS2',     ],
    \['6771', 'CAICOS',                                   'CAICOS',       0, 0, 'TS2',     ],
    \['6772', 'CAICOS',                                   'CAICOS',       0, 0, 'TS2',     ],
    \['6778', 'CAICOS',                                   'CAICOS',       0, 0, 'TS2',     ],
    \['6779', 'CAICOS',                                   'CAICOS',       0, 0, 'TS2',     ],
    \['677B', 'CAICOS',                                   'CAICOS',       0, 0, 'TS2',     ],
    \['6780', 'TAHITI',                                   'TAHITI',       0, 0, 'GCN1',    ],
    \['6784', 'TAHITI',                                   'TAHITI',       0, 0, 'GCN1',    ],
    \['6788', 'TAHITI',                                   'TAHITI',       0, 0, 'GCN1',    ],
    \['678A', 'TAHITI',                                   'TAHITI',       0, 0, 'GCN1',    ],
    \['6790', 'TAHITI',                                   'TAHITI',       0, 0, 'GCN1',    ],
    \['6791', 'TAHITI',                                   'TAHITI',       0, 0, 'GCN1',    ],
    \['6792', 'TAHITI',                                   'TAHITI',       0, 0, 'GCN1',    ],
    \['6798', 'TAHITI',                                   'TAHITI',       0, 0, 'GCN1',    ],
    \['6799', 'TAHITI',                                   'TAHITI',       0, 0, 'GCN1',    ],
    \['679A', 'TAHITI',                                   'TAHITI',       0, 0, 'GCN1',    ],
    \['679B', 'TAHITI',                                   'TAHITI',       0, 0, 'GCN1',    ],
    \['679E', 'TAHITI',                                   'TAHITI',       0, 0, 'GCN1',    ],
    \['679F', 'TAHITI',                                   'TAHITI',       0, 0, 'GCN1',    ],
    \['67A0', 'HAWAII',                                   'HAWAII',       0, 0, 'GCN2',    ],
    \['67A1', 'HAWAII',                                   'HAWAII',       0, 0, 'GCN2',    ],
    \['67A2', 'HAWAII',                                   'HAWAII',       0, 0, 'GCN2',    ],
    \['67A8', 'HAWAII',                                   'HAWAII',       0, 0, 'GCN2',    ],
    \['67A9', 'HAWAII',                                   'HAWAII',       0, 0, 'GCN2',    ],
    \['67AA', 'HAWAII',                                   'HAWAII',       0, 0, 'GCN2',    ],
    \['67B0', 'HAWAII',                                   'HAWAII',       0, 0, 'GCN2',    ],
    \['67B1', 'HAWAII',                                   'HAWAII',       0, 0, 'GCN2',    ],
    \['67B8', 'HAWAII',                                   'HAWAII',       0, 0, 'GCN2',    ],
    \['67B9', 'HAWAII',                                   'HAWAII',       0, 0, 'GCN2',    ],
    \['67BA', 'HAWAII',                                   'HAWAII',       0, 0, 'GCN2',    ],
    \['67BE', 'HAWAII',                                   'HAWAII',       0, 0, 'GCN2',    ],
    \['6800', 'PITCAIRN',                                 'PITCAIRN',     1, 0, 'GCN1',    ],
    \['6801', 'PITCAIRN',                                 'PITCAIRN',     1, 0, 'GCN1',    ],
    \['6802', 'PITCAIRN',                                 'PITCAIRN',     1, 0, 'GCN1',    ],
    \['6806', 'PITCAIRN',                                 'PITCAIRN',     0, 0, 'GCN1',    ],
    \['6808', 'PITCAIRN',                                 'PITCAIRN',     0, 0, 'GCN1',    ],
    \['6809', 'PITCAIRN',                                 'PITCAIRN',     0, 0, 'GCN1',    ],
    \['6810', 'PITCAIRN',                                 'PITCAIRN',     0, 0, 'GCN1',    ],
    \['6811', 'PITCAIRN',                                 'PITCAIRN',     0, 0, 'GCN1',    ],
    \['6816', 'PITCAIRN',                                 'PITCAIRN',     0, 0, 'GCN1',    ],
    \['6817', 'PITCAIRN',                                 'PITCAIRN',     0, 0, 'GCN1',    ],
    \['6818', 'PITCAIRN',                                 'PITCAIRN',     0, 0, 'GCN1',    ],
    \['6819', 'PITCAIRN',                                 'PITCAIRN',     0, 0, 'GCN1',    ],
    \['6820', 'VERDE',                                    'VERDE',        1, 0, '_GCN',     ],
    \['6821', 'VERDE',                                    'VERDE',        1, 0, '_GCN',     ],
    \['6822', 'VERDE',                                    'VERDE',        1, 0, '_GCN',     ],
    \['6823', 'VERDE',                                    'VERDE',        1, 0, '_GCN',     ],
    \['6824', 'VERDE',                                    'VERDE',        1, 0, '_GCN',     ],
    \['6825', 'VERDE',                                    'VERDE',        1, 0, '_GCN',     ],
    \['6826', 'VERDE',                                    'VERDE',        1, 0, '_GCN',     ],
    \['6827', 'VERDE',                                    'VERDE',        1, 0, '_GCN',     ],
    \['6828', 'VERDE',                                    'VERDE',        0, 0, '_GCN',     ],
    \['6829', 'VERDE',                                    'VERDE',        0, 0, '_GCN',     ],
    \['682A', 'VERDE',                                    'VERDE',        1, 0, '_GCN',     ],
    \['682B', 'VERDE',                                    'VERDE',        1, 0, '_GCN',     ],
    \['682C', 'VERDE',                                    'VERDE',        0, 0, '_GCN',     ],
    \['682D', 'VERDE',                                    'VERDE',        1, 0, '_GCN',     ],
    \['682F', 'VERDE',                                    'VERDE',        1, 0, '_GCN',     ],
    \['6830', 'VERDE',                                    'VERDE',        1, 0, '_GCN',     ],
    \['6831', 'VERDE',                                    'VERDE',        1, 0, '_GCN',     ],
    \['6835', 'VERDE',                                    'VERDE',        0, 0, '_GCN',     ],
    \['6837', 'VERDE',                                    'VERDE',        0, 0, '_GCN',     ],
    \['6838', 'VERDE',                                    'VERDE',        0, 0, '_GCN',     ],
    \['6839', 'VERDE',                                    'VERDE',        0, 0, '_GCN',     ],
    \['683B', 'VERDE',                                    'VERDE',        0, 0, '_GCN',     ],
    \['683D', 'VERDE',                                    'VERDE',        0, 0, '_GCN',     ],
    \['683F', 'VERDE',                                    'VERDE',        0, 0, '_GCN',     ],
    \['6840', 'TURKS',                                    'TURKSX',       1, 0, 'TSGCN',   ],
    \['6841', 'TURKS',                                    'TURKSX',       1, 0, 'TSGCN',   ],
    \['6842', 'TURKS',                                    'TURKSX',       1, 0, 'TSGCN',   ],
    \['6843', 'TURKS',                                    'TURKSX',       1, 0, 'TSGCN',   ],
    \['6849', 'TURKS',                                    'TURKS',        0, 0, 'TS2',     ],
    \['684C', 'PITCAIRN',                                 'PITCAIRN',     0, 0, 'GCN1',    ],
    \['6850', 'TURKS',                                    'TURKS',        0, 0, 'TS2',     ],
    \['6858', 'TURKS',                                    'TURKS',        0, 0, 'TS2',     ],
    \['6859', 'TURKS',                                    'TURKS',        0, 0, 'TS2',     ],
    \['6880', 'CYPRESS',                                  'CYPRESS',      1, 0, 'TS2',     ],
    \['6888', 'ATI FirePro (FireGL) Graphics Adapter',    'CYPRESS',      0, 0, 'TS2',     ],
    \['6889', 'ATI FirePro (FireGL) Graphics Adapter',    'CYPRESS',      0, 0, 'TS2',     ],
    \['688A', 'ATI FirePro (FireGL) Graphics Adapter',    'CYPRESS',      0, 0, 'TS2',     ],
    \['688C', 'AMD Firestream 9370',                      'CYPRESS',      0, 0, 'TS2',     ],
    \['688D', 'AMD Firestream 9350',                      'CYPRESS',      0, 0, 'TS2',     ],
    \['6898', 'ATI Radeon HD 5800 Series',                'CYPRESS',      0, 0, 'TS2',     ],
    \['6899', 'ATI Radeon HD 5800 Series',                'CYPRESS',      0, 0, 'TS2',     ],
    \['689B', 'ATI Radeon HD 5800 Series',                'CYPRESS',      0, 0, 'TS2',     ],
    \['689C', 'ATI Radeon HD 5900 Series',                'HEMLOCK',      0, 0, 'TS2',     ],
    \['689D', 'ATI Radeon HD 5900 Series',                'HEMLOCK',      0, 0, 'TS2',     ],
    \['689E', 'ATI Radeon HD 5800 Series',                'CYPRESS',      0, 0, 'TS2',     ],
    \['68A0', 'ATI Mobility Radeon HD 5800 Series',       'JUNIPER',      1, 0, 'TS2',     ],
    \['68A1', 'ATI Mobility Radeon HD 5800 Series',       'JUNIPER',      1, 0, 'TS2',     ],
    \['68A8', 'ATI FirePro (FireGL) Graphics Adapter',    'JUNIPER',      0, 0, 'TS2',     ],
    \['68A9', 'ATI FirePro (FireGL) Graphics Adapter',    'JUNIPER',      0, 0, 'TS2',     ],
    \['68B0', 'ATI Mobility Radeon HD 5800 Series',       'JUNIPER',      1, 0, 'TS2',     ],
    \['68B8', 'ATI Radeon HD 5700 Series',                'JUNIPER',      0, 0, 'TS2',     ],
    \['68B9', 'ATI Radeon HD 5700 Series',                'JUNIPER',      0, 0, 'TS2',     ],
    \['68BA', 'ATI Radeon HD 6700 Series',                'JUNIPER',      0, 0, 'TS2',     ],
    \['68BE', 'ATI Radeon HD 5700 Series',                'JUNIPER',      0, 0, 'TS2',     ],
    \['68BF', 'ATI Radeon HD 6700 Series',                'JUNIPER',      0, 0, 'TS2',     ],
    \['68C0', 'ATI Mobility Radeon HD 5000 Series',       'REDWOOD',      1, 0, 'TS2',     ],
    \['68C1', 'ATI Mobility Radeon HD 5000 Series',       'REDWOOD',      1, 0, 'TS2',     ],
    \['68C7', 'ATI Mobility Radeon HD 5570',              'REDWOOD',      1, 0, 'TS2',     ],
    \['68C8', 'ATI FirePro (FireGL) Graphics Adapter',    'REDWOOD',      0, 0, 'TS2',     ],
    \['68C9', 'ATI FirePro (FireGL) Graphics Adapter',    'REDWOOD',      0, 0, 'TS2',     ],
    \['68D8', 'ATI Radeon HD 5670',                       'REDWOOD',      0, 0, 'TS2',     ],
    \['68D9', 'ATI Radeon HD 5570',                       'REDWOOD',      0, 0, 'TS2',     ],
    \['68DA', 'ATI Radeon HD 5500 Series',                'REDWOOD',      0, 0, 'TS2',     ],
    \['68DE', 'REDWOOD',                                  'REDWOOD',      0, 0, 'TS2',     ],
    \['68E0', 'ATI Mobility Radeon HD 5000 Series',       'CEDAR',        1, 0, 'TS2',     ],
    \['68E1', 'ATI Mobility Radeon HD 5000 Series',       'CEDAR',        1, 0, 'TS2',     ],
    \['68E4', 'ATI Mobility Radeon Graphics',             'CEDAR',        1, 0, 'TS2',     ],
    \['68E5', 'ATI Mobility Radeon Graphics',             'CEDAR',        1, 0, 'TS2',     ],
    \['68E8', 'CEDAR',                                    'CEDAR',        0, 0, 'TS2',     ],
    \['68E9', 'ATI FirePro (FireGL) Graphics Adapter',    'CEDAR',        0, 0, 'TS2',     ],
    \['68F1', 'ATI FirePro (FireGL) Graphics Adapter',    'CEDAR',        0, 0, 'TS2',     ],
    \['68F2', 'ATI FirePro 2270',                         'CEDAR',        0, 0, 'TS2',     ],
    \['68F8', 'CEDAR',                                    'CEDAR',        0, 0, 'TS2',     ],
    \['68F9', 'ATI Radeon HD 5450',                       'CEDAR',        0, 0, 'TS2',     ],
    \['68FA', 'CEDAR',                                    'CEDAR',        0, 0, 'TS2',     ],
    \['68FE', 'CEDAR',                                    'CEDAR',        0, 0, 'TS2',     ],
    \['7100', 'ATI Radeon X1800',                         'R520',         0, 0, 'OG20',    ],
    \['7101', 'ATI Mobility Radeon X1800 XT',             'R520',         1, 0, 'OG20',    ],
    \['7102', 'ATI Mobility Radeon X1800',                'R520',         1, 0, 'OG20',    ],
    \['7103', 'ATI Mobility FireGL V7200',                'R520',         1, 0, 'OG20',    ],
    \['7104', 'ATI FireGL V7200',                         'R520',         0, 0, 'OG20',    ],
    \['7105', 'ATI FireGL V5300',                         'R520',         0, 0, 'OG20',    ],
    \['7106', 'ATI Mobility FireGL V7100',                'R520',         1, 0, 'OG20',    ],
    \['7108', 'ATI Radeon X1800',                         'R520',         0, 0, 'OG20',    ],
    \['7109', 'ATI Radeon X1800',                         'R520',         0, 0, 'OG20',    ],
    \['710A', 'ATI Radeon X1800',                         'R520',         0, 0, 'OG20',    ],
    \['710B', 'ATI Radeon X1800',                         'R520',         0, 0, 'OG20',    ],
    \['710C', 'ATI Radeon X1800',                         'R520',         0, 0, 'OG20',    ],
    \['710E', 'ATI FireGL V7300',                         'R520',         0, 0, 'OG20',    ],
    \['710F', 'ATI FireGL V7350',                         'R520',         0, 0, 'OG20',    ],
    \['7140', 'ATI Radeon X1600',                         'RV515',        0, 0, 'OG20',    ],
    \['7141', 'ATI RV505',                                'RV515',        0, 0, 'OG20',    ],
    \['7142', 'ATI Radeon X1300/X1550',                   'RV515',        0, 0, 'OG20',    ],
    \['7143', 'ATI Radeon X1550',                         'RV515',        0, 0, 'OG20',    ],
    \['7144', 'ATI M54-GL',                               'RV515',        1, 0, 'OG20',    ],
    \['7145', 'ATI Mobility Radeon X1400',                'RV515',        1, 0, 'OG20',    ],
    \['7146', 'ATI Radeon X1300/X1550',                   'RV515',        0, 0, 'OG20',    ],
    \['7147', 'ATI Radeon X1550 64-bit',                  'RV515',        0, 0, 'OG20',    ],
    \['7149', 'ATI Mobility Radeon X1300',                'RV515',        1, 0, 'OG20',    ],
    \['714A', 'ATI Mobility Radeon X1300',                'RV515',        1, 0, 'OG20',    ],
    \['714B', 'ATI Mobility Radeon X1300',                'RV515',        1, 0, 'OG20',    ],
    \['714C', 'ATI Mobility Radeon X1300',                'RV515',        1, 0, 'OG20',    ],
    \['714D', 'ATI Radeon X1300',                         'RV515',        0, 0, 'OG20',    ],
    \['714E', 'ATI Radeon X1300',                         'RV515',        0, 0, 'OG20',    ],
    \['714F', 'ATI RV505',                                'RV515',        0, 0, 'OG20',    ],
    \['7151', 'ATI RV505',                                'RV515',        0, 0, 'OG20',    ],
    \['7152', 'ATI FireGL V3300',                         'RV515',        0, 0, 'OG20',    ],
    \['7153', 'ATI FireGL V3350',                         'RV515',        0, 0, 'OG20',    ],
    \['715E', 'ATI Radeon X1300',                         'RV515',        0, 0, 'OG20',    ],
    \['715F', 'ATI Radeon X1550 64-bit',                  'RV515',        0, 0, 'OG20',    ],
    \['7180', 'ATI Radeon X1300/X1550',                   'RV515',        0, 0, 'OG20',    ],
    \['7181', 'ATI Radeon X1600',                         'RV515',        0, 0, 'OG20',    ],
    \['7183', 'ATI Radeon X1300/X1550',                   'RV515',        0, 0, 'OG20',    ],
    \['7186', 'ATI Mobility Radeon X1450',                'RV515',        1, 0, 'OG20',    ],
    \['7187', 'ATI Radeon X1300/X1550',                   'RV515',        0, 0, 'OG20',    ],
    \['7188', 'ATI Mobility Radeon X2300',                'RV515',        1, 0, 'OG20',    ],
    \['718A', 'ATI Mobility Radeon X2300',                'RV515',        1, 0, 'OG20',    ],
    \['718B', 'ATI Mobility Radeon X1350',                'RV515',        1, 0, 'OG20',    ],
    \['718C', 'ATI Mobility Radeon X1350',                'RV515',        1, 0, 'OG20',    ],
    \['718D', 'ATI Mobility Radeon X1450',                'RV515',        1, 0, 'OG20',    ],
    \['718F', 'ATI Radeon X1300',                         'RV515',        0, 0, 'OG20',    ],
    \['7193', 'ATI Radeon X1550',                         'RV515',        0, 0, 'OG20',    ],
    \['7196', 'ATI Mobility Radeon X1350',                'RV515',        1, 0, 'OG20',    ],
    \['719B', 'ATI FireMV 2250',                          'RV515',        0, 0, 'OG20',    ],
    \['719F', 'ATI Radeon X1550 64-bit',                  'RV515',        0, 0, 'OG20',    ],
    \['71C0', 'ATI Radeon X1600',                         'RV530',        0, 0, 'OG20',    ],
    \['71C1', 'ATI Radeon X1650',                         'RV530',        0, 0, 'OG20',    ],
    \['71C2', 'ATI Radeon X1600',                         'RV530',        0, 0, 'OG20',    ],
    \['71C3', 'ATI Radeon X1600',                         'RV530',        0, 0, 'OG20',    ],
    \['71C4', 'ATI Mobility FireGL V5200',                'RV530',        1, 0, 'OG20',    ],
    \['71C5', 'ATI Mobility Radeon X1600',                'RV530',        1, 0, 'OG20',    ],
    \['71C6', 'ATI Radeon X1650',                         'RV530',        0, 0, 'OG20',    ],
    \['71C7', 'ATI Radeon X1650',                         'RV530',        0, 0, 'OG20',    ],
    \['71CD', 'ATI Radeon X1600',                         'RV530',        0, 0, 'OG20',    ],
    \['71CE', 'ATI Radeon X1300 XT/X1600 Pro',            'RV530',        0, 0, 'OG20',    ],
    \['71D2', 'ATI FireGL V3400',                         'RV530',        0, 0, 'OG20',    ],
    \['71D4', 'ATI Mobility FireGL V5250',                'RV530',        1, 0, 'OG20',    ],
    \['71D5', 'ATI Mobility Radeon X1700',                'RV530',        1, 0, 'OG20',    ],
    \['71D6', 'ATI Mobility Radeon X1700 XT',             'RV530',        1, 0, 'OG20',    ],
    \['71DA', 'ATI FireGL V5200',                         'RV530',        0, 0, 'OG20',    ],
    \['71DE', 'ATI Mobility Radeon X1700',                'RV530',        1, 0, 'OG20',    ],
    \['7200', 'ATI Radeon X2300HD',                       'RV515',        0, 0, 'OG20',    ],
    \['7210', 'ATI Mobility Radeon HD 2300',              'RV515',        1, 0, 'OG20',    ],
    \['7211', 'ATI Mobility Radeon HD 2300',              'RV515',        1, 0, 'OG20',    ],
    \['7240', 'ATI Radeon X1950',                         'R580',         0, 0, 'OG20',    ],
    \['7243', 'ATI Radeon X1900',                         'R580',         0, 0, 'OG20',    ],
    \['7244', 'ATI Radeon X1950',                         'R580',         0, 0, 'OG20',    ],
    \['7245', 'ATI Radeon X1900',                         'R580',         0, 0, 'OG20',    ],
    \['7246', 'ATI Radeon X1900',                         'R580',         0, 0, 'OG20',    ],
    \['7247', 'ATI Radeon X1900',                         'R580',         0, 0, 'OG20',    ],
    \['7248', 'ATI Radeon X1900',                         'R580',         0, 0, 'OG20',    ],
    \['7249', 'ATI Radeon X1900',                         'R580',         0, 0, 'OG20',    ],
    \['724A', 'ATI Radeon X1900',                         'R580',         0, 0, 'OG20',    ],
    \['724B', 'ATI Radeon X1900',                         'R580',         0, 0, 'OG20',    ],
    \['724C', 'ATI Radeon X1900',                         'R580',         0, 0, 'OG20',    ],
    \['724D', 'ATI Radeon X1900',                         'R580',         0, 0, 'OG20',    ],
    \['724E', 'ATI AMD Stream Processor',                 'R580',         0, 0, 'OG20',    ],
    \['724F', 'ATI Radeon X1900',                         'R580',         0, 0, 'OG20',    ],
    \['7280', 'ATI Radeon X1950',                         'RV570',        0, 0, 'OG20',    ],
    \['7281', 'ATI RV560',                                'RV560',        0, 0, 'OG20',    ],
    \['7283', 'ATI RV560',                                'RV560',        0, 0, 'OG20',    ],
    \['7284', 'ATI Mobility Radeon X1900',                'R580',         1, 0, 'OG20',    ],
    \['7287', 'ATI RV560',                                'RV560',        0, 0, 'OG20',    ],
    \['7288', 'ATI Radeon X1950 GT',                      'RV570',        0, 0, 'OG20',    ],
    \['7289', 'ATI RV570',                                'RV570',        0, 0, 'OG20',    ],
    \['728B', 'ATI RV570',                                'RV570',        0, 0, 'OG20',    ],
    \['728C', 'ATI FireGL V7400',                         'RV570',        0, 0, 'OG20',    ],
    \['7290', 'ATI RV560',                                'RV560',        0, 0, 'OG20',    ],
    \['7291', 'ATI Radeon X1650',                         'RV560',        0, 0, 'OG20',    ],
    \['7293', 'ATI Radeon X1650',                         'RV560',        0, 0, 'OG20',    ],
    \['7297', 'ATI RV560',                                'RV560',        0, 0, 'OG20',    ],
    \['7834', 'ATI Radeon 9100 PRO IGP',                  'RS300',        0, 1, 'OG13',    ],
    \['7835', 'ATI Radeon Mobility 9200 IGP',             'RS300',        1, 1, 'OG13',    ],
    \['791E', 'ATI Radeon X1200',                         'RS690',        0, 1, 'OG20',    ],
    \['791F', 'ATI Radeon X1200',                         'RS690',        0, 1, 'OG20',    ],
    \['793F', 'ATI Radeon X1200',                         'RS600',        0, 1, 'OG20',    ],
    \['7941', 'ATI Radeon X1200',                         'RS600',        0, 1, 'OG20',    ],
    \['7942', 'ATI Radeon X1200',                         'RS600',        0, 1, 'OG20',    ],
    \['796C', 'ATI RS740',                                'RS740',        0, 1, 'OG20',    ],
    \['796D', 'ATI RS740M',                               'RS740',        0, 1, 'OG20',    ],
    \['796E', 'ATI RS740',                                'RS740',        0, 1, 'OG20',    ],
    \['796F', 'ATI RS740M',                               'RS740',        0, 1, 'OG20',    ],
    \['9400', 'ATI Radeon HD 2900 XT',                    'R600',         0, 0, 'TS1',     ],
    \['9401', 'ATI Radeon HD 2900 XT',                    'R600',         0, 0, 'TS1',     ],
    \['9402', 'ATI Radeon HD 2900 XT',                    'R600',         0, 0, 'TS1',     ],
    \['9403', 'ATI Radeon HD 2900 Pro',                   'R600',         0, 0, 'TS1',     ],
    \['9405', 'ATI Radeon HD 2900 GT',                    'R600',         0, 0, 'TS1',     ],
    \['940A', 'ATI FireGL V8650',                         'R600',         0, 0, 'TS1',     ],
    \['940B', 'ATI FireGL V8600',                         'R600',         0, 0, 'TS1',     ],
    \['940F', 'ATI FireGL V7600',                         'R600',         0, 0, 'TS1',     ],
    \['9440', 'ATI Radeon 4800 Series',                   'RV770',        0, 0, 'TS1',     ],
    \['9441', 'ATI Radeon HD 4870 x2',                    'RV770',        0, 0, 'TS1',     ],
    \['9442', 'ATI Radeon 4800 Series',                   'RV770',        0, 0, 'TS1',     ],
    \['9443', 'ATI Radeon HD 4850 x2',                    'RV770',        0, 0, 'TS1',     ],
    \['9444', 'ATI FirePro V8750 (FireGL)',               'RV770',        0, 0, 'TS1',     ],
    \['9446', 'ATI FirePro V7760 (FireGL)',               'RV770',        0, 0, 'TS1',     ],
    \['944A', 'ATI Mobility RADEON HD 4850',              'RV770',        1, 0, 'TS1',     ],
    \['944B', 'ATI Mobility RADEON HD 4850 X2',           'RV770',        1, 0, 'TS1',     ],
    \['944C', 'ATI Radeon 4800 Series',                   'RV770',        0, 0, 'TS1',     ],
    \['944E', 'ATI FirePro RV770',                        'RV770',        0, 0, 'TS1',     ],
    \['9450', 'AMD FireStream 9270',                      'RV770',        0, 0, 'TS1',     ],
    \['9452', 'AMD FireStream 9250',                      'RV770',        0, 0, 'TS1',     ],
    \['9456', 'ATI FirePro V8700 (FireGL)',               'RV770',        0, 0, 'TS1',     ],
    \['945A', 'ATI Mobility RADEON HD 4870',              'RV770',        1, 0, 'TS1',     ],
    \['945B', 'ATI Mobility RADEON M98',                  'RV770',        1, 0, 'TS1',     ],
    \['945E', 'ATI Mobility RADEON HD 4870',              'RV770',        1, 0, 'TS1',     ],
    \['9460', 'ATI Radeon 4800 Series',                   'RV770',        0, 0, 'TS1',     ],
    \['9462', 'ATI Radeon 4800 Series',                   'RV770',        0, 0, 'TS1',     ],
    \['946A', 'ATI FirePro M7750',                        'RV770',        1, 0, 'TS1',     ],
    \['946B', 'ATI M98',                                  'RV770',        1, 0, 'TS1',     ],
    \['947A', 'ATI M98',                                  'RV770',        1, 0, 'TS1',     ],
    \['947B', 'ATI M98',                                  'RV770',        1, 0, 'TS1',     ],
    \['9480', 'ATI Mobility Radeon HD 4650',              'RV730',        1, 0, 'TS1',     ],
    \['9487', 'ATI Radeon RV730 (AGP)',                   'RV730',        0, 0, 'TS1',     ],
    \['9488', 'ATI Mobility Radeon HD 4670',              'RV730',        1, 0, 'TS1',     ],
    \['9489', 'ATI FirePro M5750',                        'RV730',        1, 0, 'TS1',     ],
    \['948A', 'ATI Mobility Radeon HD 4670',              'RV730',        1, 0, 'TS1',     ],
    \['948F', 'ATI Radeon RV730 (AGP)',                   'RV730',        0, 0, 'TS1',     ],
    \['9490', 'ATI RV730XT [Radeon HD 4670]',             'RV730',        0, 0, 'TS1',     ],
    \['9491', 'ATI RADEON E4600',                         'RV730',        0, 0, 'TS1',     ],
    \['9495', 'ATI Radeon HD 4600 Series',                'RV730',        0, 0, 'TS1',     ],
    \['9498', 'ATI RV730 PRO [Radeon HD 4650]',           'RV730',        0, 0, 'TS1',     ],
    \['949C', 'ATI FirePro V7750 (FireGL)',               'RV730',        0, 0, 'TS1',     ],
    \['949E', 'ATI FirePro V5700 (FireGL)',               'RV730',        0, 0, 'TS1',     ],
    \['949F', 'ATI FirePro V3750 (FireGL)',               'RV730',        0, 0, 'TS1',     ],
    \['94A0', 'ATI Mobility Radeon HD 4830',              'RV740',        1, 0, 'TS1',     ],
    \['94A1', 'ATI Mobility Radeon HD 4850',              'RV740',        1, 0, 'TS1',     ],
    \['94A3', 'ATI FirePro M7740',                        'RV740',        1, 0, 'TS1',     ],
    \['94B1', 'ATI RV740',                                'RV740',        0, 0, 'TS1',     ],
    \['94B3', 'ATI Radeon HD 4770',                       'RV740',        0, 0, 'TS1',     ],
    \['94B4', 'ATI Radeon HD 4700 Series',                'RV740',        0, 0, 'TS1',     ],
    \['94B5', 'ATI Radeon HD 4770',                       'RV740',        0, 0, 'TS1',     ],
    \['94B9', 'ATI FirePro M5750',                        'RV740',        1, 0, 'TS1',     ],
    \['94C0', 'ATI RV610',                                'RV610',        0, 0, 'TS1',     ],
    \['94C1', 'ATI Radeon HD 2400 XT',                    'RV610',        0, 0, 'TS1',     ],
    \['94C3', 'ATI Radeon HD 2400 Pro',                   'RV610',        0, 0, 'TS1',     ],
    \['94C4', 'ATI Radeon HD 2400 PRO AGP',               'RV610',        0, 0, 'TS1',     ],
    \['94C5', 'ATI FireGL V4000',                         'RV610',        0, 0, 'TS1',     ],
    \['94C6', 'ATI RV610',                                'RV610',        0, 0, 'TS1',     ],
    \['94C7', 'ATI Radeon HD 2350',                       'RV610',        0, 0, 'TS1',     ],
    \['94C8', 'ATI Mobility Radeon HD 2400 XT',           'RV610',        1, 0, 'TS1',     ],
    \['94C9', 'ATI Mobility Radeon HD 2400',              'RV610',        1, 0, 'TS1',     ],
    \['94CB', 'ATI RADEON E2400',                         'RV610',        1, 0, 'TS1',     ],
    \['94CC', 'ATI RV610',                                'RV610',        0, 0, 'TS1',     ],
    \['94CD', 'ATI FireMV 2260',                          'RV610',        0, 0, 'TS1',     ],
    \['9500', 'ATI RV670',                                'RV670',        0, 0, 'TS1',     ],
    \['9501', 'ATI Radeon HD3870',                        'RV670',        0, 0, 'TS1',     ],
    \['9504', 'ATI Mobility Radeon HD 3850',              'RV670',        1, 0, 'TS1',     ],
    \['9505', 'ATI Radeon HD3850',                        'RV670',        0, 0, 'TS1',     ],
    \['9506', 'ATI Mobility Radeon HD 3850 X2',           'RV670',        1, 0, 'TS1',     ],
    \['9507', 'ATI RV670',                                'RV670',        0, 0, 'TS1',     ],
    \['9508', 'ATI Mobility Radeon HD 3870',              'RV670',        1, 0, 'TS1',     ],
    \['9509', 'ATI Mobility Radeon HD 3870 X2',           'RV670',        1, 0, 'TS1',     ],
    \['950F', 'ATI Radeon HD3870 X2',                     'RV670',        0, 0, 'TS1',     ],
    \['9511', 'ATI FireGL V7700',                         'RV670',        0, 0, 'TS1',     ],
    \['9515', 'ATI Radeon HD3850',                        'RV670',        0, 0, 'TS1',     ],
    \['9517', 'ATI Radeon HD3690',                        'RV670',        0, 0, 'TS1',     ],
    \['9519', 'AMD Firestream 9170',                      'RV670',        0, 0, 'TS1',     ],
    \['9540', 'ATI Radeon HD 4550',                       'RV710',        0, 0, 'TS1',     ],
    \['9541', 'ATI Radeon RV710',                         'RV710',        0, 0, 'TS1',     ],
    \['9542', 'ATI Radeon RV710',                         'RV710',        0, 0, 'TS1',     ],
    \['954E', 'ATI Radeon RV710',                         'RV710',        0, 0, 'TS1',     ],
    \['954F', 'ATI Radeon HD 4350',                       'RV710',        0, 0, 'TS1',     ],
    \['9552', 'ATI Mobility Radeon 4300 Series',          'RV710',        1, 0, 'TS1',     ],
    \['9553', 'ATI Mobility Radeon 4500 Series',          'RV710',        1, 0, 'TS1',     ],
    \['9555', 'ATI Mobility Radeon 4500 Series',          'RV710',        1, 0, 'TS1',     ],
    \['9557', 'ATI FirePro RG220',                        'RV710',        1, 0, 'TS1',     ],
    \['955F', 'ATI Mobility Radeon 4330',                 'RV710',        1, 0, 'TS1',     ],
    \['9580', 'ATI RV630',                                'RV630',        0, 0, 'TS1',     ],
    \['9581', 'ATI Mobility Radeon HD 2600',              'RV630',        1, 0, 'TS1',     ],
    \['9583', 'ATI Mobility Radeon HD 2600 XT',           'RV630',        1, 0, 'TS1',     ],
    \['9586', 'ATI Radeon HD 2600 XT AGP',                'RV630',        0, 0, 'TS1',     ],
    \['9587', 'ATI Radeon HD 2600 Pro AGP',               'RV630',        0, 0, 'TS1',     ],
    \['9588', 'ATI Radeon HD 2600 XT',                    'RV630',        0, 0, 'TS1',     ],
    \['9589', 'ATI Radeon HD 2600 Pro',                   'RV630',        0, 0, 'TS1',     ],
    \['958A', 'ATI Gemini RV630',                         'RV630',        0, 0, 'TS1',     ],
    \['958B', 'ATI Gemini Mobility Radeon HD 2600 XT',    'RV630',        1, 0, 'TS1',     ],
    \['958C', 'ATI FireGL V5600',                         'RV630',        0, 0, 'TS1',     ],
    \['958D', 'ATI FireGL V3600',                         'RV630',        0, 0, 'TS1',     ],
    \['958E', 'ATI Radeon HD 2600 LE',                    'RV630',        0, 0, 'TS1',     ],
    \['958F', 'ATI Mobility FireGL Graphics Processor',   'RV630',        1, 0, 'TS1',     ],
    \['9590', 'ATI Radeon HD 3600 Series',                'RV635',        0, 0, 'TS1',     ],
    \['9591', 'ATI Mobility Radeon HD 3650',              'RV635',        1, 0, 'TS1',     ],
    \['9593', 'ATI Mobility Radeon HD 3670',              'RV635',        1, 0, 'TS1',     ],
    \['9595', 'ATI Mobility FireGL V5700',                'RV635',        1, 0, 'TS1',     ],
    \['9596', 'ATI Radeon HD 3650 AGP',                   'RV635',        0, 0, 'TS1',     ],
    \['9597', 'ATI Radeon HD 3600 PRO',                   'RV635',        0, 0, 'TS1',     ],
    \['9598', 'ATI Radeon HD 3600 XT',                    'RV635',        0, 0, 'TS1',     ],
    \['9599', 'ATI Radeon HD 3600 PRO',                   'RV635',        0, 0, 'TS1',     ],
    \['959B', 'ATI Mobility FireGL V5725',                'RV635',        1, 0, 'TS1',     ],
    \['95C0', 'ATI Radeon HD 3470',                       'RV620',        0, 0, 'TS1',     ],
    \['95C2', 'ATI Mobility Radeon HD 3430',              'RV620',        1, 0, 'TS1',     ],
    \['95C4', 'ATI Mobility Radeon HD 3400 Series',       'RV620',        1, 0, 'TS1',     ],
    \['95C5', 'ATI Radeon HD 3450',                       'RV620',        0, 0, 'TS1',     ],
    \['95C6', 'ATI Radeon HD 3450',                       'RV620',        0, 0, 'TS1',     ],
    \['95C7', 'ATI Radeon HD 3430',                       'RV620',        0, 0, 'TS1',     ],
    \['95C9', 'ATI Radeon HD 3450',                       'RV620',        0, 0, 'TS1',     ],
    \['95CC', 'ATI FirePro V3700',                        'RV620',        0, 0, 'TS1',     ],
    \['95CD', 'ATI FireMV 2450',                          'RV620',        0, 0, 'TS1',     ],
    \['95CE', 'ATI FireMV 2260',                          'RV620',        0, 0, 'TS1',     ],
    \['95CF', 'ATI FireMV 2260',                          'RV620',        0, 0, 'TS1',     ],
    \['9610', 'ATI Radeon HD 3200 Graphics',              'RS780',        0, 1, 'TS1',     ],
    \['9611', 'ATI Radeon 3100 Graphics',                 'RS780',        0, 1, 'TS1',     ],
    \['9612', 'ATI Radeon HD 3200 Graphics',              'RS780',        0, 1, 'TS1',     ],
    \['9613', 'ATI Radeon 3100 Graphics',                 'RS780',        0, 1, 'TS1',     ],
    \['9614', 'ATI Radeon HD 3300 Graphics',              'RS780',        0, 1, 'TS1',     ],
    \['9615', 'ATI Radeon HD 3200 Graphics',              'RS780',        0, 1, 'TS1',     ],
    \['9616', 'ATI Radeon 3000 Graphics',                 'RS780',        0, 1, 'TS1',     ],
    \['9640', 'SUMO',                                     'SUMO',         0, 1, 'TS2',     ],
    \['9641', 'SUMO',                                     'SUMO',         1, 1, 'TS2',     ],
    \['9642', 'SUMO2',                                    'SUMO2',        0, 1, 'TS2',     ],
    \['9643', 'SUMO2',                                    'SUMO2',        1, 1, 'TS2',     ],
    \['9644', 'SUMO2',                                    'SUMO2',        0, 1, 'TS2',     ],
    \['9645', 'SUMO2',                                    'SUMO2',        1, 1, 'TS2',     ],
    \['9647', 'SUMO',                                     'SUMO',         1, 1, 'TS2',     ],
    \['9648', 'SUMO',                                     'SUMO',         1, 1, 'TS2',     ],
    \['9649', 'SUMO2',                                    'SUMO2',        1, 1, 'TS2',     ],
    \['964A', 'SUMO',                                     'SUMO',         0, 1, 'TS2',     ],
    \['964B', 'SUMO',                                     'SUMO',         0, 1, 'TS2',     ],
    \['964C', 'SUMO',                                     'SUMO',         0, 1, 'TS2',     ],
    \['964E', 'SUMO',                                     'SUMO',         1, 1, 'TS2',     ],
    \['964F', 'SUMO',                                     'SUMO',         1, 1, 'TS2',     ],
    \['9710', 'ATI Radeon HD 4200',                       'RS880',        0, 1, 'TS1',     ],
    \['9711', 'ATI Radeon 4100',                          'RS880',        0, 1, 'TS1',     ],
    \['9712', 'ATI Mobility Radeon HD 4200',              'RS880',        1, 1, 'TS1',     ],
    \['9713', 'ATI Mobility Radeon 4100',                 'RS880',        1, 1, 'TS1',     ],
    \['9714', 'ATI Radeon HD 4290',                       'RS880',        0, 1, 'TS1',     ],
    \['9715', 'ATI Radeon HD 4250',                       'RS880',        0, 1, 'TS1',     ],
    \['9802', 'AMD Radeon HD 6310 Graphics',              'PALM',         0, 1, 'TS2',     ],
    \['9803', 'AMD Radeon HD 6310 Graphics',              'PALM',         0, 1, 'TS2',     ],
    \['9804', 'AMD Radeon HD 6250 Graphics',              'PALM',         0, 1, 'TS2',     ],
    \['9805', 'AMD Radeon HD 6250 Graphics',              'PALM',         0, 1, 'TS2',     ],
    \['9806', 'AMD Radeon HD 6300 Series Graphics',       'PALM',         0, 1, 'TS2',     ],
    \['9807', 'AMD Radeon HD 6200 Series Graphics',       'PALM',         0, 1, 'TS2',     ],
    \['9808', 'PALM',                                     'PALM',         0, 1, 'TS2',     ],
    \['9809', 'PALM',                                     'PALM',         0, 1, 'TS2',     ],
    \['980A', 'PALM',                                     'PALM',         0, 1, 'TS2',     ],
    \['9830', 'KABINI',                                   'KABINI',       1, 1, 'GCN2',    ],
    \['9831', 'KABINI',                                   'KABINI',       0, 1, 'GCN2',    ],
    \['9832', 'KABINI',                                   'KABINI',       1, 1, 'GCN2',    ],
    \['9833', 'KABINI',                                   'KABINI',       0, 1, 'GCN2',    ],
    \['9834', 'KABINI',                                   'KABINI',       1, 1, 'GCN2',    ],
    \['9835', 'KABINI',                                   'KABINI',       0, 1, 'GCN2',    ],
    \['9836', 'KABINI',                                   'KABINI',       1, 1, 'GCN2',    ],
    \['9837', 'KABINI',                                   'KABINI',       0, 1, 'GCN2',    ],
    \['9838', 'KABINI',                                   'KABINI',       1, 1, 'GCN2',    ],
    \['9839', 'KABINI',                                   'KABINI',       1, 1, 'GCN2',    ],
    \['983A', 'KABINI',                                   'KABINI',       0, 1, 'GCN2',    ],
    \['983B', 'KABINI',                                   'KABINI',       1, 1, 'GCN2',    ],
    \['983C', 'KABINI',                                   'KABINI',       0, 1, 'GCN2',    ],
    \['983D', 'KABINI',                                   'KABINI',       0, 1, 'GCN2',    ],
    \['983E', 'KABINI',                                   'KABINI',       0, 1, 'GCN2',    ],
    \['983F', 'KABINI',                                   'KABINI',       0, 1, 'GCN2',    ],
    \['9850', 'MULLINS',                                  'MULLINS',      1, 1, 'GCN2',    ],
    \['9851', 'MULLINS',                                  'MULLINS',      1, 1, 'GCN2',    ],
    \['9852', 'MULLINS',                                  'MULLINS',      1, 1, 'GCN2',    ],
    \['9853', 'MULLINS',                                  'MULLINS',      1, 1, 'GCN2',    ],
    \['9854', 'MULLINS',                                  'MULLINS',      1, 1, 'GCN2',    ],
    \['9855', 'MULLINS',                                  'MULLINS',      1, 1, 'GCN2',    ],
    \['9856', 'MULLINS',                                  'MULLINS',      1, 1, 'GCN2',    ],
    \['9857', 'MULLINS',                                  'MULLINS',      1, 1, 'GCN2',    ],
    \['9858', 'MULLINS',                                  'MULLINS',      1, 1, 'GCN2',    ],
    \['9859', 'MULLINS',                                  'MULLINS',      1, 1, 'GCN2',    ],
    \['985A', 'MULLINS',                                  'MULLINS',      1, 1, 'GCN2',    ],
    \['985B', 'MULLINS',                                  'MULLINS',      1, 1, 'GCN2',    ],
    \['985C', 'MULLINS',                                  'MULLINS',      1, 1, 'GCN2',    ],
    \['985D', 'MULLINS',                                  'MULLINS',      1, 1, 'GCN2',    ],
    \['985E', 'MULLINS',                                  'MULLINS',      1, 1, 'GCN2',    ],
    \['985F', 'MULLINS',                                  'MULLINS',      1, 1, 'GCN2',    ],
    \['9900', 'ARUBA',                                    'ARUBA',        1, 1, 'TS3',     ],
    \['9901', 'ARUBA',                                    'ARUBA',        0, 1, 'TS3',     ],
    \['9903', 'ARUBA',                                    'ARUBA',        1, 1, 'TS3',     ],
    \['9904', 'ARUBA',                                    'ARUBA',        0, 1, 'TS3',     ],
    \['9905', 'ARUBA',                                    'ARUBA',        0, 1, 'TS3',     ],
    \['9906', 'ARUBA',                                    'ARUBA',        0, 1, 'TS3',     ],
    \['9907', 'ARUBA',                                    'ARUBA',        1, 1, 'TS3',     ],
    \['9908', 'ARUBA',                                    'ARUBA',        1, 1, 'TS3',     ],
    \['9909', 'ARUBA',                                    'ARUBA',        1, 1, 'TS3',     ],
    \['990A', 'ARUBA',                                    'ARUBA',        1, 1, 'TS3',     ],
    \['990B', 'ARUBA',                                    'ARUBA',        1, 1, 'TS3',     ],
    \['990C', 'ARUBA',                                    'ARUBA',        0, 1, 'TS3',     ],
    \['990D', 'ARUBA',                                    'ARUBA',        1, 1, 'TS3',     ],
    \['990E', 'ARUBA',                                    'ARUBA',        0, 1, 'TS3',     ],
    \['990F', 'ARUBA',                                    'ARUBA',        1, 1, 'TS3',     ],
    \['9910', 'ARUBA',                                    'ARUBA',        1, 1, 'TS3',     ],
    \['9913', 'ARUBA',                                    'ARUBA',        1, 1, 'TS3',     ],
    \['9917', 'ARUBA',                                    'ARUBA',        0, 1, 'TS3',     ],
    \['9918', 'ARUBA',                                    'ARUBA',        0, 1, 'TS3',     ],
    \['9919', 'ARUBA',                                    'ARUBA',        0, 1, 'TS3',     ],
    \['9990', 'ARUBA',                                    'ARUBA',        1, 1, 'TS3',     ],
    \['9991', 'ARUBA',                                    'ARUBA',        0, 1, 'TS3',     ],
    \['9992', 'ARUBA',                                    'ARUBA',        1, 1, 'TS3',     ],
    \['9993', 'ARUBA',                                    'ARUBA',        0, 1, 'TS3',     ],
    \['9994', 'ARUBA',                                    'ARUBA',        1, 1, 'TS3',     ],
    \['9995', 'ARUBA',                                    'ARUBA',        1, 1, 'TS3',     ],
    \['9996', 'ARUBA',                                    'ARUBA',        0, 1, 'TS3',     ],
    \['9997', 'ARUBA',                                    'ARUBA',        1, 1, 'TS3',     ],
    \['9998', 'ARUBA',                                    'ARUBA',        0, 1, 'TS3',     ],
    \['9999', 'ARUBA',                                    'ARUBA',        1, 1, 'TS3',     ],
    \['999A', 'ARUBA',                                    'ARUBA',        1, 1, 'TS3',     ],
    \['999B', 'ARUBA',                                    'ARUBA',        1, 1, 'TS3',     ],
    \['999C', 'ARUBA',                                    'ARUBA',        0, 1, 'TS3',     ],
    \['999D', 'ARUBA',                                    'ARUBA',        0, 1, 'TS3',     ],
    \['99A0', 'ARUBA',                                    'ARUBA',        1, 1, 'TS3',     ],
    \['99A2', 'ARUBA',                                    'ARUBA',        1, 1, 'TS3',     ],
    \['99A4', 'ARUBA',                                    'ARUBA',        0, 1, 'TS3',     ],
);

    # Alliance Semiconductor Corporation
    # Alliance Promotion
    # supported by xf86-video-apm
my $pciid_apm = { 
    $key_vesaddc    => 'ToBeChecked',
    $key_vesako     => 'ToBeChecked',
    '6422' => 'AP6422',
    '6424' => 'AT24',    
    '643D' => 'AT3D',    
};    
    
    # Ark Logic
    # supported by xf86-video-ark
my $pciid_ark = { 
    $key_vesaddc    => 'ToBeChecked',
    $key_vesako     => 'ToBeChecked',
    'A091' => '1000PV',
    'A099' => '2000PV',    
    'A0A1' => '2000MT',    
    'A0A9' => '2000MI',    
};    
    
    # ASpeed Technologies
    # supported by xf86-video-ast
my $pciid_ast = { 
    $key_vesaddc    => 'ToBeChecked',
    $key_vesako     => 'ToBeChecked',
    '2000' => 'ASPEED Graphics Family AST2000',
    '2010' => 'ASPEED Graphics Family AST2100',    
    '1180' => 'ASPEED AST1180 Graphics',    
};    

    # Chips & Technologies
    # supported by xf86-video-chips
my $pciid_chips = { 
    $key_vesaddc    => 'ToBeChecked',
    $key_vesako     => 'ToBeChecked',
    '00D8' => 'CT65545',
    '00DC' => 'CT65548',    
    '00E0' => 'CT65550',    
    '00E4' => 'CT65554',    
    '00E5' => 'CT65555',
    '00F4' => 'CT68554',    
    '00C0' => 'CT69000',    
    '0C30' => 'CT69030',    
};    
    
    # Cirrus Logic
    # supported by xf86-video-cirrus
my $pciid_cirrus = { 
    $key_vesaddc    => 'ToBeChecked',
    $key_vesako     => 'ToBeChecked',
    '0038' => 'CL-GD7548',
    '0040' => 'CL-GD7555',
    '00A0' => 'CLGD5430',    
    '00A4' => 'CLGD5434-4',    
    '00A8' => 'CLGD5434-8',
    '00AC' => 'CLGD5436',
    '00B8' => 'CLGD5446',    
    '00BC' => 'CLGD5480',    
    '00D0' => 'CL-GD5462',
    '00D4' => 'CL-GD5464',
    '00D5' => 'CL-GD5464BD',    
    '00D6' => 'CL-GD5465',    
};

    # impossible to support xf86-video-dummy, LOL

    # AMD Geode is difficult because two manufacturers AMD + NSC 
    # supported by xf86-video-geode
my $pciid_geode_amd = { 
    $key_vesaddc    => 'ToBeChecked',
    '2081' => 'GEODELX (AMD)',
    $key_vesako     => 'ToBeChecked',
};    
    
    # supported by xf86-video-geode
my $pciid_geode_ns = { 
    $key_vesaddc    => 'ToBeChecked',
    '0030' => 'GEODEGX (NSC)',
    $key_vesako     => 'ToBeChecked',
};    
    
    # 3Dlabs/TI GLINT/Permedia
    # supported by xf86-video-glint
    # note that the chipsets in $pciid_glint_3dlabs_manualconfig 
    # need manual configuration,
    # cannot be configured by --configure alone!
    # see source for details: 
    # https://gitlab.freedesktop.org/xorg/driver/xf86-video-glint/-/blob/master/src/glint_driver.c
my $pciid_glint_3dlabs = { 
    $key_vesaddc    => 'ToBeChecked',
    $key_vesako     => 'ToBeChecked',
    '000D' => 'r4',
    '000C' => 'pm4',    
    '000A' => 'pm3',    
    '0009' => 'pm2v',    
    '0007' => 'pm2',
    '0004' => 'pm',    
};    

# TODO handle them to warn of manual config!
my $pciid_glint_3dlabs_manualconfig = { 
#     '0008' => 'gamma',
#     '000E' => 'gamma2',    
#     '0001' => '300sx',    
#     '0002' => '500tx',    
#     '0006' => 'mx',
#     '0003' => 'delta',    
};    

my $pciid_glint_ti = { 
    $key_vesaddc    => 'ToBeChecked',
    $key_vesako     => 'ToBeChecked',
    '3D07' => 'ti_pm2',    
    '3D04' => 'ti_pm',    
};    

    # Number Nine
    # supported by xf86-video-i128
my $pciid_xf86video_i128 = {
    $key_vesaddc    => 'ToBeChecked',
    $key_vesako     => 'ToBeChecked',
    '2309' => 'I128',
    '2339' => 'I128_2',
    '493D' => 'I128_T2R',
    '5348' => 'I128_T2R4',
};

    # MGA PCI IDS supported by xf86-video-mga

my $pciid_xf86video_mga = {
    $key_vesaddc    => 'ifi2cfails',
    $key_vesako     => 'ToBeChecked',
    '0519' => 'mga2064w',
    '051A' => 'mga1064sg',
    '051B' => 'mga2164w',
    '051F' => 'mga2164w AGP',
    '1000' => 'mgag100 PCI',
    '1001' => 'mgag100',
    '0520' => 'mgag200 PCI',
    '0521' => 'mgag200',
    '0522' => 'mgag200 SE A PCI',
    '0524' => 'mgag200 SE B PCI',
    '0532' => 'mgag200 eW Nuvoton',
    '0530' => 'mgag200 EV Maxim',
    '0533' => 'mgag200eH',
    '0534' => 'mgag200 ER SH7757',	
    '0536' => 'mgag200 eW3 Nuvoton PCI',
    '0538' => 'mgag200eH3 PCI',
    '0525' => 'mgag400',
    '2527' => 'mgag550',
};
    
    # Neomagic
    # supported by xf86-video-neomagic
my $pciid_neomagic = { 
    $key_vesaddc    => 'ToBeChecked',
    $key_vesako     => 'ToBeChecked',
    '0001' => 'neo2070',
    '0002' => 'neo2090',    
    '0003' => 'neo2093',    
    '0083' => 'neo2097',    
    '0004' => 'neo2160',    
    '0005' => 'neo2200',    
    '0025' => 'neo2230',
    '0006' => 'neo2360',    
    '0016' => 'neo2380',    
};    

    # VIA openchrome
    # supported by xf86-video-openchrome
my $pciid_openchrome = { 
    $key_vesaddc    => 'ToBeChecked',
    $key_vesako     => 'ToBeChecked',
    '3122' => 'CLE266 integrated CastleRock graphics',
    '7205' => 'KM400(A) / KN400(A) / P4M800',    
    '3108' => 'K8M800 / K8N800',
    '3118' => 'PM800 / PN800 / PM880 / CN333 / CN400',    
    '3344' => 'P4M800 Pro / VN800 / CN700',
    '3157' => 'CX700 / VX700',
    '3343' => 'P4M890 / VN890 / CN800',    
    '3230' => 'K8M890 / K8N890',    
    '3371' => 'P4M900 / VN896 / CN896',
    '1122' => 'VX800 / VX820',    
    '5122' => 'VX855 / VX875',    
    '7122' => 'VX900',    
};    

    # Rendition
    # supported by xf86-video-rendition
my $pciid_rendition = { 
    $key_vesaddc    => 'ToBeChecked',
    $key_vesako     => 'ToBeChecked',
    '0001' => 'Verite 1000',
    '2000' => 'Verite V2x00',    
};    

    # the oldest S3 cards
    # supported by xf86-video-s3
my $pciid_s3 = { 
    $key_vesaddc    => 'ToBeChecked',
    $key_bpp    => '16',
    $key_accel  => 'EXA',
    $key_vesako     => 'Yes',
    '88D0' => '964-0',
    '88D1' => '964-1',    
    '88F0' => '968',    
    '8811' => 'Trio32/64',    
    '8812' => 'Aurora64V+',
    '8814' => 'Trio64UV+',    
    '8901' => 'Trio64V2/DX/GX',    
};

    # S3 Savage
    # supported by xf86-video-savage
my $pciid_savage = { 
    $key_vesaddc    => 'ToBeChecked',
    $key_bpp    => '16',
    $key_vesako     => 'ToBeChecked',
    '8A22' => 'Savage4',
    '8A20' => 'Savage3D',
    '8A21' => 'Savage3D-MV',
    '9102' => 'Savage2000',
    '8C10' => 'Savage/MX-MV',
    '8C11' => 'Savage/MX',
    '8C12' => 'Savage/IX-MV',
    '8C13' => 'Savage/IX',
    '8A25' => 'ProSavage PM133',
    '8A26' => 'ProSavage KM133',
    '8D01' => 'Twister PN133',
    '8D02' => 'Twister KN133',
    '8C22' => 'SuperSavage/MX 128',
    '8C24' => 'SuperSavage/MX 64',
    '8C26' => 'SuperSavage/MX 64C',
    '8C2A' => 'SuperSavage/IX 128',
    '8C2B' => 'SuperSavage/IX 128',
    '8C2C' => 'SuperSavage/IX 64',
    '8C2D' => 'SuperSavage/IX 64',
    '8C2E' => 'SuperSavage/IXC 64',
    '8C2F' => 'SuperSavage/IXC 64',
    '8D03' => 'ProSavage DDR',
    '8D04' => 'ProSavage DDR-K',
};    

    # Silicon Motion Inc.
    # supported by xf86-video-siliconmotion
my $pciid_siliconmotion = { 
    $key_vesaddc    => 'ToBeChecked',
    $key_vesako     => 'ToBeChecked',
    '0910' => 'Lynx',
    '0810' => 'Lynx',    
    '0820' => 'Lynx3D',    
    '0710' => 'LynxEM',    
    '0712' => 'LynxEM+',    
    '0720' => 'Lynx3DM',    
    '0730' => 'Cougar3DR',    
    '0501' => 'MSOC',    
};    

    # SiS/XGI
    # supported by xf86-video-sis
my $pciid_sis = { 
    $key_vesaddc    => 'ToBeChecked',
    # the chipset resp. driver doesn't support 24/32bpp!
    $key_bpp => '16',
    $key_vesako     => 'Yes',
    '0200' => 'SIS5597/5598" },',
    '6306' => 'SIS530/620" },',    
    '6326' => 'SIS6326/AGP/DVD" },',    
    '0300' => 'SIS300/305" },',    
    '6300' => 'SIS630/730" },',
    '5300' => 'SIS540" },',    
    '0315' => 'SIS315" },',    
    '0310' => 'SIS315H" },',    
    '0325' => 'SIS315PRO/E" },',
    '5315' => 'SIS550" },',    
    '6325' => 'SIS650/M650/651/740" },',    
    '0330' => 'SIS330(Xabre)" },',    
    '6330' => 'SIS660/[M]661[F|M]X/[M]670/[M]741[GX]/[M]760[GX]/[M]761[GX]/[M]770[GX]',
    '0340' => 'SIS340" },',    
};    

my $pciid_xgi = { 
    $key_vesaddc    => 'ToBeChecked',
    $key_vesako     => 'ToBeChecked',
    '0020' => 'Volari Z7 (XG20)',    
    '0040' => 'Volari V3XT/V5/V8/Duo (XG40)',    
};    
    
    # 3dfx Interactive
    # supported by xf86-video-tdfx
my $pciid_tdfx = { 
    $key_vesaddc    => 'ToBeChecked',
    $key_vesako     => 'ToBeChecked',
    '0003' => '3dfx Banshee',
    '0003' => '3dfx Banshee',
    '0004' => '3dfx Velocity',
    '0005' => '3dfx Voodoo3',    
    '0036' => '3dfx Voodoo3 2000',    
    '003A' => '3dfx Voodoo3 3000',    
    '0007' => '3dfx Voodoo4',    
    '0009' => '3dfx Voodoo5',    
};    
    
    # Trident
    # supported by xf86-video-trident
my $pciid_trident = { 
    $key_vesaddc    => 'ToBeChecked',
    $key_vesako     => 'ToBeChecked',
    '9320', 'cyber9320',
    '9388', 'cyber9388',
    '9397', 'cyber9397',
    '939A', 'cyber9397dvd',
    '9520', 'cyber9520',
    '9525', 'cyber9525dvd',
    '9540', 'cyberblade/e4',
    '9420', 'tgui9420dgi',
    '9440', 'tgui9440agi',
    '9660', 'cyber938x providia968x tgui96x0',
    '9750', '3dimage975',
    '9850', '3dimage985',
    '9880', 'blade3d',
    '8400', 'cyberbladei7',
    '8420', 'cyberbladei7d',
    '8500', 'cyberbladei1',
    '8520', 'cyberbladei1d',
    '8600', 'cyberbladeAi1',
    '8620', 'cyberbladeAi1d',
    '9910', 'bladeXP',
    '8820', 'cyberbladeXPAi1',
    '2100', 'cyberbladeXP4',
    '2200', 'XP5',
};

    # VMware
    # supported by xf86-video-vmware
my $pciid_vmware = { 
    '0405' => 'VMWARE0405 SVGA II Adapter',
    '0710' => 'VMWARE0710 SVGA Adapter',    
};    
    # TODO explore this.
    # Seems like somehow xf86-video-vmware supports vbox, too.
    # See this thread https://forums.freebsd.org/threads/update-to-virtualbox-ose-additions-6-1-18-killed-xorg.79451
my $pciid_vbox = { 
    'BEEF' => 'VirtualBox Graphics Adapter',    
};    


############################################################    
####################    PCI IDs section end
############################################################

############################################################    
####################    PCI vendor related consts+tables
############################################################

    my $pcivendor_apm = '1142';         # Alliance Semiconductor Corporation
    my $pcivendor_ark = 'EDD8';         # Ark Logic
    my $pcivendor_ast = '1A03';         # ASpeed Technologies
    my $pcivendor_chips = '102C';       # Chips & Technologies
    my $pcivendor_cirrus = '1013';      # Cirrus Logic
    my $pcivendor_cyrix = '1078';
    my $pcivendor_ns = '100B';
    my $pcivendor_amd = '1022';
    my $pcivendor_3dlabs = '3D3D';      # for xf86-video-glint
    my $pcivendor_ti = '104C';          # for xf86-video-glint
    my $pcivendor_matrox = '102B';
    my $pcivendor_neomagic = '10C8';
    my $pcivendor_numbernine = '105D';
    my $pcivendor_via = '1106';         # for xf86-video-openchrome
    my $pcivendor_rendition = '1163';
    my $pcivendor_s3 = '5333';
    my $pcivendor_siliconmotion = '126F';
    my $pcivendor_sis = '1039';
    my $pcivendor_xgi = '18CA';         # for some SIS cards
    my $pcivendor_3dfx = '121A';
    my $pcivendor_trident = '1023';
    my $pcivendor_vmware = '15AD';
    my $pcivendor_vbox = '80EE';        # InnoTek Systemberatung GmbH, was purchased by Oracle
    
    my $pcivendor_real3d = '003D';      # xf86-video-i740 supports Real3d cards too

    my $pcivendor_intel = '8086';
    my $pcivendor_atiamd = '1002';
    my $pcivendor_nvidia = '10DE';

# lookup array indices
my $othersind_vendorid = 0;
my $othersind_xf86drv = 1;
my $othersind_pciids = 2;

# TODO add Real3D!
# lookup hash: tag: vendor name => 
#       [ vendorID, xf86 driver package name, pci ID table reference ]
my $pciids_others_lists = {
    'Alliance Semiconductor Corporation' => [ $pcivendor_apm, 'xf86-video-apm', \$pciid_apm ],
    'Ark Logic' => [ $pcivendor_ark, 'xf86-video-ark', \$pciid_ark ],
    'ASpeed Technologies' => [ $pcivendor_ast, 'xf86-video-ast', \$pciid_ast ],
    'Chips & Technologies' => [ $pcivendor_chips, 'xf86-video-chips', \$pciid_chips ],
    'Cirrus Logic' => [ $pcivendor_cirrus, 'xf86-video-cirrus', \$pciid_cirrus ],
    'AMD Geode' => [ $pcivendor_amd, 'xf86-video-geode', \$pciid_geode_amd ],
    'NSC Geode' => [ $pcivendor_ns, 'xf86-video-geode', \$pciid_geode_ns ],
    '3Dlabs GLINT/Permedia' => [ $pcivendor_3dlabs, 'xf86-video-glint', \$pciid_glint_3dlabs ],
    '3Dlabs/TI GLINT/Permedia' => [ $pcivendor_ti, 'xf86-video-glint', \$pciid_glint_ti ],
    'Matrox' => [ $pcivendor_matrox, 'xf86-video-mga', \$pciid_xf86video_mga ],
    'Number Nine' => [ $pcivendor_numbernine, 'xf86-video-i128', \$pciid_xf86video_i128 ],
    'Neomagic' => [ $pcivendor_neomagic, 'xf86-video-neomagic', \$pciid_neomagic ],
    'VIA openchrome' => [ $pcivendor_via, 'xf86-video-openchrome', \$pciid_openchrome ],
    'Rendition' => [ $pcivendor_rendition, 'xf86-video-rendition', \$pciid_rendition ],
    'S3' => [ $pcivendor_s3, 'xf86-video-s3', \$pciid_s3 ],
    'S3 Savage' => [ $pcivendor_s3, 'xf86-video-savage', \$pciid_savage ],
    'Silicon Motion Inc.' => [ $pcivendor_siliconmotion, 'xf86-video-siliconmotion', \$pciid_siliconmotion ],
    'SiS/XGI' => [ $pcivendor_sis, 'xf86-video-sis', \$pciid_sis ],
    'XGI' => [ $pcivendor_xgi, 'xf86-video-sis', \$pciid_xgi ],
    '3dfx Interactive' => [ $pcivendor_3dfx, 'xf86-video-tdfx', \$pciid_tdfx ],
    'Trident' => [ $pcivendor_trident, 'xf86-video-trident', \$pciid_trident ],
    'VMware' => [ $pcivendor_vmware, 'xf86-video-vmware', \$pciid_vmware ],
    'VirtualBox' => [ $pcivendor_vbox, 'xf86-video-vmware', \$pciid_vbox ],
    # xf86-video-voodoo not included because these drivers for voodoo 1 and 2
    # seem to depend on the no-longer supported XAA accel method
    # https://www.freshports.org/x11-drivers/xf86-video-voodoo/
};    

sub getvendornamefromvendorid
{
    my $vi = shift;
    
    foreach( keys %{$pciids_others_lists} ) {
        my $aref = ${$pciids_others_lists}{$_};
        my $vendorid = $$aref[ $othersind_vendorid ];
        my $pciids = $$aref[ $othersind_pciids ];
        return($_) if ($vendorid eq $vi);
    }
    return undef;
}
    
############################################################    
####################    keys for autodetection/autoconfiguration
############################################################

    my $key_vendorid = 'vendorid';
    my $key_pciid = 'pciid';
    my $key_pcisubid = 'pcisubid';
    my $key_vendor = 'vendor';
    my $key_devicename = 'devicename';
    # if present in our tables with name, put this name here
    my $key_dbname = 'dbname';
    
    # human readable text description
    my $key_pcivendor = 'pcivendor';
    my $key_text_desc = 'text_desc';  
#     my $key_hwinfo = 'hwinfo';  
    my $key_warning = 'warning';  
    
    # driver package name
    my $key_pkglist = 'pkglist';
    my $key_udriver = 'udriver';
    my $key_kdriver = 'kdriver';
    # driver short name (for xorg.conf Driver entry
    my $key_udrivershort = 'udrivershort';
    # VAAPI/VDPAU capability/level
    my $key_vaapivdpau = 'vaapivdpau';

    # keys for the config to be generated
    my $key_bootloaderconf = 'bootloaderconf';
    my $key_etcrcconf = 'etcrcconf';
    my $key_kldlist = 'kldlist';
    my $key_userperm = 'userperm';
    my $key_runonce = 'runonce';
    my $key_xorgconffn = 'xorgconffn';
    my $key_xorgconf = 'xorgconf';
    my $key_xorg_poststart = 'xorg_poststart';
    my $key_busid = 'busid';
    
    my $key_donotuse = 'donotuse';
    my $key_usedrivernr = 'usedrivernr';
    
    # nvidia specific keys
    my $key_optimus = 'optimus';
    # AMD/Intel specific keys
    # core name/id
    my $key_gcore = 'gcore';
    
    
    
############################################################    
####################    autodetection/autoconfiguration helper functions
############################################################
    
sub getnvidiadrivercount
{
    my $href = shift;
    my $n = 1;
    for ( ;;++$n) {
        return ($n - 1) if (not exists ${$$href}{"$n"});
    }
}

# setupxorgconfdata (
#     vgaind,
#     drivercount     (or undef)
#       drivermaker   may be independent eg freedesktop
#     extraconf     for TearFree etc
sub setupxorgconfdata
{
    my $vgaind = shift;
    my $drivercount = shift;
    my $drivermaker = shift;
    my $extradeviceconf = shift;
    my $extradepth = shift;
    my $extradesc = shift;
    my $extraaccel = shift;
    
    if (defined $drivercount) {
        $drivercount = "$drivercount";
    }
  
# TODO note if bootvga

    my $xcfilename;
    if (defined $drivercount) {
        $xcfilename = ${$vga}{$vgaind}{$drivercount}{$key_xorgconffn} = "GPU-$vgaind-${$vga}{$vgaind}{$drivercount}{$key_udrivershort}.conf";
    } else {
        $xcfilename = ${$vga}{$vgaind}{$key_xorgconffn} = "GPU-$vgaind-${$vga}{$vgaind}{$key_udrivershort}.conf";
    }
    my $xcdriverpkg = (defined $drivercount)
            ? ${$vga}{$vgaind}{$drivercount}{$key_udriver}
            : ${$vga}{$vgaind}{$key_udriver};
    my $xcdrivershortname = (defined $drivercount)
            ? ${$vga}{$vgaind}{$drivercount}{$key_udrivershort}
            : ${$vga}{$vgaind}{$key_udrivershort};

    my $dbname = (defined $drivercount)
            ?   (( exists ${$vga}{$vgaind}{$drivercount}{$key_dbname})
                    ? ${$vga}{$vgaind}{$drivercount}{$key_dbname}
                    : ''
                )
            :   (( exists ${$vga}{$vgaind}{$key_dbname})
                    ? ${$vga}{$vgaind}{$key_dbname}
                    : ''
                );
    my $dbnamestr = ($dbname ne '')
            ?   "    # This cards' database name is '$dbname'\n"
            :   "    # This card is not in the SkunkOS video card database (yet).\n";
    my $comment_va = '';
    if (defined $drivercount) {
        if (defined ${$vga}{$vgaind}{$drivercount}{$key_vaapivdpau}) {
            my $vpl = ${$vga}{$vgaind}{$drivercount}{$key_vaapivdpau};
    
            $comment_va = "    # This graphics card supports VDPAU level '$vpl'.\n";
        } else {
            $comment_va = "    # This driver does not support VDPAU.\n";
        }
    }
    my $extrainfo = '';
    if ($vgaind eq $bootvga) {
        $extrainfo .= "    # Primary (boot) video device:\n";
    } else {
        if ( (defined $drivercount and 
                exists ${$vga}{$vgaind}{$drivercount}{$key_vesaddc}) or
                exists ${$vga}{$vgaind}{$key_vesaddc}) {
            $extrainfo .= "    # WARNING: Not primary (boot) video device.\n     # xrandr/EDID will not work correctly, as\n    # this driver uses VGA BIOS for EDID info.\n";
        }
    }
    my $furthersettings = '';
    
    if ( (defined $drivercount and 
            exists ${$vga}{$vgaind}{$drivercount}{$key_kldlist}) or
            exists ${$vga}{$vgaind}{$key_kldlist}) {
        my $kldlist = (defined $drivercount)
            ? \${$vga}{$vgaind}{$drivercount}{$key_kldlist}
            : \${$vga}{$vgaind}{$key_kldlist};
        $furthersettings .= "    # These kernel modules are required (loaded via $f_rc_conf):\n";
        foreach (sort keys %$$kldlist) {
            $furthersettings .= "    #    - ${$$kldlist}{$_}\n";
        }
    }
    if ( (defined $drivercount and 
            exists ${$vga}{$vgaind}{$drivercount}{$key_bootloaderconf}) or
            exists ${$vga}{$vgaind}{$key_bootloaderconf}) {
        my $bootloaderconf = (defined $drivercount)
            ? \${$vga}{$vgaind}{$drivercount}{$key_bootloaderconf}
            : \${$vga}{$vgaind}{$key_bootloaderconf};
        $furthersettings .= "    # These boot loader settings are required (loaded via /boot/loader.conf):\n";
        foreach (sort keys %$$bootloaderconf) {
            $furthersettings .= "    #    - ${$$bootloaderconf}{$_}\n";
        }
    }
    if ( (defined $drivercount and 
            exists ${$vga}{$vgaind}{$drivercount}{$key_userperm}) or
            exists ${$vga}{$vgaind}{$key_userperm}) {
        my $userperm = (defined $drivercount)
            ? \${$vga}{$vgaind}{$drivercount}{$key_userperm}
            : \${$vga}{$vgaind}{$key_userperm};
        $furthersettings .= "    # Additionally, user permissions must be set to enable usage:\n";
        foreach (sort keys %$$userperm) {
            $furthersettings .= "    #    - ${$$userperm}{$_}\n";
        }
    }
    if ( (defined $drivercount and 
            exists ${$vga}{$vgaind}{$drivercount}{$key_warning}) or
            exists ${$vga}{$vgaind}{$key_warning}) {
        my $warning = (defined $drivercount)
            ? ${$vga}{$vgaind}{$drivercount}{$key_warning}
            : ${$vga}{$vgaind}{$key_warning};
        my @warnlines = split( "\n", $warning);
        foreach (@warnlines) {
            $furthersettings .= "    # $_\n";
        }
    }

# check for conditions that should not happen
die "Guru meditation extrainfo" if (not defined $extrainfo);
die "Guru meditation key_devicename" if (not defined ${$vga}{$vgaind}{$key_devicename});
die "Guru meditation dbnamestr" if (not defined $dbnamestr);
die "Guru meditation extradesc" if (not defined $extradesc);
die "Guru meditation key_vendorid" if (not defined ${$vga}{$vgaind}{$key_vendorid});
die "Guru meditation key_pcivendor" if (not defined ${$vga}{$vgaind}{$key_pcivendor});
die "Guru meditation key_pciid" if (not defined ${$vga}{$vgaind}{$key_pciid});
die "Guru meditation drivermaker" if (not defined $drivermaker);
die "Guru meditation xcdriverpkg" if (not defined $xcdriverpkg);
die "Guru meditation furthersettings" if (not defined $furthersettings);
die "Guru meditation xcdrivershortname" if (not defined $xcdrivershortname);
die "Guru meditation key_vendor" if (not defined ${$vga}{$vgaind}{$key_vendor});
die "Guru meditation comment_va" if (not defined $comment_va);
die "Guru meditation extradeviceconf" if (not defined $extradeviceconf);
die "Guru meditation key_busid" if (not defined ${$vga}{$vgaind}{$key_busid});
die "Guru meditation extradepth $extradepth" if (not defined $extradepth);

    my $exaccel = '';
    if (defined $extraaccel) {
        $exaccel = "\n    Option     \"AccelMethod\" \"$extraaccel\"";
    }

    my $xconf =
# maybe add xorg.conf file/path name?
# qq|# Xorg conf file name: $xcfilename
qq|Section "Device"
$extrainfo    # Graphics card "${$vga}{$vgaind}{$key_devicename}"
$dbnamestr$extradesc    # PCI vendor: ${$vga}{$vgaind}{$key_vendorid}: ${$vga}{$vgaind}{$key_pcivendor}
    # PCI ID: ${$vga}{$vgaind}{$key_pciid}
    # Used with packaged $drivermaker driver "$xcdriverpkg"
$furthersettings    Identifier "GPU-$vgaind-$xcdrivershortname-output0"
    VendorName "${$vga}{$vgaind}{$key_vendor}"
    Driver     "$xcdrivershortname"$exaccel
$comment_va$extradeviceconf    BusID      "${$vga}{$vgaind}{$key_busid}"
    # Screen   "Screen-$vgaind-$xcdrivershortname-screen0"
EndSection

Section "Monitor"
    Identifier     "Monitor-$vgaind-$xcdrivershortname-monitor0"
    VendorName     "Unknown"
    ModelName      "Unknown"
    Option         "DPMS"
EndSection

Section "Screen"
    Identifier     "Screen-$vgaind-$xcdrivershortname-screen0"
    Device         "GPU-$vgaind-$xcdrivershortname-output0"
    Monitor        "Monitor-$vgaind-$xcdrivershortname-monitor0"
    DefaultDepth    $extradepth
    SubSection     "Display"
        Depth       $extradepth
    EndSubSection
EndSection
|;

    if (defined $drivercount) {
        ${$vga}{$vgaind}{$drivercount}{$key_xorgconf} = $xconf;
    } else {
        ${$vga}{$vgaind}{$key_xorgconf} = $xconf;
    }
}


# altdriver: if defined, use the altdriver ('devel', maybe in future 'legacy',
# too) if present/possible. 
# If no altdriver is available, return 1 (fatal) instead of 0 (success)
sub vgadetect
{
    my $altdriver = shift;
    
    $vga = {};
    my $shpwgroupmodvideo = "pw groupmod video -m $user1001";
    # check for drm-kmod versions that match the FreeBSD version 
    # currently running, and collect them in array
    my @usedrmvers = ();
    foreach (@drm_kmod_fbsdvers) {
        (my $ver_main) = /^(\d+)/;
        # check: can chip be used by this version?
        if (defined $ver_main and $ver_main eq $fbsd_major) {
            # store that index as possible version
            push @usedrmvers, $_;
        }
    }
    
    ##############################
    # graphics hardware detection loop

    (@vgas) = $pciconf =~ /(vgapci\d+@[^\n]+\n[^\n]+\n[^\n]+)/mg;
    my $numvgas = scalar @vgas;
    # headless?
    if ($numvgas == 0) {
        die "No graphics cards found!";
    }
    # NOTE on pciconf
    # somewhere between 12.2 and 13 the pciconf output format changed from
    # vgapci0@pci0:15:0:0:    class=0x030000 card=0x084a10de chip=0x0dd810de rev=0xa1 hdr=0x00
    # to
    #   vgapci0@pci0:1:0:0:    class=0x030000 rev=0xa1 hdr=0x00 vendor=0x10de device=0x1c02 subvendor=0x19da subdevice=0x2438
    # set flag determining pciconf style:
    my $newstyle = $vgas[0] =~ m/subvendor/s;
    # note: the regex [01-9a-fA-F] could be shortened to [01-9a-f]
    # but this complicates testing with faked pciconfs
    # TODO maybe put back to [01-9a-f] if it's worth the effort at all
    foreach (@vgas) {
        my ($vgaind) = /vgapci(\d+)/;
        ${$vga}{$vgaind} = {};
        (${$vga}{$vgaind}{$key_vendorid}) = ($newstyle)
                            ? /\svendor=0x([01-9a-fA-F]{4})/
                            : /\schip=0x[01-9a-fA-F]{4}([01-9a-fA-F]{4})/;
        ${$vga}{$vgaind}{$key_vendorid} = uc ${$vga}{$vgaind}{$key_vendorid};
        (my $pciid) = ($newstyle)
                            ? /\sdevice=0x([01-9a-fA-F]{4})/
                            : /\schip=0x([01-9a-fA-F]{4})/ ;
        ${$vga}{$vgaind}{$key_pciid} = $pciid = uc $pciid;
        (${$vga}{$vgaind}{$key_pcisubid}) = ($newstyle)
                            ? /\ssubdevice=0x([01-9a-fA-F]{4})/
                            : /\schip=0x[01-9a-fA-F]{4}([01-9a-fA-F]{4})/;
        ${$vga}{$vgaind}{$key_pcisubid} = uc ${$vga}{$vgaind}{$key_pcisubid};
        (${$vga}{$vgaind}{$key_vendor}) = /vendor\s+=\s'([^']+)/s;
        (${$vga}{$vgaind}{$key_devicename}) = /device\s+=\s'([^']+)/s;
        (${$vga}{$vgaind}{$key_busid}) = /vgapci$vgaind\@pci0:(\d+:\d+:\d+):/;

        #####################
        #
        #  select drivers and prepare user information
        #
        my $driver = '';
        
        
        ################################
        # Nvidia
        ################################
        
        if (${$vga}{$vgaind}{$key_vendorid} eq $pcivendor_nvidia) {
            my $drivercount = 0;
            (${$vga}{$vgaind}{$key_pcivendor}) = 'Nvidia';

            # is it an Optimus-capable chip?
            if (exists ${$pciid_nv_optimus}{$pciid}) {
                ${$vga}{$vgaind}{$key_optimus} = ${$pciid_nv_optimus}{$pciid};
            }
            # check list of packaged proprietary drivers
            foreach( @nvidia_drivers) {
                if (exists ${$pciid_nvidia}{$_}{$pciid}) {
                    # yes, packaged proprietary driver found
                    my $comment_va = '';
                    if ($driver eq 'nvidia-driver-304') {

                        # Bleech!
                        # driver 304 has been become obsolete/unusable
                        # due to API/ABI changes :(

                        # TODO ???? what to do? nouveau would be desirable!
                        # for now just skipping over, and 
                        # let Freedesktop nv driver take over
                        
                        # TODO clean up and remove 304 driver handling
                        # for now skip 304
                        next;
                    }
                    ++$drivercount;
                    $driver = $_;
                    
                    ${$vga}{$vgaind}{$drivercount}{$key_dbname} = ${$pciid_nvidia}{$_}{$pciid}[$nvind_name];
                    my $modeset = ($driver eq 'nvidia-driver-304' or $driver eq 'nvidia-driver-340')
                            ? 0
                            : 1;
                    ${$vga}{$vgaind}{$drivercount}{$key_udriver} = $driver;
                    ${$vga}{$vgaind}{$drivercount}{$key_udrivershort} = 'nvidia';
                    ${$vga}{$vgaind}{$drivercount}{$key_pkglist}{'1'} = $driver;
#                     ${$vga}{$vgaind}{$drivercount}{$key_pkglist}{'2'} = 'x11/nvidia-settings';
                    # Loading nvidia driver via rc.conf causes problems.
                    # Do not do that!
#                     ${$vga}{$vgaind}{$drivercount}{$key_kldlist}{'1'} = 'nvidia';                               
                    if ($modeset == 1) {
                        # does only work when in /boot/loader.conf
                        # if in /etc/rc.conf, suspend/resume tends to fail
                        ${$vga}{$vgaind}{$drivercount}{$key_bootloaderconf}{'1'} = 'nvidia-modeset_load="YES"';
                        # nvidia-modeset alone seems to suffice
#                         ${$vga}{$vgaind}{$drivercount}{$key_bootloaderconf}{'2'} = 'nvidia_load="YES"';
                        ${$vga}{$vgaind}{$drivercount}{$key_runonce}{'1'} = '[0 1]kldload -nv nvidia-modeset';
                    } else {
                        ${$vga}{$vgaind}{$drivercount}{$key_bootloaderconf}{'1'} = 'nvidia_load="YES"';
                        ${$vga}{$vgaind}{$drivercount}{$key_runonce}{'1'} = '[0 1]kldload -nv nvidia';
                    }
                    if (${$pciid_nvidia}{$_}{$pciid}[$nvind_vdpau] ne '-') {
                        ${$vga}{$vgaind}{$drivercount}{$key_vaapivdpau} = ${$pciid_nvidia}{$_}{$pciid}[$nvind_vdpau];
                    }
                    
                    setupxorgconfdata( $vgaind, $drivercount, 'Nvidia', '', '24', '', '');
                }
            }
                
            # Check whether freedesktop driver can be used
            if (exists ${$pciid_nv}{$pciid}) {
                ++$drivercount;
                # TODO check actual settings
                ${$vga}{$vgaind}{$drivercount}{$key_udriver} = 'xf86-video-nv';
                ${$vga}{$vgaind}{$drivercount}{$key_udrivershort} = 'nv';
                ${$vga}{$vgaind}{$drivercount}{$key_pkglist}{'1'} = 'x11-drivers/xf86-video-nv';
                ${$vga}{$vgaind}{$drivercount}{$key_dbname} = ${$pciid_nv}{$pciid};
                ${$vga}{$vgaind}{$drivercount}{$key_vesaddc} = 'true';  
                ${$vga}{$vgaind}{$drivercount}{$key_bootloaderconf}{'1'} = 'vesa_load="YES"';
                ${$vga}{$vgaind}{$drivercount}{$key_runonce}{'1'} = '[0 1]kldload vesa';
                setupxorgconfdata( $vgaind, $drivercount, 'Freedesktop', '', '24', '', undef);
            }
            if ($drivercount == 0) {
                # neither proprietary packaged nor xf86-video-nv drivers match.
                my $nvlegacy;
                # As last resort check whether an upstream driver exists and 
                # warn the user of consequences
                # as this does not work with contemporary xorg
                # due to ABI changes
                
                foreach( @nv_legacydrivers) {
                    next if (not exists ${$pciid_nvidialegacy}{$_}{$pciid});
                    $nvlegacy = $_;
                    ${$vga}{$vgaind}{$key_warning} .= 
                        "NOTE!\nThis Nvidia graphics card can only be used with the non-packaged legacy driver version $nvlegacy.\nIt is not recommended to use drivers that are not registered with the package system.\nBut this would be the last resort.\nHowever, because we do not want you to get potential problems, we rather advise to get a supported card.\nFor this reason, this installer will *not* support your card.\nYou'll have to do this manually, by downloading driver version $nvlegacy from the Nvidia driver website, building and configuring it yourself. Sorry.\n\n";
                    last;
                }

                if (not defined $nvlegacy) {
                    ++$drivercount;

                    ${$vga}{$vgaind}{$drivercount}{$key_warning} .= 
                        "NOTE!\nThis Nvidia graphics card is not yet in the installers' hardware database.\nSo we assume that it is a new card and the newest nvidia driver can be used.\n" .
                        "VDPAU can be quite safely assumed to work on this card.\n\n";
                    ${$vga}{$vgaind}{$drivercount}{$key_dbname} = 'Not in database yet';
                    ${$vga}{$vgaind}{$drivercount}{$key_udriver} = 'nvidia-driver';
                    ${$vga}{$vgaind}{$drivercount}{$key_udrivershort} = 'nvidia';
                    ${$vga}{$vgaind}{$drivercount}{$key_pkglist}{'1'} = 'nvidia-driver';
#                     ${$vga}{$vgaind}{$drivercount}{$key_pkglist}{'2'} = 'x11/nvidia-settings';
                    ${$vga}{$vgaind}{$drivercount}{$key_bootloaderconf}{'1'} = 'nvidia-modeset_load="YES"';
#                     ${$vga}{$vgaind}{$drivercount}{$key_kldlist}{'1'} = 'nvidia';                               
#                     ${$vga}{$vgaind}{$drivercount}{$key_kldlist}{'2'} = '/boot/modules/nvidia-modeset';                               
                    ${$vga}{$vgaind}{$drivercount}{$key_runonce}{'1'} = '[0 1]kldload -nv nvidia-modeset';
                    ${$vga}{$vgaind}{$drivercount}{$key_vaapivdpau} = '+';
                    
                    my $extradesc = q|    # This Nvidia graphics card is new and not yet in the SkunkOS list.
|;
                    setupxorgconfdata( $vgaind, $drivercount, 'Nvidia', '', '24', $extradesc, undef);
                }
            }
            
            
        ################################
        # Intel
        ################################
        
        # TODO add Real3D handling for i740
        
        } elsif (${$vga}{$vgaind}{$key_vendorid} eq $pcivendor_intel) {
            (${$vga}{$vgaind}{$key_pcivendor}) = 'Intel';
            my $modern = 0;
            my $usekms = 0;
            my $chosenvers = '';
            my $extradeviceconf = '';

            if (exists ${$intelpciid_i740}{$pciid}) {
                ${$vga}{$vgaind}{$key_dbname} = ${$intelpciid_i740}{$pciid};
                ${$vga}{$vgaind}{$key_pkglist} = 'x11-drivers/xf86-video-i740';
                ${$vga}{$vgaind}{$key_udriver} = 'xf86-video-i740';
                ${$vga}{$vgaind}{$key_udrivershort} = 'i740';
                $driver = 'i740';
            } elsif (exists ${$intelpciid_i752}{$pciid}) {
                ${$vga}{$vgaind}{$key_dbname} = ${$intelpciid_i752}{$pciid};
                ${$vga}{$vgaind}{$key_warning} .= "You really have an i752 graphics card?!?\nThis item is incredibly rare! Contact SkunkOS and donate this card, because this is the only Intel graphics card which is not yet supported by X!\n";
            } else {
                # "modern" graphics chip
                $modern = 1;
                # get the chips' data and take them into simple variables
                # for easy handling
                $usekms = 1;
                if ( (scalar @usedrmvers) == 0 ) {
                    ${$vga}{$vgaind}{$key_warning} .= 
                            "No supported drm-kmod driver for your FreeBSD version found!\n" .
                            "Using normal Intel driver, without KMS\n"; 
                    $usekms = 0;
                } 

                ###########
                # now choose a drm-kmod version
                my $props_aref;
                my $altfound = 0;

                if ($usekms == 1 and exists ${$pciids_intel}{$pciid}) {
                    $props_aref = ${$pciids_intel}{$pciid};
                    ${$vga}{$vgaind}{$key_dbname} = 
                            "$$props_aref[$indintel_codedescription] (GPU Gen. $$props_aref[$indintel_gengpu])";
                
                    if ( (scalar @usedrmvers) == 1 ) {
                        my $chkver = pop @usedrmvers;
                        my $compatfull = $$props_aref[${$fbsd__drmkmod_versions_index}{$chkver}];
                        # cut off the question mark for now
                        (my $compat) = $compatfull =~ /^([^\?]+)/;
                        if ($compat ne 'Yes' and $compat ne 'No') {
                            ${$vga}{$vgaind}{$key_warning} .= 
                                    "Using drm-kmod driver *might* work, but is untested!\n" .
                                    "(You may want to try enabling it manually later.)\n" .
                                    "Thus using normal Intel driver, without KMS.\n"; 
                            $usekms = 1;
                        } elsif ($compat eq 'No') {
                            $usekms = 0;
                        } elsif ($compat =~ /^Yes/) {
                            $chosenvers = $chkver;
                        }
                    } else {
                        foreach (@usedrmvers) {
                            my $compat = $$props_aref[${$fbsd__drmkmod_versions_index}{$_}];
                            (my $alt) = /^\d+-(.*)$/;
                            # take the one without -devel or whatever
                            if (not defined $altdriver and not defined $alt and $compat eq 'Yes') {
                                $chosenvers = $_;
                                last;
                            }
                            if (defined $altdriver and defined $alt and 
                                    $alt eq $altdriver and $compat eq 'Yes') {
                                $chosenvers = $_;
                                $altfound = 1;
                                last;
                            }
                        }
                        if (defined $altdriver and $altfound == 0) {
                            return 1;
                        }
                    }
                } elsif ($usekms == 1) {  # and card not in db
                    # yet unknown chip
                    ${$vga}{$vgaind}{$key_dbname} = 'unknown';
                    if (defined $altdriver and $altfound == 0) {
                        # we are at -devel already, so return directly
                        return 1;
                    }
                    # get -devel driver if possible
                    foreach (@usedrmvers) {
                        my $compat = $$props_aref[${$fbsd__drmkmod_versions_index}{$_}];
                        if ($compat eq 'Yes') {
                            $chosenvers = $_;
                            # prefer the one with -devel or whatever, but not -legacy
                            # just in case a new -legacy fork appears
                            last if (/^\d+.+$/ and not (/^\d+-legacy$/));
                        }
                    }
                    # warn
                    ${$vga}{$vgaind}{$key_warning} .= "WARNING:\nUsing the -devel or the like driver, supposing the card is new and maybe already supported\n";
                }
            }

            if ($usekms == 1) {
                ${$vga}{$vgaind}{$key_pkglist}{'1'} = ${$fbsdvers_drmkmod_drivername}{$chosenvers};
                my $kdriver = 'i915kms';
                ${$vga}{$vgaind}{$key_kdriver} = $kdriver;
                # TODO check this out: when loading i915kms from rc.conf; does this make xrandr etc 
                # not work correctly? Display output not the displays' native size!
                # There is much incorrect info in wikis and forums, ignore these!
                # note: see also sub catchkmssurprise() !
                ${$vga}{$vgaind}{$key_kldlist}{'1'} = $kdriver;
#                 ${$vga}{$vgaind}{$key_bootloaderconf}{'1'} = "$kdriver\_load=YES";
                ${$vga}{$vgaind}{$key_runonce}{'1'} = "[0 1]kldload -nv $kdriver";
                if (defined ${$fbsdvers_drmkmod_modulename}{$chosenvers}) {
                    ${$vga}{$vgaind}{$key_kldlist}{'2'} = ${$fbsdvers_drmkmod_modulename}{$chosenvers};
                    ${$vga}{$vgaind}{$key_runonce}{'2'} = "[0 1]kldload -nv ${$fbsdvers_drmkmod_modulename}{$chosenvers}";
                }
                ${$vga}{$vgaind}{$key_userperm}{'1'} = $shpwgroupmodvideo;
            }
            if ($modern == 1) {   # for the old chips we've done this already 
                ${$vga}{$vgaind}{$key_pkglist}{'2'} = 'x11-drivers/xf86-video-intel';
                ${$vga}{$vgaind}{$key_udriver} = 'xf86-video-intel';
                ${$vga}{$vgaind}{$key_udrivershort} = 'intel';
                $extradeviceconf = "    Option     \"TearFree\" \"true\"\n";
                ${$vga}{$vgaind}{$key_xorg_poststart}{'1'} = "xrandr --output GPU$vgaind-${$vga}{$vgaind}{$key_udrivershort} --set TearFree on";
            }
            
            setupxorgconfdata( $vgaind, undef, 'Intel/Freedesktop', $extradeviceconf, '24', '', undef);
            
            
        ################################
        # ATI/AMD
        ################################
        
        } elsif (${$vga}{$vgaind}{$key_vendorid} eq $pcivendor_atiamd) {
            (${$vga}{$vgaind}{$key_pcivendor}) = 'AMD/ATI';

            my $pciid = uc ${$vga}{$vgaind}{$key_pciid};
            ${$vga}{$vgaind}{$key_text_desc} .= "    Type: '${$vga}{$vgaind}{$key_devicename}'\n    Chip ID: '$pciid'\n";

            my $kdriver = '';   # kernel
            my $udriver = '';   # userspace
            my $core;
            my $indb = 0;       # is in pci id database?
            my $blc = 1;
            # pre-radeonkms cards need vesa for suspend/resume
            my $vesaload = 0;
            my $extradeviceconf = '';

            foreach( @amdatiids) {
                if ($pciid eq @$$_[$ind_cardid]) {
                    $core = @$$_[$ind_core];
                    ${$vga}{$vgaind}{$key_dbname} = @$$_[$ind_cardname];
                    $kdriver = ${$core_kdriv_trans}{$core};
                    $udriver = ${$core_udriv_trans}{$core};
                    $indb = 1;
                    last;
                }
            }
            if (not $indb) {
                $udriver = 'amdgpu';
                $kdriver = 'amdgpu';
                $core = 'unknown';
                ${$vga}{$vgaind}{$key_dbname} = 'unknown, modern';
                # TODO check if still necessary:
#                 ${$vga}{$vgaind}{$key_bootloaderconf}{"$blc"} = 'hw.amdgpu.exp_hw_support="1"';
#                 ++$blc;
                ${$vga}{$vgaind}{$key_warning} .= "WARNING:\nChip not yet known!\nJust supposing it is already supported by amdgpu\nMight not work. You have been warned.\n\n";
            } else {
                # vesaddc is used by freedesktop drivers
                # MACH64 has i2c but not yet found ddc routine
                my $vesaddc = 0;
                if ($core eq 'MACH64') {
                    $vesaddc = 1;       # TODO check MACH64 sources
                    $extradeviceconf .= "    Option     \"probe_sparse\"\n";
                    $vesaload = 1;
                } elsif ($core eq 'R128') {
                    $vesaddc = 1;
                    $vesaload = 1;
                }
                if ($vesaddc) {
                    ${$vga}{$vgaind}{$key_vesaddc} = 'true';
                }
            }
            ${$vga}{$vgaind}{$key_gcore} = $core;
            
            ${$vga}{$vgaind}{$key_udriver} = $udriver;
            ${$vga}{$vgaind}{$key_udrivershort} = $udriver;
            ${$vga}{$vgaind}{$key_pkglist}{'1'} = "x11-drivers/xf86-video-$udriver";
            if ($udriver eq 'ati' or $udriver eq 'amdgpu') {
                $extradeviceconf = "    Option     \"TearFree\" \"true\"\n";
                ${$vga}{$vgaind}{$key_xorg_poststart}{'1'} = "xrandr --output GPU$vgaind-$udriver --set TearFree on";
            }

            if ($vesaload) {
                ${$vga}{$vgaind}{$key_bootloaderconf}{"$blc"} = 'vesa_load="YES"';
                ++$blc;
                ${$vga}{$vgaind}{$key_runonce}{'1'} = '[0 1]kldload vesa';

                # note: no card that needs vesa load has kms driver!
            } elsif ($kdriver ne '') {
                ${$vga}{$vgaind}{$key_kdriver} = $kdriver;
                
                # TODO refine
                my $altfound = 0;
                foreach (@usedrmvers) {
                    (my $alt) = /^\d+-(.*)$/;
                    if (not defined $altdriver and not defined $alt) {
                        ${$vga}{$vgaind}{$key_pkglist}{'3'} = 'graphics/drm-kmod';
                        last;
                    }
                    if (defined $altdriver and defined $alt and 
                            $alt eq $altdriver) {
                        $altfound = 1;
                        ${$vga}{$vgaind}{$key_pkglist}{'3'} = "graphics/drm-$altdriver-kmod";
                        last;
                    }
                }
                
                # should never catch if -devel-kmod exists for the particular OS
                # TODO better handling - or removal of altdriver feature 
                # if -devel-kmod is a thing of the past
                die "Guru meditation 7128" if (defined $altdriver and $altfound == 0);
            
                ${$vga}{$vgaind}{$key_pkglist}{'2'} = 'graphics/gpu-firmware-kmod';
                ${$vga}{$vgaind}{$key_kldlist}{'1'} = "$kdriver";
                ${$vga}{$vgaind}{$key_runonce}{'1'} = "[0 1]kldload -nv $kdriver";
#                 ${$vga}{$vgaind}{$key_runonce}{'1'} = "[0 1]kldload -nv /boot/modules/$kdriver.ko";

                # TODO find APU PCIIDs and include integrated graphics flag 
                # include <amdtemp> kernel module for APUs!
                # turn on experimental hardware support if card isn't known to db
                ${$vga}{$vgaind}{$key_userperm}{'1'} = $shpwgroupmodvideo;
                if ($system_isuefi) {
#                     ${$vga}{$vgaind}{$key_bootloaderconf}{"$blc"} = 'hw.syscons.disable="1"';
#                     $blc++;
                }
                # note: in case of GCN1 GPUs ($core eq 'GCN1'), these can be used by two drivers
                # no idea which other is better TODO find out
                # radeonkms.ko+ati or amdgpu.ko+amdgpu
                # TODO investigate and use the better driver combo!
            }
            setupxorgconfdata( $vgaind, undef, 'AMD/ATI', $extradeviceconf, '24', '', undef);
        
        
        ################################
        # virtual "graphics cards"
        ################################
        
        # special handling for particular "non-chipsets"
        } elsif (${$vga}{$vgaind}{$key_vendorid} eq $pcivendor_vmware or
                ${$vga}{$vgaind}{$key_vendorid} eq $pcivendor_vbox) {
                
            if (${$vga}{$vgaind}{$key_vendorid} eq $pcivendor_vmware) {
                (${$vga}{$vgaind}{$key_dbname}) = ${$pciid_vmware}{$pciid};
            } else {
                (${$vga}{$vgaind}{$key_dbname}) = ${$pciid_vbox}{$pciid};
            }
            (${$vga}{$vgaind}{$key_pcivendor}) = 
                    getvendornamefromvendorid(${$vga}{$vgaind}{$key_vendorid});
            my $xf86drv = 'xf86-video-vmware';
            
            ${$vga}{$vgaind}{$key_pkglist}{'1'} = "x11-drivers/$xf86drv";
            ${$vga}{$vgaind}{$key_udriver} = $xf86drv;
            (my $drvshort) = $xf86drv =~ /([^-]+)$/;
            ${$vga}{$vgaind}{$key_udrivershort} = $drvshort;

            # virtualbox specific
            # as virtualbox can fake vmware vga, the pciid alone
            # is no reliable indication whether it is 
            # actually vmware or virtualbox
            if ($isvbox) {
                # i386 or amd64?
                if ($system_arch eq 'amd64') {
                    ${$vga}{$vgaind}{$key_pkglist}{'2'} = 'emulators/virtualbox-ose-additions';
                } else {
                    ${$vga}{$vgaind}{$key_pkglist}{'2'} = 'emulators/virtualbox-ose-additions-legacy';
                }
                ${$vga}{$vgaind}{$key_etcrcconf}{'1'} = 'vboxguest_enable="YES"';
                ${$vga}{$vgaind}{$key_etcrcconf}{'2'} = 'vboxservice_enable="YES"';
                ${$vga}{$vgaind}{$key_runonce}{'1'} = '[0 1]service vboxguest start';
                ${$vga}{$vgaind}{$key_runonce}{'2'} = '[0 1]service vboxservice start';
                ${$vga}{$vgaind}{$key_userperm}{'1'} = "pw groupmod wheel -m $user1001";
            }
            setupxorgconfdata( $vgaind, undef, 'Freedesktop', '', 24, '', undef);
        
        
        ################################
        # other cards
        ################################

        } else {
            foreach( keys %{$pciids_others_lists} ) {
                my $aref = ${$pciids_others_lists}{$_};
                my $vendorid = $$aref[ $othersind_vendorid ];
                my $pciids = $$aref[ $othersind_pciids ];
                if (exists ${$$pciids}{$pciid}) {
                    my $xf86drv = $$aref[ $othersind_xf86drv ];
                    (${$vga}{$vgaind}{$key_dbname}) = ${$$pciids}{$pciid};
                    (${$vga}{$vgaind}{$key_pcivendor}) = $_;
                    if (exists ${$$pciids}{$key_vesaddc}) {
                        ${$vga}{$vgaind}{$key_vesaddc} = ${$$pciids}{$key_vesaddc};
                    }
                    (my $drvshort) = $xf86drv =~ /([^-]+)$/;
                    ${$vga}{$vgaind}{$key_pkglist}{'1'} = "x11-drivers/$xf86drv";
                    ${$vga}{$vgaind}{$key_udriver} = $xf86drv;
                    ${$vga}{$vgaind}{$key_udrivershort} = $drvshort;
                    
                    # special handling for particular old chipsets
                    # which cannot handle default 24bpp 
                    my $defaultdepth = (exists ${$$pciids}{$key_bpp})
                            ? ${$$pciids}{$key_bpp}
                            : '24';
                    my $exaccel;
                    if (exists ${$$pciids}{$key_accel}) {
                        $exaccel = ${$$pciids}{$key_accel};
                    }
                    if (exists ${$$pciids}{$key_vesako}) {
                        ${$vga}{$vgaind}{$key_bootloaderconf}{'1'} = 'vesa_load="YES"';
                        ${$vga}{$vgaind}{$key_runonce}{'1'} = '[0 1]kldload vesa';
                    }
                    setupxorgconfdata( $vgaind, undef, 'Freedesktop', '', $defaultdepth, '', $exaccel);
                    
                    last;
                }
            }
        }
        
    }
}


sub sharesdriverwithcard
{
    my $drv = shift;
    my $vgaindex = shift;
#     my $exceptnv = shift;


    my $drvx = getnvidiadrivercount(\${$vga}{$vgaindex});
    my $n = 1;
    for ( ; $n <= $drvx; ++$n) {
        # loop through to see if this card matches with $drv
#         if (${$vga}{$vgaindex}{"$drvn"}{$key_udrivershort} eq 'nv') {
#             $otherhavenvtoo += 1;
#             next;
#         }
    # TODO clean up 304 handling
    # thinking wrong drivercount++ in nvidia vgadetect with 304 caused this
    # the next; should have fixed that
    die "Guru meditation 7225 '$n'" if (not exists ${$vga}{$vgaindex}{"$n"}{$key_udriver});
    die "Guru meditation 7226 '$n'" if (not defined ${$vga}{$vgaindex}{"$n"}{$key_udriver});
  
        my $drvv = ${$vga}{$vgaindex}{"$n"}{$key_udriver};

        if ($drv eq $drvv) {
            # match
            return 1;
        }
    }
    # no match
    return 0;
}

# for all cards set up that driver
# forallnvidiacardssetdriver( @nvidiacards, $drv);
sub forallnvidiacardssetdriver
{
    my $nvidiacards = shift;
    my $drv = shift;

    foreach (@$nvidiacards) {
        my $n = 1;
        while (exists ${$vga}{$_}{"$n"}) {
            if (${$vga}{$_}{"$n"}{$key_udriver} eq $drv) {
                ${$vga}{$_}{$key_usedrivernr} = "$n";
                last;
            }
            ++$n;
        }
    }
}

sub setnvforcard
{
    my $nvidiacard = shift;

    my $n = 1;
    while (exists ${$vga}{$nvidiacard}{"$n"}) {
        if (${$vga}{$nvidiacard}{"$n"}{$key_udrivershort} eq 'nv') {
            ${$vga}{$nvidiacard}{$key_usedrivernr} = "$n";
            last;
        }
    }
}

sub listnvidiavgas
{
    my $s = '';
    my $notenv = 0;
    foreach (@vgas) {
        my ($vgaind) = /vgapci(\d+)/;
        if (${$vga}{$vgaind}{$key_vendorid} eq $pcivendor_nvidia) {
            $s .= "  vgapci$vgaind: ${$vga}{$vgaind}{$key_devicename}";
            if ($vgaind eq $bootvga) {
                $s .= ' (Primary/Boot adapter)';
            }
            $s .= "\n";
            for (my $i = 1; ; ++$i) {
                if (exists ${$vga}{$vgaind}{"$i"}) {
                    my $ud = ${$vga}{$vgaind}{$i}{$key_udriver};
                    $s .= "    $ud\n";
                    if ($ud eq 'xf86-video-nv') {
                        $notenv = 1;
                    }
                } else {
                    last;
                }
            }
        }
    }
    if ($notenv) {
        $s .= "NOTE: The freedesktop 'xf86-video-nv' driver can only support one card, which must be the boot graphics card. In such a configuration, to avoid conflict, the other installed Nvidia cards must *not* be supported by the freedesktop driver.\n";
    }
    return $s;
}           
            

# returns:
# 1 (fatal) or 0 (success)
sub vgaconfigure
{
    my $fatal = 0;
    
    # now find out whether there are blockers,
    # and exclude these cards from config:
    # -all cards which use vesaddc and are not boot device
    # more than one AMD/ATI card with conflicting drivers
    if (scalar keys %$vga == 1) {
#         $msg .= "Only one graphics card. That's easy!\n";
    } else {
        # weed out all cards/drivers that cannot be used because 
        # they are not primary and depend on VESADDC
        my $cards_nvidia = 0;
        
        my %cards_types = ();
        foreach (@vgas) {
            my ($vgaind) = /vgapci(\d+)/;
            if (${$vga}{$vgaind}{$key_vendorid} ne $pcivendor_nvidia) {
                my $typ = ${$vga}{$vgaind}{$key_udriver};
                if (exists $cards_types{$typ}) {
                    $msg_donotuse .= "ERROR: More than one card of type '$typ'.\nThis cannot work. Remove one of these and retry.\n";
                    $fatal = 1;
                    last;
                } elsif (($typ eq 'ati' and exists $cards_types{'amdgpu'}) or
                            ($typ eq 'amdgpu' and exists $cards_types{'ati'})) {
                    $msg_donotuse .= "ERROR: Cards of type 'ati' and 'amdgpu' are mutually exclusive. Remove one of these and retry.\n";
                    $fatal = 1;
                    last;
                }
                $cards_types{$typ} = 1;
            }
        }
    }

    my $cards_nvidia = 0;
    # special checks for cards that are not bootvga
    if ($fatal == 0) {
        foreach (@vgas) {
            my ($vgaind) = /vgapci(\d+)/;
            my $isnv = ${$vga}{$vgaind}{$key_vendorid} eq $pcivendor_nvidia;
            if ($isnv) {
                $cards_nvidia++;
                next;
            }
            if ($vgaind ne $bootvga) {
                if (exists ${$vga}{$vgaind}{$key_vesaddc}) {
                    $msg_donotuse .= "vgapci$vgaind card '${$vga}{$vgaind}{$key_devicename}' from ${$vga}{$vgaind}{$key_pcivendor} can only be used if it is the primary boot video card.\nThe reason is that its driver '${$vga}{$vgaind}{$key_udrivershort}' needs VESADDC, and the latter only works on the primary card.\nPlease check whether there is a BIOS Setup option to make this card primary. Otherwise you cannot use this card.\n";
                    # actually not strictly fatal, 
                    # if no driver is being installed
                    # TODO what is best?
                    # abort? or only message and install no driver?
                    $fatal = 1;
                }
            }
        }
    }
    
    # now check for workable nvidia config
    # and for multiple cards, choose best drivers for different 
    # config scenarios a) and b) 
    
    if ($fatal == 0 and $cards_nvidia == 1) {
        # single nvidia card: simply use driver #1, 
        # most modern, most functional
        my $nvidiacard;
        foreach (@vgas) {
            my ($vgaind) = /vgapci(\d+)/;
            if (${$vga}{$vgaind}{$key_vendorid} eq $pcivendor_nvidia) {
                $nvidiacard = $vgaind;
                last;
            }
        }
        # in case the nvidia card supports only nv driver, it must be primary
        if (exists ${$vga}{$nvidiacard}{'1'}) {
            if (${$vga}{$nvidiacard}{'1'}{$key_udrivershort} eq 'nv') {
                if ($nvidiacard ne $bootvga) {
                    $msg_donotuse .= "Cannot install because the Nvidia card supports only nv driver and thus can only be used as primary vga, but not as an additional one.\n";
                    $fatal = 1;
                }
            }
            if (not $fatal) {
                ${$vga}{$nvidiacard}{$key_usedrivernr} = '1';
            }
        }
    }

    my $nvidiacase;
    if ($fatal == 0 and $cards_nvidia > 1) {

        # if we have multiple nvidia cards:
        # there is the condition that:
        #   a)  if the first (boot) card is supported by xf86-video-nv 
        #       and all of the other cards are supported by one of the 
        #       proprietary drivers, but *not* by xf86-video-nv
        #   b)  all the nvidia cards can be used by the same proprietary 
        #       driver
        #   then we have a workable configuration.

        # multiple nvidia cards
        # first check out case b)
        # get indexes of all nvidia cards
        my @nvidiacards = ();
        foreach (@vgas) {
            my ($vgaind) = /vgapci(\d+)/;
            if (${$vga}{$vgaind}{$key_vendorid} eq $pcivendor_nvidia) {
                push @nvidiacards, $vgaind;
            }
        }
        my $drivercount = getnvidiadrivercount( \${$vga}{$nvidiacards[0]});
        my $n = 1;
        my $drvmatchcardx;
        my $drv;

        for ( ; $n <= $drivercount; ++$n) {
            # skip freedesktop nv driver, as it doesn't work with 
            # multiple cards
            next if (${$vga}{$nvidiacards[0]}{"$n"}{$key_udrivershort} eq 'nv');
            $drv = ${$vga}{$nvidiacards[0]}{"$n"}{$key_udriver};
            my $cardn = 1;
            $drvmatchcardx = 1;
            for ( ; $cardn < $cards_nvidia; ++$cardn) {
                my $cardx = $nvidiacards[$cardn];
                # skip first card
                if (not sharesdriverwithcard( $drv, "$cardx")) {
                    $drvmatchcardx = 0;
                    last;
                }
            }
            last if ($drvmatchcardx == 1)
        }
        
        if ($drvmatchcardx == 1) {
            $nvidiacase = 'b';
            # for all cards set up that driver
            forallnvidiacardssetdriver( \@nvidiacards, $drv);
        }
    }

    if ($fatal == 0 and $cards_nvidia > 1 and not defined $nvidiacase) {
    
        # check case a) now
        my $primhasnv = sharesdriverwithcard( 'xf86-video-nv', $bootvga);
        my @nonprimarynvidiacards = ();
        if ($primhasnv) {
            # collect all non-primary cards
            foreach (@vgas) {
                my ($vgaind) = /vgapci(\d+)/;
                if (${$vga}{$vgaind}{$key_vendorid} eq $pcivendor_nvidia and $vgaind ne $bootvga) {
                    # must not share nv
                    if (sharesdriverwithcard( 'xf86-video-nv', $vgaind)) {
                        $msg_donotuse .= "Cannot install because more than the primary Nvidia card share nv driver and thus can only be used as primary vga, but not as an additional one.\n";
                        $msg_donotuse .= listnvidiavgas();
                        $fatal = 1;
                        last;
                    } else {
                        push @nonprimarynvidiacards, $vgaind;
                    }
                }
            }
        } else {
            # primary not nv: cannot be case a)
            $msg_donotuse .= "Cannot install because there is no driver that concurrently supports all the present Nvidia cards.\nPlease look at the following list to see which card(s) to remove or change with another model.\n";
            $msg_donotuse .= listnvidiavgas();
            $fatal = 1;
        }

        if ($fatal == 0 and $primhasnv and scalar @nonprimarynvidiacards == 1) {
            # good! there is only a second nvidia card, just take
            # its optimum driver
            setnvforcard( $bootvga);
            my $thecard = pop @nonprimarynvidiacards;
            ${$vga}{$thecard}{$key_usedrivernr} = '1';
            $nvidiacase = 'a';
        }
        if ($fatal == 0 and $primhasnv and scalar @nonprimarynvidiacards > 1) {
            # look whether the 2nd and more cards share a
            # proprietary driver that does not overlap with nv or
            # other drivers of the primary card
            my $drivercount = getnvidiadrivercount( \${$vga}{$nonprimarynvidiacards[0]});
            my $n = 1;

            for ( ; $drivercount; ++$n) {
                my $drv = ${$vga}{$nonprimarynvidiacards[0]}{"$n"}{$key_udriver};
                
                # if this driver is shared with bootvga's drivers, 
                # it cannot be used
                if (sharesdriverwithcard( $drv, $bootvga)) {
                    next;
                }

                my $cardn = 1;
                my $nextdriver = 0;
                my $drvnomatch = 0;
                for ( ; $cardn < scalar @nonprimarynvidiacards; ++$cardn) {
                    if (not sharesdriverwithcard( $drv, "$nonprimarynvidiacards[$cardn]")) {
                        $drvnomatch = 1;
                        last;
                    }
                }
                if ($drvnomatch == 0) {
                    # finished, found a good driver
                    $nvidiacase = 'a';
                    # for all cards set up that driver
                    forallnvidiacardssetdriver( \@nonprimarynvidiacards, $drv);
                    # set nv for primary
                    setnvforcard( $bootvga);
                    last;
                }
            }
            if (not defined $nvidiacase) {
                $msg_donotuse .= "Cannot install because the cards other than the nv-driven primary Nvidia card do not share a common proprietary nvidia driver.\n";
                $msg_donotuse .= listnvidiavgas();
                $fatal = 1;
            }
        }
    }
    return $fatal;
}

  
sub addascendingkeys
{
    my $ks = shift;
    my $href = shift;
    
    foreach (sort keys %$$href) {
        my $val = ${$$href}{$_};
        next if (isvalinarray( $ks, $val));
        push @$$ks, $val;
    }
}

sub collectconfig
{
    my $ks = shift;
    my $key = shift;
    my $numvgas = scalar keys %$vga;
    my $hashr;
    
    for (my $vgaind = 0; $vgaind < $numvgas; ++$vgaind) {
        $hashr = undef;
        if ((${$vga}{$vgaind}{$key_vendorid} eq $pcivendor_nvidia)) {
            if (exists ${$vga}{$vgaind}{${$vga}{$vgaind}{$key_usedrivernr}}{$key}) {
                $hashr = \${$vga}{$vgaind}{${$vga}{$vgaind}{$key_usedrivernr}}{$key};
            } else {
                next;
            }
        } else {
            if (exists ${$vga}{$vgaind}{$key}) {
                $hashr = \${$vga}{$vgaind}{$key};
            }
        }
        addascendingkeys( $ks, $hashr) if (defined $hashr);
    }
}

sub collect_xorgconf
{
    my $xorgconf_serverlayoutsingle = shift;
    my $xorgconf_serverlayoutmulti = shift;
    my $xorgconf_devicesmonscreens = shift;

    my $numvgas = scalar keys %$vga;
    my $scrn;
    
    for (my $vgaind = 0; $vgaind < $numvgas; ++$vgaind) {
        if ((${$vga}{$vgaind}{$key_vendorid} eq $pcivendor_nvidia)) {
            $$xorgconf_devicesmonscreens .= "\n" . ${$vga}{$vgaind}{${$vga}{$vgaind}{$key_usedrivernr}}{$key_xorgconf};
        } else {
            $$xorgconf_devicesmonscreens .= "\n" . ${$vga}{$vgaind}{$key_xorgconf};
        }
        if ($vgaind eq $bootvga) {
            if ((${$vga}{$vgaind}{$key_vendorid} eq $pcivendor_nvidia)) {
                ($scrn) = ${$vga}{$vgaind}{${$vga}{$vgaind}{$key_usedrivernr}}{$key_xorgconf} =~ m/Screen\s"([^"]+)/m;
            } else {
                ($scrn) = ${$vga}{$vgaind}{$key_xorgconf} =~ m/Screen\s"([^"]+)/m;
            }
        }
    }
    
    # Now collect the screens
    my @scrns = ($$xorgconf_devicesmonscreens =~ m/Screen\s+"([^"]+)/gm);
    # boot screen = screen 0
    my $prevsc = $scrns[$bootvga];
    $$xorgconf_serverlayoutsingle = 
    $$xorgconf_serverlayoutmulti = "    Screen         0 \"$prevsc\"\n";
    my $n = 1;
    for ( my $i = 0; $i < $numvgas; ++$i,++$n) {
        next if ($i == $bootvga);
        if ($numvgas < 3 or $i < ($numvgas - 1)) {
            $$xorgconf_serverlayoutmulti .= 
                "    Screen         $n \"$scrns[$i]\" RightOf \"$prevsc\"\n";
            $prevsc = $scrns[$i];
        } else {
            $$xorgconf_serverlayoutmulti .= 
                "    Screen         $n \"$scrns[$i]\" LeftOf \"$scrns[$bootvga]\"\n";
        }
    }

    $$xorgconf_serverlayoutsingle = 
qq|Section "ServerLayout"
    Identifier     "single"
$$xorgconf_serverlayoutsingle    InputDevice    "Keyboard0" "CoreKeyboard"
    InputDevice    "Mouse0" "CorePointer"
EndSection
|;

    $$xorgconf_serverlayoutmulti = 
qq|Section "ServerLayout"
    Identifier     "multi"
$$xorgconf_serverlayoutmulti    InputDevice    "Keyboard0" "CoreKeyboard"
    InputDevice    "Mouse0" "CorePointer"
EndSection
|;

    # TODO
    # finally, replace the screen names in $xorgconf_devicesmonscreens 
    # with the screen numbers as per xorg.conf spec

    
}

sub modify_keystack_pkglist
{
    my $ks = shift;
    my $n = scalar @$$ks;
    
    for ( my $i = 0; $i < $n; ++$i) {
# TODO check this:
# on FBSD 13 it complains that it wants a "BOOLEAN" ???
#        @$$ks[$i] = "$pkginst @$$ks[$i]";
        @$$ks[$i] = "env ASSUME_ALWAYS_YES=TRUE pkg install @$$ks[$i]";
    }
}

sub modify_keystack_bootloaderconf
{
    my $ks = shift;
    return if (not defined $$ks);

    my $n = scalar @$$ks;
    
    for ( my $i = 0; $i < $n; ++$i) {
        (my $key, my $val) = @$$ks[$i] =~ /([^=]+)=([^=]+)/;
        $val =~ s/"//g;
        @$$ks[$i] = "$sysmod $f_boot_loader_conf $key=$val double";
    }
}

sub modify_keystack_etcrcconf
{
    my $ks = shift;
    return if (not defined $$ks);

    my $n = scalar @$$ks;
    for ( my $i = 0; $i < $n; ++$i) {
        @$$ks[$i] =~ s/"//g;
        @$$ks[$i] = "$sysmod $f_rc_conf @$$ks[$i] double";
    }
}

sub modify_keystack_kldlist
{
    my $ks = shift;
    return if (not defined $$ks);

    my $n = scalar @$$ks;
    
    for ( my $i = 0; $i < $n; ++$i) {
        @$$ks[$i] = "$sysmod $f_rc_conf kld_list+=\" @$$ks[$i]\" double";
    }
}

sub createbatch
{
    my $keystack = {};
    my $xorgconf_serverlayoutsingle;
    my $xorgconf_serverlayoutmulti;
    my $xorgconf_devicesmonscreens;

    # now build config lists to produce config files or 
    # executer batches, respectively
    my @configparts = ($key_pkglist, $key_bootloaderconf, $key_etcrcconf, $key_kldlist, $key_userperm, $key_runonce, $key_xorg_poststart);
    
    foreach (@configparts) {
        ${$keystack}{$_} = ();
        collectconfig( \${$keystack}{$_}, $_);
    }
    # check whether a workable config exists
    # eg no empty keystacks
    my $noempty = 0;
    foreach (@configparts) {
        if (defined ${$keystack}{$_}) {
            $noempty = 1;
        }
    }
    if (not $noempty) {
        logconsole( "createbatch: empty!\n");
        return(1);
    }
    
    # now some particular keystacks need to be modified,
    # for example the key_pkglist items need to be converted 
    # to series of "env ASSUME_ALWAYS_YES=YES pkg ins <pkgname>"
    modify_keystack_pkglist( \${$keystack}{$key_pkglist});
    modify_keystack_bootloaderconf( \${$keystack}{$key_bootloaderconf});
    modify_keystack_etcrcconf( \${$keystack}{$key_etcrcconf});
    modify_keystack_kldlist( \${$keystack}{$key_kldlist});
    
    # make xorg.conf
    collect_xorgconf(
        \$xorgconf_serverlayoutsingle ,
        \$xorgconf_serverlayoutmulti,
        \$xorgconf_devicesmonscreens
    );
    
    ############################
    # xorg.conf template
    $xorgconf = 
qq|$xorgconf_serverlayoutsingle
$xorgconf_serverlayoutmulti
Section "ServerFlags"
    Option "DontZap"        "false"
    Option "BlankTime"      "0"
    Option "StandbyTime"    "0"
    Option "SuspendTime"    "0"
    Option "OffTime"        "0"
EndSection

Section "Module"
    Load "freetype"
EndSection

Section "Files"
EndSection

Section "InputDevice"
    # generated from default
    Identifier     "Mouse0"
    Driver         "mouse"
    Option         "Protocol" "auto"
    Option         "Device" "/dev/sysmouse"
    Option         "Emulate3Buttons" "no"
    Option         "ZAxisMapping" "4 5"
EndSection

Section "InputDevice"
    # generated from default
    Identifier     "Keyboard0"
    Driver         "keyboard"
EndSection

Section "InputClass"
    Identifier      "Keyboard Defaults"
    MatchIsKeyboard "yes"
    Option          "XkbOptions" "terminate:ctrl_alt_bksp"
EndSection

$xorgconf_devicesmonscreens
|;

    # get the executer batch
    if ($do_install) {
        if (defined ${$keystack}{$key_pkglist}) {
            $execbatch_install .= join( "\n", @{${$keystack}{$key_pkglist}}) . "\n";
        }
        if (defined ${$keystack}{$key_bootloaderconf}) {
            $execbatch_install .= join( "\n", @{${$keystack}{$key_bootloaderconf}}) . "\n";
        }
        if (defined ${$keystack}{$key_etcrcconf}) {
            $execbatch_install .= join( "\n", @{${$keystack}{$key_etcrcconf}}) . "\n";
        }
        if (defined ${$keystack}{$key_kldlist}) {
            $execbatch_install .= join( "\n", @{${$keystack}{$key_kldlist}}) . "\n";
        }
    }
    if ($do_install or $do_live) {
        if (defined ${$keystack}{$key_userperm}) {
            $execbatch_live .= join( "\n", @{${$keystack}{$key_userperm}}) . "\n";
        }
        if (defined ${$keystack}{$key_runonce}) {
            $execbatch_live .= join( "\n", @{${$keystack}{$key_runonce}}) . "\n";
        }
        if (defined ${$keystack}{$key_xorg_poststart}) {
            $execbatch_xorg_poststart .= join( "\n", @{${$keystack}{$key_xorg_poststart}}) . "\n";
        }
    }
    
    # useful in case of bad/non - detection/configuration
    logconsole( "\nzzz_supported:\n" . Dumper( \$zzz_supported));
    logconsole( "\nbootvga:\n" . Dumper( \$bootvga));
    logconsole( "\nvga:\n" . Dumper( \$vga));
    logconsole( "\nvgas:\n" . Dumper( \@vgas));
    logconsole( "\nkeystack:\n" . Dumper( \$keystack));
    logconsole( "\nexecbatch_install:\n" . Dumper( \$execbatch_install));
    logconsole( "\nexecbatch_live:\n" . Dumper( \$execbatch_live));
    
    return 0;
}


############################################################    
####################    utility functions for a clean main section
############################################################

#     check whether versions supported by installer
#     
sub supportedversioncheck
{
    my $fbsdverstr = `freebsd-version -kru`;
    ($fbsd_kernelinstalled, 
     $fbsd_kernelrunning,
     $fbsd_userlandinstalled) = split( "\n", $fbsdverstr);
    ($fbsd_major, $fbsd_minor, $fbsd_release) = 
            $fbsd_kernelrunning =~ /^(\d+)\.(\d+)-([^-]+)/;
    ($fbsd_patchlevel) = 
            $fbsd_kernelrunning =~ /^\d+\.\d+-[^-]+-p(\d+)/;

# TODO move this to log for user support/issue handling?
# print "fbsd_kernelinstalled   : '$fbsd_kernelinstalled'\n";
# print "fbsd_kernelrunning     : '$fbsd_kernelrunning'\n";
# print "fbsd_userlandinstalled : '$fbsd_userlandinstalled'\n";
# print "fbsd_major      : '$fbsd_major'\n";
# print "fbsd_minor      : '$fbsd_minor'\n";
# print "fbsd_release    : '$fbsd_release'\n";
# if (defined $fbsd_patchlevel) {
#     print "fbsd_patchlevel : '$fbsd_patchlevel'\n";
# } else {
#     print "fbsd_patchlevel : Not yet patched\n";
# }

    if ((not defined $opt_ignoreversion or not $opt_ignoreversion) and
            (not exists ${$fbsdvers_supported}{$fbsd_major} or 
            ($fbsd_major == 12 and $fbsd_minor < 2))) {
        # TODO nice bailout instead of die
        # or just warning?
        die "This is an FreeBSD version which has not been verified\nto work with $myname.\nUse -d (don't care/ignore version) option to attempt installation anyway.\n";
    }
}

sub checkuser1001
{
    my $dodialog = shift;
    
    # get default user (1001)
    my $etcpasswd = read_a_file( '/etc/passwd');
    ($user1001) = $$etcpasswd =~ /^([^:]+):\*:1001:/m;
    if (defined $user1001) {
        logconsole( "USER 1001: '$user1001'\n");
    } else {
        if ($dodialog) {
            # set up user dialog
            createuser1001();
        } else {
            die "checkuser1001: User not present!";
        }
    }
    $user1001home = "/home/$user1001";
}


sub quarterlytolatest
{
    ##############################
    # change from quarterly to latest repo
    # see https://wiki.freebsd.org/Ports/QuarterlyBranch
    my $freebsdconf = read_a_file('/etc/pkg/FreeBSD.conf');
    die 'no /etc/pkg/FreeBSD.conf??' if (not defined $freebsdconf);
    $$freebsdconf =~ s|quarterly|latest|g;
    if (not -e '/usr/local/etc/pkg/repos') {
        die if (system( 'mkdir -p /usr/local/etc/pkg/repos'));
    }
    die if (not -d '/usr/local/etc/pkg/repos');
    die if (write_a_file('/usr/local/etc/pkg/repos/FreeBSD.conf', $freebsdconf));
    logconsole ("quarterlytolatest: new FreeBSD.conf written into '/usr/local/etc/pkg/repos', using 'latest' repo instead of 'quarterly'\n");
}

# drm-kmod turns the screen black if good sc is running while kldloading it
# so we need to care for that
sub catchkmssurprise
{
    if ($runningconsole eq 'sc') {
        # remove kldload i915, radeonkms or amdgpu from executer batch and only call it 
        # just before starting xorg (if the user chooses to do that)
        foreach ('\[0 1\]kldload -nv i915kms\n',
                 '\[0 1\]kldload -nv radeonkms\n',
                 '\[0 1\]kldload -nv amdgpu\n'
                ) 
        {
            if ($cmd =~ /$_/s) {
                $kmssurprise = $_;
                $cmd =~ s/$_//s;
                last;
            }
        }
    }
    if ($PR261749) {
        # we cannot do any kldload of amdgpu, i915kms or nvidia.
        # These all will panic the kernel.
        # So, sadly, the user must be instructed to reboot before continuing.
        foreach ('\[0 1\]kldload -nv i915kms\n',
                 '\[0 1\]kldload -nv amdgpu\n',
                 '\[0 1\]kldload -nv nvidia\n',
                 '\[0 1\]kldload -nv nvidia-modeset\n',
                ) 
        {
            if ($cmd =~ /$_/s) {
                $kmssurprise = $_;
                $cmd =~ s/$_//s;
                $PR261749reboot = 1;
            }
        }
    }
}

# sub autodetectautoconfigure( stringref message, stringref cmd, stringref runoncecmd, stringref usecons )
sub autodetectautoconfigure
{
    my $rmsg = shift;
    my $execmd = shift;
    my $klcmd = shift;
    my $usecon = shift;
    
    $$rmsg .= ($zzz_supported)
                ? "Your computer supports S3 (sleep) suspend on FreeBSD.\\n"
                : "Sadly, your computer does not support S3 (sleep) suspend on FreeBSD.\\n";

    $vga = undef;
    @vgas = undef;
    vgadetect( undef);      # first time without altdriver
    if (vgaconfigure()) {
        logconsole( "Cannot configure graphics card for this reason:\n" . $msg_donotuse);
        die;
    }
    if (createbatch()) {
        logconsole( "Apologies, no graphics card with FreeBSD xorg driver support found.\n");
        die;
    }

    my $cardname;
    my $nvdrvno;
    if (${$vga}{$bootvga}{$key_vendorid} eq $pcivendor_nvidia) {
        $nvdrvno = ${$vga}{$bootvga}{$key_usedrivernr};
        $cardname = ${$vga}{$bootvga}{$nvdrvno}{$key_dbname};
    } else {
        $cardname = ${$vga}{$bootvga}{$key_dbname};
    }
    my $manuf = ${$vga}{$bootvga}{$key_vendor};
    my $cardid = ${$vga}{$bootvga}{$key_devicename};
    $$rmsg .= "\\nYour computer has the \"$cardname\" graphics card/chipset made by \"$manuf\", which identifies itself as \"$cardid\".\\n\\n";

    if (not $system_isuefi) {
        # enable SC if not UEFI and a non-drm-kmod-supported graphics card 
        # is primary/boot graphics card
        # as suspend/resume apparently only works with sc but fails with vt
        if ( ${$vga}{$bootvga}{$key_vendorid} eq $pcivendor_nvidia or
                 not exists ${$vga}{$bootvga}{$key_kdriver}  ) {
            $$rmsg .= ($zzz_supported)
                    ? "For graphics cards/chips that are not from the Intel/AMD oligopoly, the VT console breaks S3 sleep suspend/resume. This only works with the SC console. For this reason, "
                    : "Because the vt console does not support positive display and has quite some other issues, ";
            $$rmsg .= "the SC console will be used by your computer.\\n";
            $$usecon = 'sc';
            if ($zzz_supported) {
                if (${$vga}{$bootvga}{$key_vendorid} eq $pcivendor_nvidia) {
                    if ( ${$vga}{$bootvga}{$nvdrvno}{$key_udrivershort} eq 'nv') {
                        $$rmsg .= "\\nNote that with newer Nvidia cards of the nv driver class used by you, suspend/resume *might* *not* work, as the later of these cards have incomplete status save/restore functionality in their BIOS. You will see when you try it out.\\n";
                        $$execmd .= "$sysmod $f_boot_loader_conf vesa_load=YES double\n";
                        $$klcmd .= "[0 1]kldload vesa\n";
                    } else {
                        $$rmsg .= "\\nNote that with newer Nvidia cards like yours, suspend/resume from console does not work, as these Nvidia cards have incomplete status save/restore functionality in their BIOS.\\nHowever, suspend/resume from X Window will work just fine.\\n";
                        # note that vesa module breaks suspend/resume for 
                        # the newer Nvidia cards, so we don't install it
                    }
                } else {
                    $$rmsg .= "\\nSuspend/resume from both console and from X Window will work fine.\\n";
                    $$execmd .= "$sysmod $f_boot_loader_conf vesa_load=YES double\n";
                    $$klcmd .= "[0 1]kldload vesa\n";
                }
            }
        } else {
            # KMS supported cards
            $$rmsg .= "Please note that the vt console will be used by your computer. This is necessary because the KMS drivers for graphics cards/chips like yours, that are from the Intel/AMD oligopoly, do the suspend/resume handling and only work with the vt console.\\nSuspend/resume will work both from console and X Window.\\n";
            $$usecon = 'vt';
            my $kdrv = ${$vga}{$bootvga}{$key_kdriver};
            $$klcmd .= "[0 1]kldload $kdrv\n";
            $$execmd .= "$sysmod $f_rc_conf kld_list+=\" $kdrv\" double\n";
        }
    } else {
        # UEFI
        # for now, until we got the hybrid BIOS CSM init hack functional,
        # we must make sure that vt console is activated
        $$usecon = 'vt';
        if ( ${$vga}{$bootvga}{$key_vendorid} eq $pcivendor_nvidia or
                 not exists ${$vga}{$bootvga}{$key_kdriver}  ) {
            $$rmsg .= "Unfortunately, your system is configured as UEFI. This comes with a lot of disadvantages.\\n\\n" .
            "As long as the necessary VGA BIOS kernel hacks for enabling the SC console have not been implemented, or alternatively nouveau KMS has been ported to FreeBSD, you are forced to use the vt newcons console, which breaks suspend/resume for cards not from the Intel/AMD oligopoly. So you cannot use suspend/resume on this configuration, neither on console nor on X Window. :( \\n";
        } else {
            $$rmsg .= "Your system is configured as UEFI.\\n\\nPlease note that the vt console will be used by your computer. This is necessary because the KMS drivers for graphics cards/chips like yours, that are from the Intel/AMD oligopoly, do the suspend/resume handling and only work with the vt console.\\nSuspend/resume will work both from console and X Window.\\n";
            my $kdrv = ${$vga}{$bootvga}{$key_kdriver};
            $$klcmd .= "[0 1]kldload $kdrv\n";
            $$execmd .= "$sysmod $f_rc_conf kld_list+=\" $kdrv\" double\n";
        }
    }
    $$execmd .= "$sysmod $f_boot_loader_conf kern.vty=$$usecon double\n";
    if ($runningconsole ne $$usecon) {
        $$rmsg .= "\\nImportant: Until you have rebooted, suspend/resume will not work, because you have the still the \"wrong $runningconsole\" running.\\n";
    }
}

# do only a subset of the commands that are necessary to enable suspend/resume for console,
# leave out all the xorg drivers
sub makesuspresumeforcons
{
    # hack a little bit so console suspend/resume works from console.
    # IMHO this should be this way with out-of-the-box FreeBSD.
    # Note: the AMD/Intel cards not supported by KMS still need VESA, 
    # so it is important to check for kdriver
    if ( (${$vga}{$bootvga}{$key_vendorid} eq $pcivendor_intel or
        ${$vga}{$bootvga}{$key_vendorid} eq $pcivendor_atiamd)
        and exists ${$vga}{$bootvga}{$key_kdriver})
    {
        # KMS supported - needs KMS driver for console resume
        if ( exists ${$vga}{$bootvga}{$key_pkglist}) {
            foreach (keys %{${$vga}{$bootvga}{$key_pkglist}}) {
                $cmd .= "$pkginst " .
                            ${$vga}{$bootvga}{$key_pkglist}{$_} . 
                            "\n";
            }
        }
        if ( exists ${$vga}{$bootvga}{$key_kldlist}) {
            foreach (keys %{${$vga}{$bootvga}{$key_kldlist}}) {
                $cmd .= "$sysmod $f_rc_conf kld_list+=" .
                            ${$vga}{$bootvga}{$key_kldlist}{$_} . 
                            " double\n";
            }
        }
        if ( exists ${$vga}{$bootvga}{$key_bootloaderconf}) {
            foreach (keys %{${$vga}{$bootvga}{$key_bootloaderconf}}) {
                $cmd .= "$sysmod $f_boot_loader_conf " .
                            ${$vga}{$bootvga}{$key_bootloaderconf}{$_} . 
                            " double\n";
            }
        }
        if ( exists ${$vga}{$bootvga}{$key_runonce}) {
            foreach (keys %{${$vga}{$bootvga}{$key_runonce}}) {
                $cmd .= ${$vga}{$bootvga}{$key_runonce}{$_} . "\n";
            }
        }
        $cmd .= "$sysmod $f_boot_loader_conf kern.vty=vt double\n";
#         $$msg .= 'Notice:\nTo make suspend/resume from console work, drm-kmod has been installed and activated.';
    } elsif (not $system_isuefi) {
        $cmd .= "$sysmod $f_boot_loader_conf kern.vty=sc double\n";
#         $$msg .= 'Notice:\nTo make suspend/resume from console work, the sc console has been enabled and will be activated after reboot, as the vt console breaks suspend/resume on your graphics card.';
        # more detailed reporting if Nvidia
        if ( ${$vga}{$bootvga}{$key_vendorid} eq $pcivendor_nvidia) {
            my $drvno = ${$vga}{$bootvga}{$key_usedrivernr};
            if ( ${$vga}{$bootvga}{$drvno}{$key_udrivershort} ne 'nv') {
#                 $$msg .= '\n\nPlease also be aware that with your Nvidia cards generation suspend/resume only works from X Window, and only if running the sc console.';
            } else {
#                 $$msg .= '\n\nPlease also be aware that with your Nvidia cards generation suspend/resume only works with some cards, and only if running the sc console. You will have to test this.';
                # add vesa even if it is (still) built into the kernel
                $cmd .= "$sysmod $f_boot_loader_conf vesa_load=YES double\n";
            }
        } else {
            # add vesa even if it is (still) built into the kernel
            $cmd .= "$sysmod $f_boot_loader_conf vesa_load=YES double\n";
        }
    }
}


sub check_preupdate
{
    my $dobe = shift;
    
    $cmd = '';
    if ($dobe) {
        $cmd .= "bectl create $FreeBSDBaseInstall\n";
        executer($cmd);
        $cmd = '';
    }
    
    supportedversioncheck();
    
    # advise user to install on CSM instead of UEFI in case UEFI/vt 
    # breaks suspend/resume for his GPU
    my $msg = '';
    my $kmscmd = '';
    my $kldcmd = '';
    my $usecons = '';
    # at this point we call autodetectautoconfigure only to find whether
    # the configuration blocks suspend/resume.
    # It uses the user variables which are not yet set.
    # So dummy them and clear afterwardsto avoid using undef variables.
    $user1001 = 'dummy';
    autodetectautoconfigure(\$msg, \$kmscmd, \$kldcmd, \$usecons);
    $user1001 = undef;
    if ($system_isuefi and ${$vga}{$bootvga}{$key_vendorid} eq $pcivendor_nvidia) {
        my $drvno = ${$vga}{$bootvga}{$key_usedrivernr};
        if ( ${$vga}{$bootvga}{$drvno}{$key_udrivershort} ne 'nv') {
            if (not yesno(
            "$bootie_backtitleheader: Installation stage",
            'Preinstall step: Consider using non-UEFI mode',
            "Your system is currently running in UEFI mode.\\nPlease consider whether you can use CSM (non-UEFI) BIOS mode, as in UEFI mode suspend/resume will not work if your primary (boot) graphics card is Nvidia.\\nHit \"Enter\" to continue installation anyway, or hit \"Cancel\" if you prefer to abort and reinstall in non-UEFI mode.",
            '19 72')) {
                print "Aborted installation. Go to BIOS, deactivate UEFI mode, and reinstall FreeBSD, then start $myname again.\n";
                exit (1);
            }
        }
    }

    if (not yesno(
            "$bootie_backtitleheader: Installation stage",
            'Preinstall step: Determine repository to be used',
            "Most people use the \"quarterly\" repository, which is updated every three months and offers good stability. On the other hand, this can be annoying if you always want the newest software versions.\\nSo some people prefer using the \"latest\" repository instead. However, this can have disadvantages as the newest versions are either sometimes buggy, outright broken or temporarily not available when build problems occur.\\n\\nDo you want to use the \"quarterly\" repo?\\nThen please just hit \"Enter\".\\nIf you prefer to use the \"latest\" repo, please choose \"No\".\\n\\nAfter this, the system will update, which can take a few minutes or longer, depending on your computer and internet speed.",
            '19 72')) {
        quarterlytolatest();
    }
    
    ##############################
    # FreeBSD update and version detect
    
    $cmd = "rm -rf /var/db/freebsd-update/*\n";
    $cmd .= "env ASSUME_ALWAYS_YES=YES PAGER=cat freebsd-update --not-running-from-cron fetch\n";
    $cmd .= "[0 1 2]env ASSUME_ALWAYS_YES=YES PAGER=cat freebsd-update --not-running-from-cron install\n";
    $cmd .= "env ASSUME_ALWAYS_YES=YES pkg update\n";
    $cmd .= "env ASSUME_ALWAYS_YES=YES pkg upgrade\n";
    $cmd .= "bectl create $FreeBSDBaseInstallUpdated\n";
    executer($cmd);
    $cmd = '';
    
    makesuspresumeforcons();
    # make sure that FreeBSD versions match
    catchkmssurprise();
    executer( $cmd);
    $cmd = '';
    supportedversioncheck();    # rerun to update version vars
    # no need to bother user if no reboot necessary
    if ($fbsd_kernelinstalled eq $fbsd_kernelrunning) {
        msgbox( 
            "$bootie_backtitleheader: Installation stage",
            'Preinstall step: Configuration notification',
            $msg,
            '19 72');
        return;
    }
    
    
    # TODO can the reboot handling be improved?
    # https://docs.freebsd.org/en/books/handbook/cutting-edge/
    # need to reboot
    if (length( $msg)) {
        $msg .= '\\n\\n';
    }
    my $ymsg = "Your computer has been updated to version \"$fbsd_kernelinstalled\" and needs to be rebooted, because the kernel running is still the older version \"$fbsd_kernelrunning\". Apologies for this.\\n\\n" . $msg . "Hit \"Enter\" to reboot, and simply restart \"/root/$myname -i\" after reboot to continue installation.\\nIf you want to do other things on shell before rebooting, choose \"No\".\\n\\n";
        
    if ( yesno( 
            "$bootie_backtitleheader: Installation stage",
            'Preinstall step: Reboot after update',
            $ymsg,
            '19 72')) {
        # reboot
        qx|shutdown -r now|;
    } else {
        exit 0;
    }
}

sub buildapache
{
    # download ports apache, patch it and build
    if (not -e $apap) {
        # if the path does not exist, ports tree has not been installed
        die "Ports tree missing?\n";
    }
    if (-e '/usr/local/sbin/httpd') {
        # hmm? executable already exists
        # TODO handle this better!
        die "Sorry. Apache is already installed. No idea what went wrong :)\n";
    }
    
    # install dependencies for apache24 first
    $cmd .= "env ASSUME_ALWAYS_YES= pkg install -y -A \$(make -C /usr/ports/www/apache24 missing)\n";
    
    # build apache24 with suexec configured
    $cmd .= "cd $apap/\n";

    # set the options 
    # DOES NOT WORK
    # instead patching /etc/make.conf as workaround
    # TODO after bug PR 260964 has been resolved
    # https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=260964
#     my $suexopts = 
#             "-DWITH_SUEXEC " .
# #             "-DWITH=SUEXEC " .
#             "-DSUEXEC_DOCROOT=\\\"$suexec_docroot\\\" " .
#             "-DSUEXEC_USERDIR=\\\"$suexec_userdir\\\" " .
#             "-DSUEXEC_UIDMIN=\\\"$suexec_uidmin\\\" " .
#             "-DSUEXEC_GIDMIN=\\\"$suexec_gidmin\\\" " .
#             "-DSUEXEC_LOGFILE=\\\"$suexec_logfile\\\" ";
#     my $mkopts = $suexopts . 
#             "-DBATCH";
#     my $mkopts_threaded = $suexopts .
#             "-j$threadstocompilewith -DBATCH";
    my $mkopts = '-DBATCH' . $apachevulnignore;
    
    my $mkopts_threaded = "-j$threadstocompilewith -DBATCH";
    $cmd .= "make $mkopts fetch\n";
    $cmd .= "make $mkopts extract\n";
    $cmd .= "make $mkopts patch\n";
    $cmd .= "$backupandpatchsuexec\n";
    $cmd .= "$hackmakeconf\n";
    $cmd .= "make $mkopts_threaded build\n";
    $cmd .= "make $mkopts install\n";
    # remove make.conf
    $cmd .= "rm /etc/make.conf\n";
    # now install apache modules
    $cmd .= "$pkginst ap24-mod_perl2\n";
}

sub cutinet
{
    # cut off the last /8 including dot
    my $ip = shift;
    $ip =~ /^(\d+\.\d+\.\d+)/;
    return $1;
}

# TODO make sure to do_skipapachebuild if IP is not private
# or are there other ways handling this better?
sub getmyip
{
    # determine "my" IP and interface
    my $myintf = '';
    # get gateway IP
    my $tmps = read_a_file( $f_rc_conf);
    my ($defaultrouter) = $$tmps =~ /defaultrouter\=\"([01-9\.]+)\"/;
    die "No defaultrouter defined in $f_rc_conf!" if (not defined $defaultrouter);
    my $defaultrouter2 = $defaultrouter;

    # get active ifconfig
    $tmps = `ifconfig`;
    my @ifln = split( "\n", $tmps);
    my $intf = '';
    my $isup = 0;
    my $isrunning = 0;
    my $isactive = 0;
    my $inet = '';
    my $inetmask = '';
    foreach (@ifln) {
        # does line begin with interfaceNN: ?  or with blanks?
        if (/^(\w+\d+)\:\s(.*)$/) {
            $intf = $1;
            # new interface, zero all data from previous loops
            $isactive = 0;
            $inet = '';
            $inetmask = '';
            my $ln = $2;   # seems always to have flags
            # is this intf UP and RUNNING?
            $isup = ($ln =~ /UP/) ? 1 : 0;
            $isrunning = ($ln =~ /RUNNING/) ? 1 : 0;
        } else {
            # right now we only care for the IP and the Status Active
            if (/status:\sactive/) {
                $isactive = 1;
            } elsif (/inet ([01-9\.]+) netmask ([01-9abcdefx\.]+) broadcast ([01-9\.]+)/) {
                $inet = $1;
                $inetmask = $2;
            }
        }
        # enough positive data to consider an interface?
        if ($isup and $isrunning and $isactive and
                    $inetmask eq '0xffffff00' and
                    (not ($intf =~/^lo/)) and
                    cutinet($inet) eq cutinet($defaultrouter) ) 
        {
            # we got it!
            $myip = $inet;
            $myintf = $intf;
            last;
        }
    }
}

sub configapache
{
    my $myips = inputbox( 
        "$bootie_backtitleheader: Preconfiguration stage",
        'Preconfiguration step: Set access list for web interface',
        'If you want to access the web interface from other computers, you have to add the IPs of those. If you do not want remote access, just hit "Enter" to only allow access from the computers own IP displayed in the field below.',
        '12 60',
        $myip );

    # now the apache should be installed.
    # We now need to at least set up httpd.conf
    # and the basic HelloWorld CGI
    
#     # back up old httpd.conf TODO
#     if (not -e $httpdconforigp) {
#         $cmd .= "cp $httpdconfp $httpdconforigp\n";
#     }

    # generate new httpd.conf
    my $genstr = "# Generated by $myname on " . getdirdatetag();
    # make list of "Require ip" entries from the data in $myips
    my $requireips = '';
    my @tmpa = split( '\s+', $myips);
    foreach (@tmpa) {
        $requireips .= "    Require ip $_\n";
    }
    chop $requireips;
    $httpd_conf = 
qq|# httpd.conf
$genstr
ServerName $myip
ServerRoot "/usr/local/"
# the modules path apache searches for is /usr/local/libexec/apache24/
# realpath: /s/usr-local/libexec/apache24/
# if ServerRoot is set it apparently searches modules from there
LoadModule suexec_module /usr/local/libexec/apache24/mod_suexec.so
LoadModule mpm_prefork_module /usr/local/libexec/apache24/mod_mpm_prefork.so
LoadModule log_config_module /usr/local/libexec/apache24/mod_log_config.so
LoadModule unixd_module /usr/local/libexec/apache24/mod_unixd.so
LoadModule alias_module /usr/local/libexec/apache24/mod_alias.so
LoadModule mime_module /usr/local/libexec/apache24/mod_mime.so
LoadModule cgid_module /usr/local/libexec/apache24/mod_cgid.so
LoadModule authz_core_module /usr/local/libexec/apache24/mod_authz_core.so
LoadModule dir_module /usr/local/libexec/apache24/mod_dir.so
LoadModule filter_module /usr/local/libexec/apache24/mod_filter.so
LoadModule deflate_module /usr/local/libexec/apache24/mod_deflate.so
# needed for "require ip":
LoadModule authz_host_module /usr/local/libexec/apache24/mod_authz_host.so
# LoadModule ssl_module /s/usr-local/libexec/apache24/mod_ssl.so
LoadModule perl_module /usr/local/libexec/apache24/mod_perl.so

Listen $myip:80
TimeOut $timeout
ServerTokens Minimal
User www
Group www
LogFormat "\%h \%l \%u \%t \\\"\%r\\\" %>s \%b \\"\%{Referer}i\\\" \\\"\%{User-Agent}i\\"" combined
LogLevel debug
ErrorLog "/var/log/httpd-error.log"
CustomLog "/var/log/httpd.log" combined
GracefulShutdownTimeout $timeout
AcceptFilter http none
AcceptFilter https none
SetOutputFilter DEFLATE
PerlOptions +ParseHeaders
FallbackResource $cgipath/$cginame.pl

# NOTE: the mime module has partly /usr/local as search root
# it searches for etc/apache24/mime.types* from there
# the realpath is:
# /s/usr-local/etc/apache24/mime.types
# thus from ServerRoot there must be a symbolic link to there
# and apparently this is why we need FollowSymlinks :(
Options ExecCGI Includes FollowSymlinks

# TODO find out why no mutex being used
# AcceptMutex flock

<VirtualHost $myip:80>
  ServerName $myname.my:80
  KeepAlive On
  MaxKeepAliveRequests 10
  AddHandler cgi-script .pl
  ScriptLog "/var/log/cgi.log"
  ScriptLogLength 10000000
  DocumentRoot "/"
  <Directory "/">
$requireips
    Require ip 127
  </Directory>
  ServerAdmin "root\@localhost"
  ServerSignature EMail
  SuexecUserGroup root wheel
</VirtualHost>
|;
    $cmd .= "$writehttpdconf\n";

    # now create and store cgi
    $cmd .= "mkdir -p $webroot$cgipath\n";
    $mycgi = 
q|#!/usr/local/bin/perl
use strict;
use warnings;
use utf8;
use open ':encoding(utf8)';
binmode(STDOUT, ":utf8");
use feature 'unicode_strings';

my $tx = "Content-type: text/html; charset=utf-8\nCache-control: no-cache\n\n";
$tx .= "<!DOCTYPE html>\n";
$tx .= "<html>\n<body>\n";
$tx .= "<h1>Hello World!</h1><br>\n";
my $username = getlogin;
$tx .= "getlogin says: Running as '<b>$username</b>'!<br>";
$username = getpwuid( $< );
$tx .= "getpwuid says: Running as '<b>$username</b>'!<br>\n";
my $userid = $>;
$tx .= "Perl says: Effective UID \$>of the currently running Perl program: '<b>$userid</b>'!<br>\n";
$userid = $<;
$tx .= "Perl says: Real UID \$< of the currently running Perl program: '<b>$userid</b>'!<br>\n";
my $groupid = $);
$tx .= "Perl says: Effective GID \$) of the currently running Perl program: '<b>$groupid</b>'!<br>\n";
$groupid = $(;
$tx .= "Perl says: Real GID \$( of the currently running Perl program: '<b>$groupid</b>'!<br>\n";
my $ppid = getppid();
my $tmps = `ps -p $ppid`;
my ($ppname) = $tmps =~ /\n.{22}(.*)$/;
$tx .= "CGI getppid() parent PID: '$ppid'<br>\n";
$tx .= "CGI parent command line: '$ppname'<br>\n";
$tx .= "</body>\n</html>\n";
print $tx;
|;
    $cmd .= "$writehelloworld\n";
    $cmd .= "$sysmod $f_rc_conf apache24_enable=YES double\n";

    # start apache only as last step before ending installation,
    # either when going to console or firing up xorg, so don't do it here
}

sub is_folder_empty {
    my $dirname = shift;
    opendir(my $dh, $dirname) or die "Not a directory";
    return scalar(grep { $_ ne "." && $_ ne ".." } readdir($dh)) == 0;
}

# remove kldloads for radeon/amdgpu, TODO firmware, i915kms, nvidia(-modeset)
sub cleankldloads
{
    my $d = shift;
    $cmd .= "$sysmod $d kld_list-=\" vesa\" double\n";
    $cmd .= "$sysmod $d kld_list-=\" amdgpu\" double\n";
    $cmd .= "$sysmod $d kld_list-=\" radeonkms\" double\n";
    $cmd .= "$sysmod $d kld_list-=\" i915kms\" double\n";
    $cmd .= "$sysmod $d kld_list-=\" nvidia\" double\n";
    $cmd .= "$sysmod $d kld_list-=\" nvidia-modeset\" double\n";
    $cmd .= "$sysmod $d kld_list-=\" /boot/modules/amdgpu.ko\" double\n";
    $cmd .= "$sysmod $d kld_list-=\" /boot/modules/radeonkms.ko\" double\n";
    $cmd .= "$sysmod $d kld_list-=\" /boot/modules/i915kms.ko\" double\n";
    $cmd .= "$sysmod $d kld_list-=\" nvidia.ko\" double\n";
    $cmd .= "$sysmod $d kld_list-=\" nvidia-modeset.ko\" double\n";
}   

sub cleanconfigs
{
    # back up these files (if present):
    #   /boot/loader.conf
    #   /etc/rc.conf
    #   $d_etc_X11/xorg.conf
    #   ~/.xinitrc

    # Extra:
    # There are many settings that people make
    # due to misleading/incorrect instructions all over 
    # the web. Thus it would probably be prudent to search
    # for these and deactivate them also.
    # This is why not only the settings made by $myname are 
    # being searched for and cleaned.
    # TODO complete this list, there are more than these settings

    # TODO maybe more verbose output regarding 
    #   - backup files/dirs
    #   - changes etc

    $cmd .= "[0 1]cp $f_boot_loader_conf $f_boot_loader_conf.$dt\n";
    
    $cmd .= "[0 1]cp /etc/rc.conf /etc/rc.conf.$dt\n";
    if (-e '/usr/local/etc/rc.conf') {
        $cmd .= "[0 1]cp /usr/local/etc/rc.conf /usr/local/etc/rc.conf.$dt\n";
    }
    
    $cmd .= "[0 1]cp $user1001home/.xinitrc $user1001home/.xinitrc.$dt\n";
    
    # TODO check: is this good to do?
    # afaiu these directories are often used for user defined overrides
    # should we indeed rename/deactivate them?
    # Only if these directories are existent/populated:
    # deactivate /etc/X11/xorg.conf.d by renaming
    if (-e '/etc/X11/xorg.conf.d' and -d '/etc/X11/xorg.conf.d' and
        not is_folder_empty('/etc/X11/xorg.conf.d') ) {
        $cmd .= "mv /etc/X11/xorg.conf.d /etc/X11/xorg.conf.d.$dt\n";
    }
    if (-e '/usr/local/etc/X11/xorg.conf.d' and -d '/usr/local/etc/X11/xorg.conf.d' and
        not is_folder_empty('/usr/local/etc/X11/xorg.conf.d') ) {
        $cmd .= "mv /usr/local/etc/X11/xorg.conf.d /usr/local/etc/X11/xorg.conf.d.$dt\n";
    }
    
    # entries to be removed from /boot/loader.conf
    # 
    my @remove_blc = (
        'vesa_load-="YES"',
        'nvidia-modeset_load-="YES"',
        'nvidia_load-="YES"',
        'i915kms_load-="YES"',
        'hw.amdgpu.exp_hw_support-="1"',
        'amdgpu_load-="YES"',
        'radeonkms_load-="YES"',
        'hw.syscons.disable-="1"',
        'hw.vga.textmode-=YES',
        'hw.vga.textmode-=1',
        'hw.vga.textmode-=0',
        'kern.vty-=sc'
    );
    foreach (@remove_blc) {
        $cmd .= "$sysmod $f_boot_loader_conf $_ double\n";
    }

    my @remove_rcc = (
        # entries to be removed from /etc/rc.conf
        'vboxguest_enable-="YES"',
        'vboxservice_enable-="YES"',
    );
    foreach (@remove_rcc) {
        $cmd .= "$sysmod /etc/rc.conf $_ double\n";
    }
    if (-e '/usr/local/etc/rc.conf') {
        foreach (@remove_rcc) {
            $cmd .= "$sysmod /usr/local/etc/rc.conf $_ double\n";
        }
    }

    cleankldloads('/etc/rc.conf');
    if (-e '/usr/local/etc/rc.conf') {
        cleankldloads('/usr/local/etc/rc.conf');
    }
    
    # deactivate / back up (/usr/local)/etc/X11/xorg.conf by renaming
    if (-e '/etc/X11/xorg.conf') {
        $cmd .= "mv /etc/X11/xorg.conf /etc/X11/xorg.conf.$dt\n";
    }
    if (-e '/usr/local/etc/X11/xorg.conf') {
        $cmd .= "mv /usr/local/etc/X11/xorg.conf /usr/local/etc/X11/xorg.conf.$dt\n";
    }
}

sub opt_show_help
{
    print $bootiehelp;
    exit 0;
}

sub opt_show_version
{
    print "$myname $myversion\n";
    exit 0;
}

# using boot environments as replacement for the snapshots that
# were used in the early development process:
# a) find out whether the system is booted in/running a BE of
#    the intermediate SkunkOS installation stages
# b) if BEs of later installation stages are found to be present, ...
# c) ..., offer deletion of the later BEs before continuing (re?-)installation

# sub getbename returns the name of the BE booted into
sub getbename
{
    my $bel = `bectl list -H`;
    
    my ($be) = $bel =~ /^([a-zA-Z01-9\-\._]+)\s+NR?\s+\/\s+/m;
    return $be;
}

# sub isonbe returns the BE number the system was started in,
# or -1 if it was started on a "non-standard" BE
sub isonbe
{
    my $mybe = getbename();
    
    my $n = 0;
    foreach (@installbes) {
        return($n) if ($mybe eq $_);
        ++$n;
    }
    return -1;
}

# highestbe returns the number of the highest present boot environment
# listed in @installbes
sub highestbe
{
    my $bel = `bectl list -H`;
    
    
    my $n = -1;
    foreach (@installbes) {
        if ( $bel =~ /^$_\s+/m ) {
            ++$n;
            next;
        }
        last;
    }
    return $n;
}

sub checkcleanbe
{
    my $isonb = isonbe();
    if ($isonb < 0) {
        print "You are running from a non-standard boot environment.\nSorry, the SkunkOS base installer is designed only to run from the standard BEs:\n";
        my $n = 0;
        foreach (@installbes) {
            print "$n. $_\n";
            ++$n;
        }
        exit 1;
    }
    if ($isonb) {
        # booted into stage BE.
        my $isonbname = $installbes[$isonb];
        my $umsg = "You have booted into the stage $isonb ($isonbname) boot environment.\n";
        my $highbe = highestbe();
        if ($isonb < $highbe) {
            $umsg .= "Do you want to discard and redo the later installation stages you already had done?\n";
        } else {
            $umsg .= "Do you want to discard the default boot environment and restore the environment that was created when you finished the SkunkOS $isonbname installation stage?\n";
        }
        if ( not yesno( 
                "$bootie_backtitleheader: Reconfiguration stage",
                'Reconfigure installation/boot environment',
                $umsg,
                '15 72'))
        {
            print "Okay, then there is nothing to do.\n";
            exit 0;
        }
        # Make the current BE the default BE.
        my $mybe = getbename();
        # First activate current BE.
        $cmd .= "bectl activate $mybe\n";
        # After that 'default' BE can be deleted and current BE being duped.
        $cmd .= "bectl destroy default\n";
        $cmd .= "bectl rename $mybe default\n";
        $cmd .= "bectl create $mybe\n";
        # Make sure later stage BEs are deleted, so installation can be repeated.
        if ($isonb < $highbe) {
            for (my $i = $isonb + 1; $i <= $highbe; $i++) {
                $cmd .= "bectl destroy $installbes[$i]\n";
            }
        }
        executer( $cmd);
        $cmd = '';
    }
}


################################################################
####################################
####################################     install stage functions
####################################
################################################################

sub do_skunkosbaseinstall
{
   # create user if not yet done
    if (not defined $user1001) {
        checkuser1001(1);
        # verify user creation succeeded
        die "User creation failed!\n" if (not defined $user1001);
    }
    
    $cmd = '';
    if (defined $user1001) {
        print "USER 1001: '$user1001'\n";
        # add to wheel and operator
        $cmd .= "pw groupmod -n wheel -m $user1001\n";
        $cmd .= "pw groupmod -n operator -m $user1001\n";
    }

    executer($cmd);
    $cmd = '';

    my $kmsg = '';

    # TODO 
    # maybe skip build on laptops with Intel/AMD GPU and old vesa.ko-dependent freedesktop drivers?
    # in this case a new kernel might be not necessary, and a lengthy build could be skipped
    my $buildkernel = 0;
    if ($system_isuefi) {
        # suspend/resume only works with vt+kms, custom kernel 
        # doesn't improve anything until vt is able to use custom colors
        $kmsg = 'This is an UEFI system. For UEFI systems there is no disadvantage in using the stock FreeBSD kernel. So, to speed up the SkunkOS installation, you can skip building a new kernel.\n';
    } else {
        # if it has Intel/AMD KMS graphics, new kernel is of no use
        # only in case of Nvidia Optimus, but as I have no idea how 
        # to deal with that yet, skip kernel build here, too.

        my $finalmsg = '';
        my $kldcmd = '';
        my $usecons = '';
        autodetectautoconfigure(\$finalmsg, \$cmd, \$kldcmd, \$usecons);
        my $numbervgas = scalar @vgas;
        if ($numbervgas == 1) {
            # only one vga
            if ( ${$vga}{$bootvga}{$key_vendorid} eq $pcivendor_intel or
                    ${$vga}{$bootvga}{$key_vendorid} eq $pcivendor_atiamd) 
            {
                $kmsg = 'This system has a graphics adapter made by the Intel/AMD oligopoly. So there is no disadvantage in using the stock FreeBSD kernel. So, to speed up the SkunkOS installation, you can skip building a new kernel.\n';
            } else {
                if ($zzz_supported and 
                        ${$vga}{$bootvga}{$key_vendorid} eq $pcivendor_nvidia) {
                    my $drvno = ${$vga}{$bootvga}{$key_usedrivernr};
                    if ( ${$vga}{$bootvga}{$drvno}{$key_udrivershort} ne 'nv') {
                        $kmsg = 'This system has a modern Nvidia graphics adapter.\nIf you use the stock FreeBSD kernel, suspend/resume will not work. So it is recommended to build a new kernel to make suspend/resume work.\n';
                        $buildkernel = 1;
                    }
                }
            }
        } else {
            # multiple graphics cards
            if ($zzz_supported) {
                # If the graphics cards are modern Nvidia, we need to build kernel.
                my $i;
                for ( $i = 0; $i < $numbervgas; ++$i) {
                    if (${$vga}{"$i"}{$key_vendorid} eq $pcivendor_nvidia) {
                        my $drvno = ${$vga}{"$i"}{$key_usedrivernr};
                        if ( ${$vga}{"$i"}{$drvno}{$key_udrivershort} ne 'nv') {
                            $kmsg = 'This system has a modern Nvidia graphics adapter.\nIf you use the stock FreeBSD kernel, suspend/resume will not work. So it is recommended to build a new kernel to make suspend/resume work.\n';
                            $buildkernel = 1;
                        }
                    }
                }
            }
        }
    }
    if (not $buildkernel) {
        if ($kmsg eq '') {
            $kmsg .= 'For your graphics hardware there is no disadvantage in using the stock kernel. So, to speed up the SkunkOS installation, you can skip building a new kernel.\n';
        }
    }

    $kmsg .= '\nDo you want to build a kernel' .
                (($buildkernel)
                    ? '?'
                    : ' anyway?');
    
    $buildkernel = 
        yesno( 
            '$bootie_backtitleheader: Base build stage',
            'Build notification message',
            $kmsg,
            '15 72');

    $kmsg = ($buildkernel)
                ? 'The kernel will be built.\n'
                : '';
    if (not $enable_skipapachebuild) {
        $kmsg .= 'The Apache webserver patched for the system management web interface will be built, as the packaged version cannot access the system on root level.\n';
    }

    $kmsg .= '\nDepending on the speed of your computer this can take a few minutes (modern multi-core processor, plenty of RAM, SSD) to many hours (ancient single-core CPU, little RAM and slow HDD).\n\nYou will see the build process is finished when the next installation dialog screen with its blue background appears. Then the installation can continue.\n\n';

    if ($buildkernel or not $enable_skipapachebuild) {
        msgbox( 
            '$bootie_backtitleheader: Base build stage',
            'Build notification message',
            $kmsg . 'Please hit "Enter" to proceed with the build process.',
            '15 72');

        ##############################
        # install ports
        # see   https://docs.freebsd.org/en/books/handbook/ports/#ports-using
        $cmd .= "portsnap fetch\n";
        $cmd .= "portsnap extract\n";
        $cmd .= "portsnap update\n";
        
        # get kernel sources
        $cmd .= "[0 1]rm -r /usr/src/*\n";
        $cmd .= "[0 1]rm -r /usr/src/.*\n";

        $cmd .= "$pkginst git\n";
        $cmd .= "git clone -b releng/$fbsd_major.$fbsd_minor --depth 1 https://git.freebsd.org/src.git /usr/src\n";

        if (not $enable_skipapachebuild) {
            buildapache();
            configapache();
        }

        if ($buildkernel) {
            $cmd .= "$writeskunkoskernconf\n";
            $cmd .= "cd /usr/src\n";
            $cmd .= "make buildkernel -j$threadstocompilewith KERNCONF=SKUNKOS\n";
        # TODO can -j be used with installkernel at all?
        #         $cmd .= "make installkernel -j$threadstocompilewith KERNCONF=SKUNKOS\n";
            $cmd .= "make installkernel KERNCONF=SKUNKOS\n";
        }
        executer( $cmd);
        $cmd = '';
    }
    
    # add some essential apps that should be in every console-only system
    $cmd .= "$pkginst smartmontools\n";
    # smartmontools-7.2_3:
    # On install:
    # smartmontools has been installed
    # 
    # To check the status of drives, use the following:
    # 
    #         /usr/local/sbin/smartctl -a /dev/ad0    for first ATA/SATA drive
    #         /usr/local/sbin/smartctl -a /dev/da0    for first SCSI drive
    #         /usr/local/sbin/smartctl -a /dev/ada0   for first SATA drive
    # 
    # To include drive health information in your daily status reports,
    # add a line like the following to /etc/periodic.conf:
    #         daily_status_smart_devices="/dev/ad0 /dev/da0"
    # substituting the appropriate device names for your SMART-capable disks.
    # 
    # To enable drive monitoring, you can use /usr/local/sbin/smartd.
    # A sample configuration file has been installed as
    # /usr/local/etc/smartd.conf.sample
    # Copy this file to /usr/local/etc/smartd.conf and edit appropriately
    # 
    # To have smartd start at boot
    #         echo 'smartd_enable="YES"' >> /etc/rc.conf
    # TODO find some good things to watch for;
    #   - temperature high -> often caused by fan failures, with bad consequences
    #   - make sure no cd drives are being scanned
    #   - alert when drives show changes potentially hinting on impending death
    #   - alert when drives went bad, so users check their zpool status
    #   - maybe make drive autodetection to explicitly check for installed HDDs

    # TODO add kernel hack for hybrid VGA BIOS CSM part
    # reinitialization to remove the fscking UEFI garbage's
    # video mode limitations
    
    my $msg = '';
    my $kmscmd = '';
    my $kldcmd = '';
    my $usecons = '';
    autodetectautoconfigure(\$msg, \$kmscmd, \$kldcmd, \$usecons);
    makesuspresumeforcons();

    # finally, clean up dependencies
    $cmd .= "env ASSUME_ALWAYS_YES=YES pkg autoremove\n";
    
    # enable moused - it is not only needed for PS/2 mice,
    # as some USB mice configurations only work in console
    # if moused is running
    $cmd .= "$sysmod $f_rc_conf moused_enable=YES double\n";
    
    # make sure display does not suddenly disappear :P
    catchkmssurprise();
    
    # any reason not to enable powerd? TODO maybe add dialog
    $cmd .= "$sysmod $f_rc_conf powerd_enable=YES double\n";
    
    $cmd .= "bectl create $SkunkOSBaseInstall\n";
    
    # land user where he/she/it belongs :)
    $cmd .= "cd /root\n";
    
    executer($cmd);
    $cmd = '';

    # ask whether one wants to install xorg
    # console-only installations stop here
    if ( yesno( 
            "$bootie_backtitleheader: Configuration stage",
            'Base system installation finished',
            'SkunkOS Base system has been installed.\n' . $msg . '\nDo you want to install X Window now?\nThen just hit "Enter". Otherwise, if you want this to be a console-only computer, please select "No".',
            '15 72')) {
        # yes to xorg, go on with install
        
        # clearing should not be necessary, but anyway...
        $kmssurprise = undef;
        # activate xorg install option in case user only gave option -i
        $opt_installxorg = 1;
    } else {
        if (not $enable_skipapachebuild) {
            # after Apache is installed, it must be started
            # check whether apache is still running from a former bootie run
            # if so, skip the onestart
            my $psa = `ps ax`;
            if ($psa =~ /\/usr\/local\/sbin\/httpd/s) {
                logconsole "Apache seems to run already (maybe from a previous $myname run?), so not starting it\n";
            } else {
                $cmd .= "service apache24 onestart\n";
                executer($cmd);
                $cmd = '';
            }
        }
        my $finalmsg = '';
        if ($zzz_supported and $usecons ne $runningconsole) {
            $finalmsg .= "To switch from the currently-running $runningconsole to $usecons console, please reboot, otherwise suspend/resume cannot work.\n"
        }
        print "\nSkunkOS Console Base Installation finished.\n" . $finalmsg;
        exit 0;
    }
}

sub addpkgcmd
{
    my $pkgstr = shift;
    
    $pkgstr =~ s/\n/ /sg;
    $pkgstr =~ s/^\s*(.*?)\s*$/$1/sg;
    my @pkglist = split( '\s+', $pkgstr);
    foreach (@pkglist) {
        $cmd .= "$pkginst $_\n";
    }
}

sub do_skunkosxinstall
{
    if (not defined $opt_installxorg) {
        print "The base installation has already been finished.\n";
        print "If you want to install the graphical interface (Xorg+WM/DM),\n";
        print "please run '$myname -x'.\n";
        exit 0;
    }

    #################################### xorg configuration questionnaire
    my $userok = 0;

    my $selkbdmap;
    my $defkbdmap = 'us';
    my $selkbdmapstr;
    my %selectdewms;
    my %selecteddewmlist;
    my $primarydewm;
    my %selectapps;

    do {
        #################################### kbd configuration
        
        getradioform (
            \%kbdlangs,
            \@kbdlangseq,
            "$bootie_backtitleheader: X Keyboard configuration stage",
            'X Keyboard layout selection',
            'Please choose the X keyboard layout you want to be enabled by default.\nUse the arrow up/down keys to move between fields. Hit the space bar to choose a layout. Then hit "Enter" when you have made your choice.\n\n(Note: You can edit your .xinitrc file to change your choice later.)',
            '19 80 14',
            \$selkbdmap,
            \$defkbdmap);

        $selkbdmapstr = $xkbmaps{$selkbdmap};
        
        #################################### questionnaire for DE/WM
        
        do {
            getcheckform (
                \%dewmlist,
                \@dewmseq,
                "$bootie_backtitleheader: DE/WM selection stage",
                'DE/WM selection',
                'Choose the desktop environments/window managers you want to install.\nRecommendation:\nInstall FVWM together with KDE for its good apps which you can use from FVWM too!',
                '15 80 8',
                \%selectdewms,
                \%dewmlistenable);
                
                # TODO maybe there should be a notification instead of just 
                # repeating questionnaire if the user deselects all
        } while ( not scalar keys %selectdewms);
            
        foreach (keys %selectdewms) {
            $selecteddewmlist {$_} = $dewmlist {$_};
        }
        
        my $dewmcount = 0;
        my $defaultprimarydewm;
        foreach (@dewmseq) {
            if (exists $selectdewms {$_} ) {
                if (not $dewmcount) {
                    $defaultprimarydewm = $_;
                }
                ++$dewmcount;
            }
        }
        if ($dewmcount > 1) {
            my $fvwm = '';
            # always recommend the best, FVWM :)
            if (exists $selecteddewmlist {'FVWM'}) {
                $fvwm = '\nRecommendation:\nGive FVWM a try! You might like the unique Meow+Purr menu!\n';
            }
            getradioform (
                \%selecteddewmlist,
                \@dewmseq,
                "$bootie_backtitleheader: DE/WM selection stage",
                'DE/WM selection',
                'Please choose the desktop environment/window manager you want to be enabled by default.\n' . $fvwm . '\nYou can edit (comment/uncomment) your .xinitrc to change your choice later.',
                '19 80 5',
                \$primarydewm,
                \$defaultprimarydewm);
        } else {
            $primarydewm = $defaultprimarydewm;
        }
            
        #################################### questionnaire for apps
        
        getcheckform (
            \%applist,
            \@appseq,
            "$bootie_backtitleheader: App selection stage",
            'App selection',
            'Please choose the applications you want to install',
            '21 80 16',
            \%selectapps,
            undef,
            'off');

        #################################### final confirmation
            
        $userok = yesno( 
                "$bootie_backtitleheader: Xorg installation stage",
                'Xorg installation confirmation',
                'Please hit "Enter" to start the installation of X Window and the applications you selected.\nOtherwise, choose "No" to go back and make changes to your choices.\n\nNotice: Please be patient while the computer installs your selections. Depending on your selections, your computers and your internet connections speed, this can take from minutes to hours.',
                '15 72');

    } while (not $userok);

    #################################### actual installation start

    $cmd .= "$pkginst xorg\n";

    # several apps note that the default buffer size on FreeBSD are too small
    $cmd .= "$sysmod $f_sysctl_conf net.local.stream.recvspace=65536 none\n";
    $cmd .= "$sysmod $f_sysctl_conf net.local.stream.sendspace=65536 none\n";
    $cmd .= "sysctl net.local.stream.recvspace=65536\n";
    $cmd .= "sysctl net.local.stream.sendspace=65536\n";

    # TODO look in $dmesgboot for synaptics and such:
# xorg-server-1.20.13,1:
# On install:
# Xorg-server has been installed.
# 
# If your kernel is compiled with the EVDEV_SUPPORT option enabled
# (default starting from FreeBSD 12.1) it is recommended to enable evdev mode in
# pointer device drivers like ums(4) and psm(4). This will give improvements like
# better tilt wheel support for mice and centralized gesture support via
# xf86-input-synaptics or libinput drivers for touchpads.
# 
# This is also needed for PS/2 devices to be properly detected by Xorg when
# moused service is disabled in /etc/rc.conf and kernel is compiled with
# EVDEV_SUPPORT.
# 
# To enable evdev in such a device, run the following:
# 
# # sysctl kern.evdev.rcpt_mask=6
# 
# To make it persistent across reboots, add the following to /etc/sysctl.conf:
# 
# kern.evdev.rcpt_mask=6
# 
# In case you're using a serial mouse or any other mouse that *only* works over
# sysmouse(4) and moused(8) on an evdev enabled kernel, please run this:
# 
# # sysctl kern.evdev.rcpt_mask=3
# 
# To make it persistent across reboots, add to this /etc/sysctl.conf:
# 
# kern.evdev.rcpt_mask=3

    
    #################################### fonts section

    # Credit goes to Jason Bacon, too, as I ruthlessly have taken some items
    # from his lists of useful apps to install from his desktop-installer.
    # https://github.com/outpaddling/desktop-installer/blob/master/desktop-installer

    # fonts useful for having less ugly PDF printouts, etc
    my $fontlist = 
    'x11-fonts/bitstream-vera
    x11-fonts/liberation-fonts-ttf 
    x11-fonts/fira 
    x11-fonts/droid-fonts-ttf
    x11-fonts/liberation-fonts-ttf
    x11-fonts/webfonts
    ';
    addpkgcmd( $fontlist);

    # essential xorg stuff
    $cmd .= "$pkginst cups\n";
    $cmd .= "$sysmod $f_rc_conf cupsd_enable=YES double\n";
    

    #################################### DE/WM installation
    if (exists $selectdewms{ 'FVWM'}) {
        # TODO there should maybe be a questionnaire for fvwm configs as well?
        $cmd .= "mkdir -p $user1001home/.fvwm/meow\n";
        $cmd .= "$pkginst fvwm3\n";
        # download Meow&Purr
        $cmd .= "fetch https://raw.githubusercontent.com/SkunkOS/SkunkInstall/main/.fvwm/config -o $user1001home/.fvwm\n";
        $cmd .= "fetch https://raw.githubusercontent.com/SkunkOS/SkunkInstall/main/.fvwm/config.IconMan -o $user1001home/.fvwm\n";
        $cmd .= "fetch https://raw.githubusercontent.com/SkunkOS/SkunkInstall/main/.fvwm/config.basicfns -o $user1001home/.fvwm\n";
        $cmd .= "fetch https://raw.githubusercontent.com/SkunkOS/SkunkInstall/main/.fvwm/config.bindings -o $user1001home/.fvwm\n";
        $cmd .= "fetch https://raw.githubusercontent.com/SkunkOS/SkunkInstall/main/.fvwm/config.colorsets -o $user1001home/.fvwm\n";
        $cmd .= "fetch https://raw.githubusercontent.com/SkunkOS/SkunkInstall/main/.fvwm/config.menus -o $user1001home/.fvwm\n";
        $cmd .= "fetch https://raw.githubusercontent.com/SkunkOS/SkunkInstall/main/.fvwm/meow/allMimeTypes.txt -o $user1001home/.fvwm/meow\n";
        $cmd .= "fetch https://raw.githubusercontent.com/SkunkOS/SkunkInstall/main/.fvwm/meow/appcats.conf -o $user1001home/.fvwm/meow\n";
        $cmd .= "fetch https://raw.githubusercontent.com/SkunkOS/SkunkInstall/main/.fvwm/meow/categories.conf -o $user1001home/.fvwm/meow\n";
        $cmd .= "fetch https://raw.githubusercontent.com/SkunkOS/SkunkInstall/main/.fvwm/meow/meow.pl -o $user1001home/.fvwm/meow\n";
        $cmd .= "fetch https://raw.githubusercontent.com/SkunkOS/SkunkInstall/main/.fvwm/meow/meowcats.conf -o $user1001home/.fvwm/meow\n";
        $cmd .= "fetch https://raw.githubusercontent.com/SkunkOS/SkunkInstall/main/.fvwm/meow/meowconfig.conf -o $user1001home/.fvwm/meow\n";
        $cmd .= "fetch https://raw.githubusercontent.com/SkunkOS/SkunkInstall/main/.fvwm/meow/meowint.conf -o $user1001home/.fvwm/meow\n";
        $cmd .= "fetch https://raw.githubusercontent.com/SkunkOS/SkunkInstall/main/.fvwm/meow/purr.pl -o $user1001home/.fvwm/meow\n";
        $cmd .= "chown -R 1001:1001 $user1001home/.fvwm\n";
        $cmd .= "chmod u+x $user1001home/.fvwm/meow/meow.pl\n";
        $cmd .= "chmod u+x $user1001home/.fvwm/meow/purr.pl\n";
    }

    
    if (exists $selectdewms{ 'KDE'}) {
        $cmd .= "$pkginst kde5\n";
        # hald is deprecated but nonetheless still kind of essential
        # no longer there ?!?
#         $cmd .= "$sysmod $f_rc_conf hald_enable=YES double\n";
        # KDE hangs with black screen if no dbus...
        $cmd .= "$sysmod $f_rc_conf dbus_enable=YES double\n";
        $cmd .= "[0 1]service dbus onestart\n";
        # KDE package installation notes instruct to increase buffer size,
        # because the default is too small on FreeBSD
        
        # Solid has UDisks2 backend turned on by default. If you want to use it, install
        # sysutils/bsdisks package and **disable** hald (set hald_enable="NO" in rc.conf or
        # just remove the package). If you want to stay with hald, don't install bsdisks, as
        # you'll get duplicated entries for removable disks.
        $cmd .= "$pkginst sysutils/bsdisks\n";
        
        # ark-21.12.1_1:
        # On install:
        # Support for 7zip and rar archives requires the appropriate executables.
        # If ark has been packaged without options 7ZIP or RAR, you can install
        # archivers/p7zip (for 7ZIP) or archivers/unrar and archivers/rar (for RAR)
        # to allow ark to handle those archives.
        $cmd .= "$pkginst archivers/rar\n";
        # TODO check:
        # p7zip-16.02_3:
        # This port is deprecated; you may wish to reconsider installing it:
        # 
        # Unmaintained for years and has known vulnerabilities.
        # 
        # It is scheduled to be removed on or after 2022-01-01.
        $cmd .= "$pkginst archivers/p7zip\n";
        # to access Windows CABinet files
        $cmd .= "$pkginst archivers/cabextract\n";
        
        # from Jason: packages useful for KDE
        addpkgcmd( 'multimedia/transcode x11-themes/plasma5-kde-gtk-config');
    }
    

    if (exists $selectdewms{ 'Gnome'}) {
        $cmd .= "$pkginst x11/gnome\n";
        $cmd .= "$installprocfs\n";
        
        # TODO ? I read Gnome wants GDM to be installed also?!?
        # If so, it sucks balls even more than I thought...
#         $cmd .= "$pkginst x11/gdm\n";
        $cmd .= "$sysmod $f_rc_conf gdm_enable=NO double";
        $cmd .= "$sysmod $f_rc_conf gnome_enable=YES double";
    }
    
    if (exists $selectdewms{ 'Mate'}) {
        $cmd .= "$pkginst x11/mate\n";
        # seems not to be needed with Gnome2+clones?
#         $cmd .= "$installprocfs\n";
    }

    
    if (exists $selectdewms{ 'XFCE'}) {
        $cmd .= "$pkginst x11/xfce\n";

        # from Jason: packages useful for XFCE
        my $xfce_pkgs = 'math/galculator sysutils/xfburn x11/xlockmore x11/xfce4-screensaver graphics/ristretto sysutils/xfce4-power-manager sysutils/xfce4-wavelan-plugin misc/xfce4-wm-themes graphics/evince';
        addpkgcmd( $xfce_pkgs);
    }

    
    #################################### app installation

    
    # TODO set up different installation sets for different DE/WM
    #     if ($enable_installkde) {
    if (exists $selectapps{ 'k3b'}) {
        
        # K3B install/config start
        $cmd .= "$pkginst k3b\n";      # KDE CD/DVD writing suite
        # get ids of optical drives for getting the permissions right
        my @optdids = ();       # list of optical drive ids
        my @passids = ();       # list of used pass devices
        # TODO does error check make sense?
        my $camc = `camcontrol devlist`;
        my @camclines = split( "\n", $camc);
        foreach (@camclines) {
            # this is the FreeBSD 12 ordering
            (my $ncd, my $npass) = $_ =~ /.*\(cd(\d+),pass(\d+)\)$/;
            if (defined $ncd and defined $npass) {
                push @optdids, $ncd;
                push @passids, $npass;
            } else {
                # this is the FreeBSD 13+ ordering
                (my $npass, my $ncd) = $_ =~ /.*\(pass(\d+),cd(\d+)\)$/;
                if (defined $ncd and defined $npass) {
                    push @optdids, $ncd;
                    push @passids, $npass;
                }
            }
        }
        # TODO add k3b permissions
        # k3b has to be started from a root console, which is not recommended.
        # Alternatively, do ALL of the following:
        # a. Set the suid flag on cdrecord and cdrdao. The 'Notes' chapter of
        #    'man cdrecord' discusses this.
        $cmd .= "chown root /usr/local/bin/cdrecord\n";
        $cmd .= "chgrp operator /usr/local/bin/cdrecord\n";
        $cmd .= "chmod 4711 /usr/local/bin/cdrecord\n";
        # b. Set the vfs.usermount sysctl variable to 1.
        $cmd .= "sysctl vfs.usermount=1\n";
        # Add the line vfs.usermount=1 to /etc/sysctl.conf
        # Note that this has negative security implications
        $cmd .= "$sysmod /etc/sysctl.conf vfs.usermount=1 none\n";
        # c. Every user must have read and write access to /dev/cdX:
        #    - add to your /etc/devfs.rules under '[system=10]':
        #      add path 'cd*' mode 666
        #    - or if you prefer allow access for a group XXX only add instead:
        #      add path 'cd*' mode 660 group XXX
        foreach (@optdids) {
            $cmd .= "$modini $f_devfs_rules '[system=10]add path 'cd$_' mode 660 group operator'\n";
        }
        #    - to enable it, add to your $f_rc_conf 
        #      devfs_system_ruleset="system"
        $cmd .= "$sysmod $f_rc_conf devfs_system_ruleset=system double\n";
        # d. Every user who should be able to use k3b must have read and write access
        #    to all pass through devices connected with CD and DVD drives and to the
        #    /dev/xpt0 device. Run 'camcontrol devlist' to identify those devices (seek
        #    string 'passX' at the end of each line). Note, that this is a security
        #    leak as well but that there is no alternative!
        #
        #    - add to your /etc/devfs.rules under '[system=10]':
        #        add path 'pass*' mode 666
        #        add path 'xpt0' mode 666
        #    - or if you prefer allow access for a group XXX only add instead:
        #        add path 'pass*' mode 660 group XXX
        #        add path 'xpt0' mode 660 group XXX
        #    - to enable it, add to your $f_rc_conf
        #        devfs_system_ruleset="system"
        $cmd .= "$modini $f_devfs_rules '[system=10]add path 'xpt0' mode 660 group operator'\n";
        foreach (@passids) {
            $cmd .= "$modini $f_devfs_rules '[system=10]add path 'pass$_' mode 660 group operator'\n";
        }
        #   - to apply these changes without reboot, run as root:
        #     /etc/rc.d/devfs restart
        $cmd .= "/etc/rc.d/devfs restart\n";
        # 3. Check, that DMA is activated for atapi devices: 'sysctl hw.ata.atapi_dma'
        #    If not, set it to 1 and put 'hw.ata.atapi_dma=1' into /boot/loader.conf.
        $cmd .= "$sysmod $f_boot_loader_conf hw.ata.atapi_dma=1 double\n";
        # K3B install/config end
    }
        
    # virtualbox
    if (exists $selectapps{ 'virtualbox'}) {
        $cmd .= "$pkginst virtualbox-ose\n";
        # additions should be loaded in the video configuration section:
        #   $cmd .= "$pkginst virtualbox-ose-additions\n";
        $cmd .= "$sysmod $f_boot_loader_conf vboxdrv_load=YES double\n";
        $cmd .= "$sysmod $f_rc_conf vboxnet_enable=YES double\n";
        $cmd .= "$sysmod $f_rc_conf devfs_system_ruleset=system double\n";
        $cmd .= "pw groupmod operator -m $user1001\n";
        $cmd .= "pw groupmod vboxusers -m $user1001\n";
        
        $cmd .= "$modini $f_devfs_rules '[system=10]add path 'usb/*' mode 0660 group operator'\n";
        my $addevfsconf = 
q|own     vboxnetctl root:vboxusers
perm    vboxnetctl 0660
perm cd* 0660
perm xpt0 0660
perm pass* 0660
|;
        die if append_a_file( '$f_devfs_conf', \$addevfsconf);
        $cmd .= "/etc/rc.d/devfs restart\n";
        
        # regarding HALD, which has been removed from FreeBSD
        # the handbook for virtualization 
        # https://docs.freebsd.org/en/books/handbook/virtualization/#virtualization-host-virtualbox
        # still states in section
        # 22.5.3. VirtualBox™ Host DVD/CD Access
        # that hald is necessary to allow vbox clients access to optical media
        # No idea whether this is still valid
        # but as there is no hald anymore, any referencing it results in error
        # so disabling it:
        
#         $cmd .= "$sysmod $f_rc_conf hald_enable=YES double\n";
#         $cmd .= "service hald start\n";

        # activate (runonce) - also needed for chown/chmod below,
        # as /dev/vboxnetctl is being created by vboxnetadp.ko
        $cmd .= "kldload vboxdrv\n";
        $cmd .= "kldload vboxnetadp\n";
        
        $cmd .= "chown root:vboxusers /dev/vboxnetctl\n";
        $cmd .= "chmod 0660 /dev/vboxnetctl\n";

    }
        
    # user chosen standard apps
    
    if (exists $selectapps{ 'gimp'}) {
        $cmd .= "$pkginst gimp\n";                 # The "meta-port" for The Gimp
    }
    if (exists $selectapps{ 'krita'}) {
        $cmd .= "$pkginst krita\n";                 # The "meta-port" for The Gimp
    }
    if (exists $selectapps{ 'inkscape'}) {
        $cmd .= "$pkginst inkscape\n";                 # Full featured open source SVG editor
    }
    if (exists $selectapps{ 'freeplane'}) {
        $cmd .= "$pkginst freeplane\n";                 # Free mind mapping and knowledge management software
    }
    if (exists $selectapps{ 'libreoffice'}) {
        $cmd .= "$pkginst libreoffice\n";          # Full integrated office productivity suite
        
        # from Jason:
        # To enable spell checking in libreoffice, 
        # you will need the hunspell dictionaries for your 
        # language, e.g. en-hunspell for English.
        # TODO: questionnaire
    }
    if (exists $selectapps{ 'firefox_esr'}) {
        $cmd .= "$pkginst firefox-esr\n";          # Web browser based on the browser portion of Mozilla
    }
    if (exists $selectapps{ 'chromium'}) {
        $cmd .= "$pkginst chromium\n";             # Google web browser based on WebKit
        # TODO from Jason - still needed?
        $cmd .= "$sysmod $f_sysctl_conf kern.ipc.shm_allow_removed=1 none\n";
    }
    if (exists $selectapps{ 'midori'}) {
        $cmd .= "$pkginst midori\n";               # Lightweight web browser using WebKit browser engine
    }
    if (exists $selectapps{ 'pidgin'}) {
        $cmd .= "$pkginst pidgin\n";               # Pidgin multi-protocol messaging client (GTK+ UI)
    }
    if (exists $selectapps{ 'telegram'}) {
        $cmd .= "$pkginst telegram-desktop\n";     # Telegram Desktop messaging app
    }
    if (exists $selectapps{ 'thunderbird'}) {
        $cmd .= "$pkginst thunderbird\n";          # Mozilla Thunderbird is standalone mail and news that stands above
    }
    if (exists $selectapps{ 'vlc'}) {
        $cmd .= "$pkginst vlc\n";                  # Qt based multimedia player and streaming server
    }
    if (exists $selectapps{ 'ssr'}) {
        $cmd .= "$pkginst simplescreenrecorder\n"; # Screen video recorder
    }
    if (exists $selectapps{ 'kdenlive'}) {
        $cmd .= "$pkginst kdenlive\n";             # KDE professional quality non-linear video editing suite
    }
    if (exists $selectapps{ 'openshot'}) {
        $cmd .= "$pkginst openshot\n";             # OpenShot Video Editor
    }
    if (exists $selectapps{ 'shotcut'}) {
        $cmd .= "$pkginst shotcut\n";              # Free, open source, cross-platform video editor
    }
    
    # check whether the configuration web browser is not yet being installed
    if (not $enable_skipapachebuild) {
        if (not exists $selectapps{ $option_configbrowser}) {
            # we must make sure that there is a browser
            # install midori anyway even if user didn't know he needs it
            $cmd .= "$pkginst $option_configbrowser\n";
        }
    }

    
# TODO XXX:    
    
#     blinken-21.12.1:
#     On install:
#     To play Blinken you need sound. You must install a Phonon backend (just 
#     once) to enable sound, one of:
#     multimedia/phonon-gstreamer
#     multimedia/phonon-vlc

    
# TODO
# dragon-player-21.12.1:
# On install:
# To be able to play audio and video streams with Phonon-GStreamer,
# you'll need to have the appropriate GStreamer plugins installed.
# multimedia/gstreamer-plugins-core will install a standard set, while
# multimedia/gstreamer-plugins-all will let you choose among all of
# them.


# TODO
# gamin-0.1.10_10:
# On install:
# Gamin will only provide realtime notification of changes for at most n files,
# where n is the minimum value between (kern.maxfiles * 0.7) and
# (kern.maxfilesperproc - 200). Beyond that limit, files will be polled.
# 
# If you often open several large folders with Nautilus, you might want to
# increase the kern.maxfiles tunable (you do not need to set
# kern.maxfilesperproc, since it is computed at boot time from kern.maxfiles).
# 
# The behavior of gamin can be controlled via the various gaminrc files.
# See http://www.gnome.org/~veillard/gamin/config.html on how to create
# these files.  In particular, if you find gam_server is taking up too much
# CPU time polling for changes, something like the following may help
# in one of the gaminrc files:
# 
# # reduce polling frequency to once per 10 seconds
# # for UFS file systems in order to lower CPU load
# fsset ufs poll 10


# TODO
# ghostscript9-agpl-base-9.52_20:
# On install:
# This package installs a script named dvipdf that depends on dvips.  If you
# want to use this script you need to install print/tex-dvipsk.


# TODO
# gnupg-2.3.3_2:
# On install:
# When run on hosts without IPv6 connectivity, GnuPG may fail to connect to
# dual-stack hkp servers [1]. As a workaround, add:
# 
# disable-ipv6
# 
# to:
# 
# /usr/local/etc/dirmngr.conf
# 
# [1] https://dev.gnupg.org/rGecfc4db3a2f8bc2652ba4ac4de5ca1cd13bfcbec
    
    
# TODO
# groff-1.22.4_4:
# On install:
# In order to be able to use the html driver, you need to install the following
# packages:
#  - ghostscript
#  - netpbm
    
# TODO
# jackit-1.9.16_1:
# On install:
# ======================================================================
# It is recommended to run Jack with real-time priority. As FreeBSD doesn't
# allow unprivileged users to set real-time priority, you should do it manually
# with rtprio(1). As this port comes with jackd and jackdbus executables, note
# that only one can be used.
# 
# Configure backend options using jack_control:
# $ jack_control ds oss
# $ jack_control eps realtime False
# $ jack_control eps sync True
# 
# Configure memory locking editing either /etc/login.conf or ~/.login_conf with:
# :memorylocked=unlimited:
# 
# After every change to login.conf, you should execute:
# cap_mkdb /etc/login.conf
# 
# There are two ways to start jack:
# * via dbus (new executable: jackdbus)
# * as rc service (classic executable: jackd)
# 
# - Starting via DBUS:
# $ jack_control start
# 
# - Starting as RC service:
# add the following lines to /etc/rc.conf:
# jackd_enable="YES"
# jackd_user="{your-jack-user}"
# jackd_rtprio="YES"
# jackd_args="-R -doss -r{sample-rate} -p1024 -n3 -w16 \
#             --capture /dev/dsp{N} --playback /dev/dsp{N}"
# 
# Where:
# - your-jack-user: is the user who is going to use jack; currently
#                   only one user is supported
# - sample-rate: can be 44100, 48000, etc.
# - /dev/dsp{N}: your OSS devices, usually /dev/dsp0
# ======================================================================

    
# libburn-1.5.4:
# On install:
# You will need to enable CAM support in the kernel.  Your kernel
# configuation should include:
#     for SCSI CD/DVD devices:
#         device scbus
#         device cd
#         device pass
#     for ATA CD/DVD devices you will need the above, plus:
#         device atapicam
# 
# You will also want to make the CD devices world read- and writable.
# In /etc/devfs.rules, add the following:
#         [system=10]
#         add path 'acd*' mode 0666
#         add path 'cd*' mode 0666
#         add path 'pass*' mode 0666
#         add path 'xpt*' mode 0666
        
        
# TODO
# libgtop-2.40.0:
# On install:
# In order to use the File System read/write monitor, you must chmod
# /dev/devstat so that all users can open it read-only.  For example:
# 
# # chmod 0444 /dev/devstat
# 
# In order for this to persist across reboots, add the following to
# /etc/devfs.conf:
# 
# perm    devstat 0444


# libxkbcommon-1.3.1:
# On install:
# If arrow keys don't work under X11 switch to legacy rules e.g.,
# 
# For sh/bash/ksh/zsh run and (optionally) add into ~/.profile:
#   export XKB_DEFAULT_RULES=xorg
# 
# For csh/tcsh run and (optionally) add into ~/.login:
#   setenv XKB_DEFAULT_RULES xorg


# TODO 
# mysql57-server-5.7.36:
# On install:
# Initial password for first time use of MySQL is saved in $HOME/.mysql_secret
# ie. when you want to use "mysql -u root -p" first you should see password
# in /root/.mysql_secret
# 
# MySQL57 has a default /usr/local/etc/mysql/my.cnf,
# remember to replace it with your own
# or set `mysql_optfile="$YOUR_CNF_FILE` in rc.conf.
# 
# On upgrade:
# Remember to run mysql_upgrade the first time you start the MySQL server
# after an upgrade from an earlier version.


# TODO 
# openjdk11-11.0.13+8.1:
# On install:
# This OpenJDK implementation requires fdescfs(5) mounted on /dev/fd and
# procfs(5) mounted on /proc.
# 
# If you have not done it yet, please do the following:
# 
#         mount -t fdescfs fdesc /dev/fd
#         mount -t procfs proc /proc
# 
# To make it permanent, you need the following lines in /etc/fstab:
# 
#         fdesc   /dev/fd         fdescfs         rw      0       0
#         proc    /proc           procfs          rw      0       0


# TODO 
# phonon-gstreamer-qt5-4.10.0_1:
# On install:
# You'll need to install some GStreamer plugins to make Phonon able to
# play something via this backend: multimedia/gstreamer1-plugins-all
# will let you choose among all of them.


# TODO 
# phonon-qt5-4.11.1:
# On install:
# Please, consider installing backends for Phonon:
# - multimedia/phonon-gstreamer   GStreamer backend
# - multimedia/phonon-vlc         VLC backend


# proj-7.2.1,1:
# On install:
# Since proj 7, datum grids are available from a CDN at https://cdn.proj.org and
# should either be fetched dynamically at runtime (disabled by default, cf
# https://proj.org/usage/network.html) or be fetched locally depending on your
# work area needs, using the projsync command. 
# 
# DATA option allows you to download all the data, but it requires more than 400mb!
# This option is disabled by default.
# 
# It is better to use the projsync command.
# 
# Use projsync --list-files to list the CDN content.
# 
# They can either by installed in the user homedir (under ~/.local/share/proj)
# 
# $ projsync --file fr_ign_ntf_r93.tif
# Downloading from https://cdn.proj.org into /home/user/.local/share/proj
# Total to download: 93581 bytes
# Downloading https://cdn.proj.org/fr_ign_ntf_r93.tif... (1 / 1)
# 
# or systemwide in the default PROJ_LIB dir (under /usr/local/share/proj, cf
# https://proj.org/resource_files.html)
# 
# # projsync --system-directory --file fr_ign_ntf_r93.tif
# Downloading from https://cdn.proj.org into /usr/local/share/proj
# Total to download: 93581 bytes
# Downloading https://cdn.proj.org/fr_ign_ntf_r93.tif... (1 / 1)
# 
# If not using the default, make sure to set PROJ_LIB environment variable
# accordingly.


# pulseaudio-14.2_3:
# On install:
# Pulseaudio tries to determine default values for FreeBSD OSS driver at first
# start, based on /dev/sndstat output. The hw.snd.default_unit sysctl may affect
# these values, but restart of the Pulseaudio might be needed to rescan it again,
# e.g. `pacmd exit`.
# 
# Pulseaudio has separate input and output configure lines. You can change them
# with using following commands:
# 
# To change the default sink (output):
# # pacmd set-default-sink 3
# To change the default source (input):
# # pacmd set-default-source 3
# 
# This can also be set in /usr/local/etc/pulse/default.pa
# 
# Replace the number '3' with the new default you want to set.
# 
# The audio/freedesktop-sound-theme is needed if the default sound files
# are uncommented in the /usr/local/etc/pulse/default.pa file.

    
# samba412-4.12.15_3:
# On install:
# How to start: http://wiki.samba.org/index.php/Samba4/HOWTO
# 
# * Your configuration is: /usr/local/etc/smb4.conf
# 
# * All the relevant databases are under: /var/db/samba4
# 
# * All the logs are under: /var/log/samba4
# 
# * Provisioning script is: /usr/local/bin/samba-tool
# 
# For additional documentation check: http://wiki.samba.org/index.php/Samba4
# 
# Bug reports should go to the: https://bugzilla.samba.org/

    
    # we need sudo to run startx as user
    $cmd .= "$pkginst sudo\n";
    $cmd .= "$sysmod /usr/local/etc/sudoers '$user1001 ALL = NOPASSWD: /usr/local/bin/xrandr /usr/sbin/acpiconf /usr/sbin/zzz' none\n";

    executer($cmd);
    $cmd = '';
    
    #################################### postconfiguration 
    # necessary for particular apps

# TODO
# sane-backends-1.1.1:
# On install:
# saned will log to the 'daemon' facility; this is a hard-coded
# default. Also, saned has no support for SSL/TLS or cryptographic
# authentication; you may wish to deploy security/stunnel to wrap
# it if you have concerns about security.
# 
# If you are using a USB scanner, you should create
# /usr/local/etc/devd/saned.conf to allow saned access permissions.
# Currently, devfs.rules(5) has no support for USB specific filters
# such as vendor, product and serial number.
# 
# Here is an example saned.conf for an Epson CX3650
# multi-function scanner/printer device (assuming you are sharing
# the printer function with cups):
# 
# notify 100 {
#         match "system" "USB";
#         match "subsystem" "INTERFACE";
#         match "type" "ATTACH";
#         match "cdev" "ugen[0-9].[0-9]";
#         match "vendor" "0x04b8";
#         match "product" "0x080e";
#         action "chown -L cups:saned /dev/$cdev && chmod -L 660 /dev/$cdev";
# };
# 
# To determine which port your scanner is connected to, inspect the
# output of 'usbconfig list' before and after connecting your scanner,
# and note the numbers which appear after 'ugen' in the first column.
# Then, use 'usbconfig -d X.Y dump_device_desc' to learn the idVendor
# and idProduct fields, and plug them into the above example entry.
# 
# Finally, restart devd with the command:
#  # /etc/rc.d/devd restart
# 
# Please take /usr/local/etc/sane.d/dll.conf
# as an example only; you may wish to enable only the 'net' backend
# on client machines; be sure to point it at your scan server.
# 
# If you are setting up a scan server, you may also wish to edit
# /usr/local/etc/sane.d/saned.conf
# to only permit specific machines.



# TODO
# trousers-0.3.14_3:
# On install:
# To run tcsd automatically, add the following line to /etc/rc.conf:
# 
# tcsd_enable="YES"
# 
# You might want to edit /usr/local/etc/tcsd.conf to reflect your setup.
# 
# If you want to use tcsd with software TPM emulator, use the following
# configuration in /etc/rc.conf:
# 
# tcsd_enable="YES"
# tcsd_mode="emulator"
# tpmd_enable="YES"
# 
# To use TPM, add your_account to '_tss' group like following:
# 
# # pw groupmod _tss -m your_account


# TODO
# wayland-1.20.0:
# On install:
# Wayland requires XDG_RUNTIME_DIR to be defined to a path that will
# contain "wayland-%d" unix(4) sockets. This is usually handled by
# consolekit2 (via ck-launch-session) or pam_xdg (via login).


# webcamd-5.17.1.0:
# On install:
# 1) webcamd requires the cuse(3) kernel module.
# Please load this dependency by doing:
# 
#        # kldload cuse
# 
# or by adding
# 
#        cuse_load="YES"
# 
# to your /boot/loader.conf
# 
# 2) add webcamd_enable="YES"
# 
# to your /etc/rc.conf
# 
# 3) Please restart devd to start webcamd
# 
#         # service devd restart
# 
# 4) Optionally add a user to the "webcamd" group
# 
#         # pw groupmod webcamd -m <username>
# 
# 5) If webcamd still did not start, consult the installed webcamd rc.d
# script for more help and instructions on how to start webcamd.

    if (-e '/usr/local/sbin/webcamd') {
        $cmd .= "pw groupmod webcamd -m $user1001\n";
        $cmd .= "$sysmod $f_boot_loader_conf cuse_load=YES double\n";
        $cmd .= "$sysmod $f_rc_conf webcamd_enable=YES double\n";
        $cmd .= "kldload cuse\n";
        $cmd .= "service devd restart\n";
    }

    
# TODO
# xfce4-session-4.16.0:
# On install:
# To be able to shutdown or reboot your system, you'll have to add .rules
# files in /usr/local/etc/polkit-1/rules.d directory. Which looks
# like this (replace PUTYOURGROUPHERE by your group):
# 
# polkit.addRule(function (action, subject) {
#   if ((action.id == "org.freedesktop.consolekit.system.restart" ||
#       action.id == "org.freedesktop.consolekit.system.stop")
#       && subject.isInGroup("PUTYOURGROUPHERE")) {
#     return polkit.Result.YES;
#   }
# });
# 
# For those who have working suspend/resume:
# 
# polkit.addRule(function (action, subject) {
#   if (action.id == "org.freedesktop.consolekit.system.suspend"
#       && subject.isInGroup("PUTYOURGROUPHERE")) {
#     return polkit.Result.YES;
#   }
# });
# 
# 
# This port installs a startup file for xscreensaver but it is
# disabled by default. This is so because the XFCE metaport
# installs xfce4-screensaver to autostart and having both enabled
# causes conflicts.
# 
# If you want to change the screen saver being used and enable
# xscreensaver please go to the Session and Startup settings, and in
# the Application Autostart tab enable only the relevant screensaver:
# 
# Screensaver -> to enable xscreensaver
# XFCE Screensaver -> to enable xfce4-screensaver
# 
# On upgrade:
# This port installs a startup file for xscreensaver but it is
# disabled by default. This is so because the XFCE metaport
# installs xfce4-screensaver to autostart and having both enabled
# causes conflicts.
# 
# If you want to change the screen saver being used and enable
# xscreensaver please go to the Session and Startup settings, and in
# the Application Autostart tab enable only the relevant screensaver:
# 
# Screensaver -> to enable xscreensaver
# XFCE Screensaver -> to enable xfce4-screensaver


# xine-0.99.12_2:
# On install:
# Make sure you've enough shared memory, the xine FAQ
#  advises to have the following sysctl settings:
# 
#  kern.ipc.shmmax=67108864
#  kern.ipc.shmall=32768
# 
#  To suppress many xitk warnings, please put following
#  setting in ~/.xitkrc.
# 
#  feature.shm = 0
    if (-e '/usr/local/bin/xine') {
        $cmd .= "$sysmod $f_sysctl_conf kern.ipc.shmmax=67108864 none\n";
        $cmd .= "$sysmod $f_sysctl_conf kern.ipc.shmall=32768 none\n";
        $cmd .= "sysctl kern.ipc.shmmax=67108864\n";
        $cmd .= "sysctl kern.ipc.shmall=32768\n";
    }

    
    #################################### .xinitrc configuration

    # create xinitrc (software section)
    $xinitrcsoft = $xinitrc_soft_start;
    
    $xinitrcsoft .= 
q|# note: see  /usr/share/X11/xkb for xkb settings
setxkbmap | . $selkbdmapstr . "\n";

    # TODO: after adding option to build xorg without libinput,
    # xinput can be used again
    # then add a dialog or put this as comment in .xinitrc
    # perl $user1001home/.fvwm/meow/wheeloff.pl 

    $xinitrcsoft .= ($enable_xscreensaver or $islaptop)
        ?
q|# uncomment to turn off xorg's default screensaver
# xset -dpms s off
|
        :
q|# comment out to turn on xorg's default screensaver
xset -dpms s off
|;
    
    if (not $enable_skipapachebuild) {
        $xinitrcsoft .= "$option_configbrowser http://$myip &\n";
    }

    # startup of DE runtimes before actual startup of DE/WM
    
    if (exists $selectdewms{ 'KDE'}) {
        $xinitrcsoft .= 
q|# start up KDE runtime stuff
kbuildsycoca5 --noincremental
kded5 &
|;
    }

    # actual startup of DE/WM
    
    if (exists $selectdewms{ 'FVWM'}) {
        my $prep = ($primarydewm eq 'FVWM')
                    ? ''
                    : '# ';
        $xinitrcsoft .= "# FVWM\n";
        $xinitrcsoft .= $prep . "exec fvwm3\n";
    }
    if (exists $selectdewms{ 'KDE'}) {
        my $prep = ($primarydewm eq 'KDE')
                    ? ''
                    : '# ';
        $xinitrcsoft .= "# KDE\n";
        $xinitrcsoft .= $prep . "exec ck-launch-session startplasma-x11\n";
    }
    if (exists $selectdewms{ 'Gnome'}) {
        my $prep = ($primarydewm eq 'Gnome')
                    ? ''
                    : '# ';
        $xinitrcsoft .= "# Gnome\n";
        $xinitrcsoft .= $prep . "exec /usr/local/bin/gnome-session\n";
    }
    if (exists $selectdewms{ 'Mate'}) {
        my $prep = ($primarydewm eq 'Mate')
                    ? ''
                    : '# ';
        $xinitrcsoft .= "# Mate\n";
        $xinitrcsoft .= $prep . "exec mate-session\n";
    }
    if (exists $selectdewms{ 'XFCE'}) {
        my $prep = ($primarydewm eq 'XFCE')
                    ? ''
                    : '# ';
        $xinitrcsoft .= "# XFCE\n";
        $xinitrcsoft .= $prep . "exec /usr/local/bin/startxfce4\n";
    }
    
    $xinitrcsoft .= $xinitrc_soft_end;
    $cmd .= "$writexinitrcsoft\n";

    executer( $cmd);
    $cmd = '';
}

sub getdirfiles {
    my $dname = shift;

    opendir DIR, $dname or die; # "cannot open dir $dname: $!";
    my @dir = readdir DIR;
    closedir DIR;
    return @dir;
}

# TODO check:
# ArchWiki says that font directories can be nested.
# Didn't find such on FreeBSD.
# So the question is, is it sufficient to only do one iterative scan?
# Or, are there font apps/packages that use nested font dirs, so that
# we need to search recursively for font dirs?
sub getfontpaths
{
    my $fontd = shift;
    
    my @fontdir = getdirfiles( $fontd);
    my $fontpaths = '';
    foreach (@fontdir) {
        # skip . and .., also...
        # do not add the xorg-built-in font paths
        # you can see these using 'xset q'
        next if (/^(?:\.|\.\.|misc|TTF|OTF|Type1|100dpi|75dpi)$/);
        
        my @fontfiles = getdirfiles( $d_fontsdir . '/' . $_);
        # TODO check: is it really requisite to have fonts.dir and 
        # fonts.scale in font dir?
        my $fontcheck = join( "\n", @fontfiles);
        next if (not ($fontcheck =~ /^(?:(?:fonts\.dir))$/ms));
        next if (not ($fontcheck =~ /^(?:(?:fonts\.scale))$/ms));
        # directory must contain xorg compatible font files
        # TODO check: is this correct or are other font types than 
        # .otf and .ttf also supported?
        next if (not ($fontcheck =~ /(?:(?:\.otf)|(?:\.ttf))$/ms));
        
        $fontpaths .= "    FontPath \"$fontd/$_\"\n";
    }
    return $fontpaths;
}

sub do_skunkosxinstallconfigx
{
    if (defined $opt_configx) {
        # clean up configuration files
        cleanconfigs();
        
        # delete graphics-related packages so there will be no conflicts 
        # when installing packages for other stuff
        # for example, different nvidia driver versions cannot be installed 
        # concurrently, for radeonkms/amdgpu probably the same
        # also unload possibly loaded modules
        foreach (keys %$pciids_others_lists) {
            my $aref = ${$pciids_others_lists}{$_};
            my $xf86drv = $$aref[ $othersind_xf86drv ];
            $cmd .= "[0 1]env ASSUME_ALWAYS_YES=TRUE pkg delete $xf86drv\n";
        }
        # nvidia
        $cmd .= "[0 1]kldunload nvidia\n";
        $cmd .= "[0 1]kldunload nvidia-modeset\n";
        foreach (@nvidia_drivers) {
            $cmd .= "[0 1]env ASSUME_ALWAYS_YES=TRUE pkg delete $_\n";
        }
        # intel related
        $cmd .= "[0 1]kldunload i915kms\n";
        $cmd .= "[0 1]env ASSUME_ALWAYS_YES=TRUE pkg delete xf86-video-i740\n";
        $cmd .= "[0 1]env ASSUME_ALWAYS_YES=TRUE pkg delete xf86-video-intel\n";
        # atiamd related
        $cmd .= "[0 1]kldunload radeonkms\n";
        $cmd .= "[0 1]kldunload amdgpu\n";
        $cmd .= "[0 1]env ASSUME_ALWAYS_YES=TRUE pkg delete xf86-video-mach64\n";
        $cmd .= "[0 1]env ASSUME_ALWAYS_YES=TRUE pkg delete xf86-video-r128\n";
        $cmd .= "[0 1]env ASSUME_ALWAYS_YES=TRUE pkg delete xf86-video-ati\n";
        $cmd .= "[0 1]env ASSUME_ALWAYS_YES=TRUE pkg delete xf86-video-amdgpu\n";
        $cmd .= "[0 1]env ASSUME_ALWAYS_YES=TRUE pkg delete graphics/gpu-firmware-kmod\n";
        $cmd .= "[0 1]env ASSUME_ALWAYS_YES=TRUE pkg delete graphics/drm-devel-kmod\n";
        $cmd .= "[0 1]env ASSUME_ALWAYS_YES=TRUE pkg delete graphics/drm-kmod\n";
        $cmd .= "[0 1]kldunload vesa\n";
        executer( $cmd);
        $cmd = '';
    }
    
    # laptop detection and special handling TODO
    if ($islaptop) {
    
    # TODO set up lid handling etc
    #     power_config()
# {
#     # If CPU frequency is controllable, enable powerd.
#     if sysctl dev.cpu.0.freq > /dev/null 2>&1 && ! fgrep -q powerd /etc/rc.conf; then
# 	auto-enable-service powerd desktop-installer
#     fi
# 
#     if sysctl -a | fgrep -q dev.acpi_lid.0; then
# 	cat << EOM
#     

        if ($islaptop and scalar keys %$vga > 1) {
            # dual GPU laptop
            # offloader, switcheroo or "normal" GPUs?
            # TODO
        }
    }

    
    #################################### autodetect autoconfigure

    my $finalmsg = '';
    my $kldcmd = '';
    my $usecons = '';
    cleanconfigs();
    autodetectautoconfigure(\$finalmsg, \$cmd, \$kldcmd, \$usecons);
    $cmd .= $kldcmd;

    # register font paths that are not built-in in xorg
    my $fopa = getfontpaths( $d_fontsdir);
    $xorgconf =~ s/(.*?\nSection\s+"Files").*?(EndSection.*)/$1\n$fopa$2/s;

    # now write the generated xorg.conf
    $cmd .= "$writexorgconf\n";
    # now we have three batches:
    #     $execbatch_install
    #     $execbatch_live
    #     $execbatch_xorg_poststart
    $cmd .= $execbatch_install;
    $cmd .= $execbatch_live;
    
    #################################### .xinitrc configuration

    # prepare the hardware part of xinitrc
    $xinitrchard = $xinitrc_hard_start;
    $xinitrchard .= $execbatch_xorg_poststart;
    $xinitrchard .= $xinitrc_hard_end;
    $cmd .= "$writexinitrchard\n";
    
    # finally, clean up dependencies
    $cmd .= "env ASSUME_ALWAYS_YES=YES pkg autoremove\n";

    # crappy drm-kmod sucks balls
    # it turns the screen black if good sc is running while kldloading it
    # so we need to care for that
    catchkmssurprise();

    executer( $cmd);
    $cmd = '';

    if (not $enable_skipapachebuild and not defined $opt_configx) {
        # after Apache is installed, it must be started
        # check whether apache is still running from a former bootie run
        # if so, skip the onestart
        my $psa = `ps ax`;
        if ($psa =~ /\/usr\/local\/sbin\/httpd/s) {
            logconsole "Apache seems to run already (presumably from a previous bootie run), so not starting it\n";
        } else {
            $cmd .= "service apache24 onestart\n";
        }
    }
    
    if (not defined $opt_configx) {
        $cmd .= "bectl create $SkunkOSXInstall\n";
    }

    # land user where he/she/it belongs :)
    $cmd .= "cd $user1001home\n";
    executer( $cmd);
    $cmd = '';

    #################################### config finished, optional startx

    my $xmsg = '';
    if (not defined $opt_configx) {
        $xmsg .= 'Xorg has been installed.\n';
    }
    $xmsg .= 'The graphics card(s) have been configured in ' . $d_etc_X11 . '/xorg.conf.';
    my $tit = (defined $opt_configx)
        ? ''
        : ' installation and';
    
    if ($PR261749reboot) {
        # because of bug $PR261749 we must reboot
        if ( yesno( 
                "$bootie_backtitleheader: Postconfiguration stage",
                "xorg$tit graphics driver configuration finished.",
                $xmsg . $finalmsg . "\\nTo avoid a kernel crash caused by a bug in the previously installed radeonkms driver (see PR261749), you have to reboot before you can start X Window. Hit \"Enter\" to reboot now, or choose \"No\" to go back to console.",
                '15 72')) 
        {
            # reboot
            qx|shutdown -r now|;
        } else {
            exit 0;
        }
    }
    
    if ( yesno( 
            "$bootie_backtitleheader: Postconfiguration stage",
            "xorg$tit graphics driver configuration finished.\\n",
            $xmsg . "\\n" . $finalmsg  . "\\nIf you want to start X Window now, just hit \"Enter\".\\nIf you do not want to start X now, please choose \"No\". You can then start X Window later yourself using the \"startx\" command.",
            '15 72')) {
        # yes, start xorg
        if (defined $kmssurprise) {
            # the string is escaped, needs to be unescaped
            $kmssurprise =~ s/\\n/\n/g;
            $kmssurprise =~ s/\\(.)/$1/g;
            executer( $kmssurprise);
        }
        
        my $r = callsystem('sudo -u \#1001 startx -- -layout multi');
        
        # TODO:
        # if Intel or AMD then check if there is an altdriver (-devel-kmod)
        # if so fallback to STEP_POSTINSTALLX: using altdriver
        # and make sure to stop installation if altdriver also fails
        # TODO retry with altdriver in this case
        die "Guru Meditation: will it work using altdriver, eg. devel-kmod?" if ($r);
    } else {
        print "Please do what you want to do on console, and then reboot\n";
    } 
}


###########################################################################
###########################################################################
###########################################################################
###########################################################################
###########################################################################
###########################################################################
###############################
###############################     MAIN SECTION
###############################
###########################################################################
###########################################################################
###########################################################################
###########################################################################
###########################################################################



    GetOptions(
        "help|h|?"          => \&opt_show_help,
        "version"           => \&opt_show_version,
        "d|ignoreversion"   => \$opt_ignoreversion,
        "i|install"         => \$opt_install,
        "x|installxorg"     => \$opt_installxorg,
        "c|configx"         => \$opt_configx,
        "a"                 => \$opt_apache,
    );
    
    # kernel panic bug evasion
    if ($PR261749) {
        my $kldstat = `kldstat`;
        unless ($kldstat =~ /radeonkms/s) {
            # seems radeonkms has not been loaded
            # as it is unlikely that the user will do
            # loading/unloading radeonkms himself,
            # clear bug flag
            $PR261749 = 0;
        }
    }
    
    if (not defined $opt_install and 
            not defined $opt_installxorg and
            not defined $opt_configx) {
        print "No valid option combination given.\nPlease run '$myname help' for info.\n";
        exit 0;
    }
    if (defined $opt_apache) {
        $enable_skipapachebuild = 0;
    }
        
    logconsole( "$myname $myversion launch at " . localtime() . "\n");
    
    # load some global vars
    $runningconsole = getrunningconsole();
    {
        my $dmesgbr = read_a_file( $f_dmesgboot);
        die if (not defined $dmesgbr);
        $dmesgboot = $$dmesgbr;
    }
    $isvbox = (defined ($dmesgboot =~ /^acpi0\:\s\<VBOX\s/ms))
            ? 1
            : 0;
    ($bootvga) = $dmesgboot =~ /^vgapci(\d+): Boot video device/ms;
    $pciconf = `pciconf -lv`;
    {
        my $suspendstates = `sysctl hw.acpi.supported_sleep_state`;
        $zzz_supported = $suspendstates =~ /S3/;
    }

    supportedversioncheck();
    
    # checks if booted into stage BE and cleans up for
    # installation redo from this stage
    checkcleanbe();

    # find out install stage and jump accordingly
    # just to avoid misunderstandings: the $inststg tells which 
    # stage(s) have already been *finished*.
    my $inststg = highestbe();

    if ($inststg == $SKUNKOSBASEINSTALL or $inststg == $SKUNKOSXINSTALL) {
        # get some data from the installation before SkunkOSBaseInstall finished
        $enable_skipapachebuild = (-e '/usr/local/sbin/httpd') ? 0 : 1;
        if (not $enable_skipapachebuild) {
            getmyip();
        }
        checkuser1001(0);
    }
    
    # isn't it sad that goto has been deprecated?
    # so I enjoy that retro feeling a last time :)
    
    if ($inststg == $SKUNKOSXINSTALL) {
        if (defined $opt_configx) {
            goto STEP_SKUNKOSXINSTALLCONFIGX;
        } else {
            print "You already have finished the installation of SkunkOS.\n";
            print "If you want to do a graphics card reconfiguration,\n";
            print "use '$myname -c', e.g. with the (re-)configuration option.\n";
            exit 0;
        }
    }
    if (defined $opt_configx) {
        print "You must first finish the installation of SkunkOS\n";
        print "before you can reconfigure Xorg. Use option '-i'.\n ";
        exit 0;
    }
    
    if ($inststg == $SKUNKOSBASEINSTALL) {
        goto STEP_SKUNKOSXINSTALL;
    } elsif ($inststg == $FREEBSDBASEINSTALLUPDATED) {
        goto STEP_SKUNKOSBASEINSTALL;
    } elsif ($inststg == $FREEBSDBASEINSTALL) {
        check_preupdate(0);     # 0 - do not create $FREEBSDBASEINSTALL BE
        goto STEP_SKUNKOSBASEINSTALL;
    }
    
    # no boot environments there yet - fall through to installation
        
STEP_FREEBSDBASEINSTALLUPDATE:
    check_preupdate(1);     # 1 - create $FREEBSDBASEINSTALL BE

STEP_SKUNKOSBASEINSTALL:
    do_skunkosbaseinstall();
    
STEP_SKUNKOSXINSTALL:        
    do_skunkosxinstall();

STEP_SKUNKOSXINSTALLCONFIGX:
    do_skunkosxinstallconfigx();
    
    exit 0;




# options TODO:
# -GFX config with manual extraopts:
#   -do not use particular GFX card(s)?
#
# - delete httpd (incl srcs?) from config (files)
#     
#     https://forums.developer.nvidia.com/t/reference-to-xorg-conf-and-resolution-settings/65920
#     https://stackoverflow.com/questions/11367354/obtaining-list-of-all-xorg-displays

#     Note: for CSM BIOS init hack:
#     this also uses int86x:
#     sysutils/read-edid
#     sysutils/edid-decode
#     xdpyinfo|grep dimensions
    
#     general settings
#     maybe message user this?
#     TODO maybe this needs to be added for amd/intel config?
#     on UEFI systems with amdgpu or intel, disable EFI runtime, as 
#     on some systems this prevents PCI ID reshuffling
#     if (needsuefipatch and $system_isuefi) {
#         ${$vga}{$vgaind}{$key_bootloaderconf}{'efi.rt.disabled="1"'} = 1;
#     }
#    
#     # general information
#     $tx .= 
#             "Important note:\nPlease make sure you disable PnP in the BIOS, if it has such a setting.\nIt is unlikely that disabling PnP in the BIOS will have negative side effects on modern systems, as this BIOS functions' purpose is to work around issues with very old 1990s hardware.\nThe reason is that with PnP enabled, some BIOS shuffle PCI IDs through reboots, causing problems with detecting the video card, in turn resulting in X failing to start.";
#     

#     https://en.wikipedia.org/wiki/Direct_Rendering_Manager
#     
#     regarding radeon drivers:
#     AMD (formerly ATi) Radeon GPU series with the architectures TeraScale and GCN 1st & 2nd gen. Including models from R100/200/300/400, Radeon X1000, HD 2000/4000/5000/6000/7000/8000, R5/R7/R9 200/300 series and Kaveri APUs. 
    
#     regarding amdgpu drivers:
#     AMD Radeon GPU series with the architectures GCN 3rd & 4th gen. Including models from Radeon Rx 200/300/400/500[81] series and Carrizo and Bristol & Stoney Ridge APUs. 
#  https://www.phoronix.com/scan.php?page=news_item&px=AMDGPU-SI-Next-4.9
        
################### Nvidia notes

# Why Nvidia *must* be loaded via /boot/loader.conf:
#
#   When loading from $f_rc_conf, a module will only be present after going multiuser, but not in single-user (maintenance) mode. When loading from /boot/loader.conf, they will already be present when the kernel takes control.
# There are pro's and con's for either approach.

# see here: https://forums.freebsd.org/threads/howto-setup-xorg-with-nvidias-driver.52311/
# notes: regarding pci ids and multiple cards:

# see https://forums.developer.nvidia.com/t/multi-nvidia-gpus-and-xorg-conf-how-to-account-for-pci-bus-busid-change/34556
# nvidia-xconfig --enable-all-gpus --separate-x-screens”
# nvidia-settings -q gpus

# regarding muxless cards:
# https://unix.stackexchange.com/questions/578666/how-do-i-switch-my-display-controller-to-radeon-instead-of-the-built-in-intel-gr/579022#579022

# BUSID problems on old computers caused by PnP enabled in BIOS?
# maybe as debugging hint for users?
# https://bbs.archlinux.org/viewtopic.php?id=41146
        
################### ATIAMD notes

# Option "DRI" "True"
# Option "AccelMethod" "exa"
# Option "MigrationHeuristic" "greedy"
# 
# for saving power , put this in your loader.conf . the following lines will enable dynamic power management on you gpu
# compat.linuxkpi.amdgpu_dpm=1
# compat.linuxkpi.amdgpu_bapm=1
# compat.linuxkpi.amdgpu_runpm=1
# compat.linuxkpi.amdgpu_dc=1
  
# necessary to load drm module?
# some say radeonkms loads it?
# ${$vga}{$vgaind}{$key_kldlist}{'drm2'} = 1;
# Userspace interface to kernel Direct Rendering Module services
# "/boot/modules/drm2.ko
#             ${$vga}{$vgaind}{$key_pkglist}{'graphics/libdrm'} = 1;
# ditto for linux apps
#             ${$vga}{$vgaind}{$key_pkglist}{'graphics/linux-c7-libdrm'} = 1;
#             ${$vga}{$vgaind}{$key_pkglist}{'graphics/mesa-dri' = 1;
# necessary to load drm module?
# some say radeonkms loads it?
# ${$vga}{$vgaind}{$key_kldlist}{'drm2'} = 1;

# we apparently only need a xorg config file if there is an user space driver
# 
#   pkg install graphics/drm-kmod graphics/gpu-firmware-kmod x11-drivers/xf86-video-amdgpu


# regarding early drm-kmod chaos:
#   
#  graphics/drm-legacy-kmod is in fact THE SAME as the default modules built into the default kernel
# 
# (to not confuse with graphics-drm-kmod which is a full port of Linux DRM Kmod driver (for intel and AMD chipset) superseding xorg drivers. Legacy FreeBSD Kmod is a specific and limited implementation of DRM-Kmod to get high resolution VT console. For "X" operations, the regular video xorg driver is required) 
        

# regarding some libinput problems:
#
# from post https://forums.freebsd.org/threads/information-collection-thread-graphics-drivers-xorg-conf-etc.79011/post-495653
# this sysctl variable already default 12///
# Is this because of libinput, or is it normally not present?
# Configure kernel evdev support:
# 0x01  Enable sysmouse
# 0x02  Enable kbdmux
# 0x04  Enable hardware mouse devices
# 0x08  Enable hardware keyboard devices
# kern.evdev.rcpt_mask=0xC 
#
#         $cmdguiintel .= 
#         "sysctl kern.evdev.rcpt_mask=0xC\n";

    
# potentially wrong wiki info:
#
# https://wiki.freebsd.org/Graphics#AMD_Graphics :
# AMD GPU is the kernel module that can be used to support post-HD7000 or Tahiti GPUs
# see for instr:
# https://wiki.freebsd.org/Graphics#AMD_Graphics
# https://wiki.freebsd.org/Graphics/AMD-GPU-Matrix
# https://www.x.org/wiki/RadeonFeature/#index5h2
# https://github.com/freebsd/freebsd-src/blob/master/sys/dev/drm2/drm_pciids.h
# Trying to figure out how to detect the correct drivers, I found the Wiki saying:
# 
# [QUOTE="FreeBSD Wiki"]
# AMD GPU is the kernel module that can be used to support post-HD7000 or Tahiti GPUs
# [/QUOTE]
# 
# However, some cards do not tell unambiguous type information, like [URL='https://bsd-hardware.info/?id=pci:1002-6779-1043-03da']this example[/URL] "Caicos [Radeon HD 6450/7450/8450 / R5 230 OEM].
# There is also no clear indication available on the [URL='https://en.wikipedia.org/wiki/List_of_AMD_graphics_processing_units#Features_Overview']Wikipedia chart[/URL], and the tables below the chart indicate that there are variants with the same code name ('Caicos' in this case).
# 
# Further research let me look at [FILE]/usr/src/sys/dev/drm2/drm_pciids.h[/FILE].
# 
# There are several groups of PCI IDs of AMD/ATI cards listed.
# These are:
# MACH64_PCI_IDS   -> [URL='https://www.freshports.org/x11-drivers/xf86-video-mach64/']x11-drivers/xf86-video-mach64[/URL]
# r128_PCI_IDS  -> [URL='https://www.freshports.org/x11-drivers/xf86-video-r128/']x11-drivers/xf86-video-r128[/URL]
# 
# radeon_PCI_IDS


# see this for green screensaver on console:
# https://forums.freebsd.org/threads/console-blank-screen-vt.72229/post-438861
# https://forums.freebsd.org/index.php?threads/how-do-you-set-a-screensaver-in-console-mode.54934/#post-310565/
